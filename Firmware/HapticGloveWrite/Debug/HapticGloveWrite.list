
HapticGloveWrite.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b180  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000128c  0800b330  0800b330  0000c330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c5bc  0800c5bc  0000e06c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c5bc  0800c5bc  0000d5bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c5c4  0800c5c4  0000e06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c5c4  0800c5c4  0000d5c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c5c8  0800c5c8  0000d5c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800c5cc  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ab4  2000006c  0800c638  0000e06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b20  0800c638  0000eb20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002354e  00000000  00000000  0000e09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040ab  00000000  00000000  000315ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001db8  00000000  00000000  00035698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001757  00000000  00000000  00037450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ebed  00000000  00000000  00038ba7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023095  00000000  00000000  00067794  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00111de0  00000000  00000000  0008a829  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019c609  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008b28  00000000  00000000  0019c64c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  001a5174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800b318 	.word	0x0800b318

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000070 	.word	0x20000070
 80001ec:	0800b318 	.word	0x0800b318

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_d2f>:
 8000608:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800060c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000610:	bf24      	itt	cs
 8000612:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000616:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800061a:	d90d      	bls.n	8000638 <__aeabi_d2f+0x30>
 800061c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000620:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000624:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000628:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 800062c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000630:	bf08      	it	eq
 8000632:	f020 0001 	biceq.w	r0, r0, #1
 8000636:	4770      	bx	lr
 8000638:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 800063c:	d121      	bne.n	8000682 <__aeabi_d2f+0x7a>
 800063e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000642:	bfbc      	itt	lt
 8000644:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000648:	4770      	bxlt	lr
 800064a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800064e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000652:	f1c2 0218 	rsb	r2, r2, #24
 8000656:	f1c2 0c20 	rsb	ip, r2, #32
 800065a:	fa10 f30c 	lsls.w	r3, r0, ip
 800065e:	fa20 f002 	lsr.w	r0, r0, r2
 8000662:	bf18      	it	ne
 8000664:	f040 0001 	orrne.w	r0, r0, #1
 8000668:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800066c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000670:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000674:	ea40 000c 	orr.w	r0, r0, ip
 8000678:	fa23 f302 	lsr.w	r3, r3, r2
 800067c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000680:	e7cc      	b.n	800061c <__aeabi_d2f+0x14>
 8000682:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000686:	d107      	bne.n	8000698 <__aeabi_d2f+0x90>
 8000688:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800068c:	bf1e      	ittt	ne
 800068e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000692:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000696:	4770      	bxne	lr
 8000698:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 800069c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80006a0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop

080006a8 <__aeabi_uldivmod>:
 80006a8:	b953      	cbnz	r3, 80006c0 <__aeabi_uldivmod+0x18>
 80006aa:	b94a      	cbnz	r2, 80006c0 <__aeabi_uldivmod+0x18>
 80006ac:	2900      	cmp	r1, #0
 80006ae:	bf08      	it	eq
 80006b0:	2800      	cmpeq	r0, #0
 80006b2:	bf1c      	itt	ne
 80006b4:	f04f 31ff 	movne.w	r1, #4294967295
 80006b8:	f04f 30ff 	movne.w	r0, #4294967295
 80006bc:	f000 b96a 	b.w	8000994 <__aeabi_idiv0>
 80006c0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006c4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006c8:	f000 f806 	bl	80006d8 <__udivmoddi4>
 80006cc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006d4:	b004      	add	sp, #16
 80006d6:	4770      	bx	lr

080006d8 <__udivmoddi4>:
 80006d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006dc:	9d08      	ldr	r5, [sp, #32]
 80006de:	460c      	mov	r4, r1
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d14e      	bne.n	8000782 <__udivmoddi4+0xaa>
 80006e4:	4694      	mov	ip, r2
 80006e6:	458c      	cmp	ip, r1
 80006e8:	4686      	mov	lr, r0
 80006ea:	fab2 f282 	clz	r2, r2
 80006ee:	d962      	bls.n	80007b6 <__udivmoddi4+0xde>
 80006f0:	b14a      	cbz	r2, 8000706 <__udivmoddi4+0x2e>
 80006f2:	f1c2 0320 	rsb	r3, r2, #32
 80006f6:	4091      	lsls	r1, r2
 80006f8:	fa20 f303 	lsr.w	r3, r0, r3
 80006fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000700:	4319      	orrs	r1, r3
 8000702:	fa00 fe02 	lsl.w	lr, r0, r2
 8000706:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800070a:	fa1f f68c 	uxth.w	r6, ip
 800070e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000712:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000716:	fb07 1114 	mls	r1, r7, r4, r1
 800071a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800071e:	fb04 f106 	mul.w	r1, r4, r6
 8000722:	4299      	cmp	r1, r3
 8000724:	d90a      	bls.n	800073c <__udivmoddi4+0x64>
 8000726:	eb1c 0303 	adds.w	r3, ip, r3
 800072a:	f104 30ff 	add.w	r0, r4, #4294967295
 800072e:	f080 8112 	bcs.w	8000956 <__udivmoddi4+0x27e>
 8000732:	4299      	cmp	r1, r3
 8000734:	f240 810f 	bls.w	8000956 <__udivmoddi4+0x27e>
 8000738:	3c02      	subs	r4, #2
 800073a:	4463      	add	r3, ip
 800073c:	1a59      	subs	r1, r3, r1
 800073e:	fa1f f38e 	uxth.w	r3, lr
 8000742:	fbb1 f0f7 	udiv	r0, r1, r7
 8000746:	fb07 1110 	mls	r1, r7, r0, r1
 800074a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800074e:	fb00 f606 	mul.w	r6, r0, r6
 8000752:	429e      	cmp	r6, r3
 8000754:	d90a      	bls.n	800076c <__udivmoddi4+0x94>
 8000756:	eb1c 0303 	adds.w	r3, ip, r3
 800075a:	f100 31ff 	add.w	r1, r0, #4294967295
 800075e:	f080 80fc 	bcs.w	800095a <__udivmoddi4+0x282>
 8000762:	429e      	cmp	r6, r3
 8000764:	f240 80f9 	bls.w	800095a <__udivmoddi4+0x282>
 8000768:	4463      	add	r3, ip
 800076a:	3802      	subs	r0, #2
 800076c:	1b9b      	subs	r3, r3, r6
 800076e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000772:	2100      	movs	r1, #0
 8000774:	b11d      	cbz	r5, 800077e <__udivmoddi4+0xa6>
 8000776:	40d3      	lsrs	r3, r2
 8000778:	2200      	movs	r2, #0
 800077a:	e9c5 3200 	strd	r3, r2, [r5]
 800077e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000782:	428b      	cmp	r3, r1
 8000784:	d905      	bls.n	8000792 <__udivmoddi4+0xba>
 8000786:	b10d      	cbz	r5, 800078c <__udivmoddi4+0xb4>
 8000788:	e9c5 0100 	strd	r0, r1, [r5]
 800078c:	2100      	movs	r1, #0
 800078e:	4608      	mov	r0, r1
 8000790:	e7f5      	b.n	800077e <__udivmoddi4+0xa6>
 8000792:	fab3 f183 	clz	r1, r3
 8000796:	2900      	cmp	r1, #0
 8000798:	d146      	bne.n	8000828 <__udivmoddi4+0x150>
 800079a:	42a3      	cmp	r3, r4
 800079c:	d302      	bcc.n	80007a4 <__udivmoddi4+0xcc>
 800079e:	4290      	cmp	r0, r2
 80007a0:	f0c0 80f0 	bcc.w	8000984 <__udivmoddi4+0x2ac>
 80007a4:	1a86      	subs	r6, r0, r2
 80007a6:	eb64 0303 	sbc.w	r3, r4, r3
 80007aa:	2001      	movs	r0, #1
 80007ac:	2d00      	cmp	r5, #0
 80007ae:	d0e6      	beq.n	800077e <__udivmoddi4+0xa6>
 80007b0:	e9c5 6300 	strd	r6, r3, [r5]
 80007b4:	e7e3      	b.n	800077e <__udivmoddi4+0xa6>
 80007b6:	2a00      	cmp	r2, #0
 80007b8:	f040 8090 	bne.w	80008dc <__udivmoddi4+0x204>
 80007bc:	eba1 040c 	sub.w	r4, r1, ip
 80007c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007c4:	fa1f f78c 	uxth.w	r7, ip
 80007c8:	2101      	movs	r1, #1
 80007ca:	fbb4 f6f8 	udiv	r6, r4, r8
 80007ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80007d2:	fb08 4416 	mls	r4, r8, r6, r4
 80007d6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80007da:	fb07 f006 	mul.w	r0, r7, r6
 80007de:	4298      	cmp	r0, r3
 80007e0:	d908      	bls.n	80007f4 <__udivmoddi4+0x11c>
 80007e2:	eb1c 0303 	adds.w	r3, ip, r3
 80007e6:	f106 34ff 	add.w	r4, r6, #4294967295
 80007ea:	d202      	bcs.n	80007f2 <__udivmoddi4+0x11a>
 80007ec:	4298      	cmp	r0, r3
 80007ee:	f200 80cd 	bhi.w	800098c <__udivmoddi4+0x2b4>
 80007f2:	4626      	mov	r6, r4
 80007f4:	1a1c      	subs	r4, r3, r0
 80007f6:	fa1f f38e 	uxth.w	r3, lr
 80007fa:	fbb4 f0f8 	udiv	r0, r4, r8
 80007fe:	fb08 4410 	mls	r4, r8, r0, r4
 8000802:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000806:	fb00 f707 	mul.w	r7, r0, r7
 800080a:	429f      	cmp	r7, r3
 800080c:	d908      	bls.n	8000820 <__udivmoddi4+0x148>
 800080e:	eb1c 0303 	adds.w	r3, ip, r3
 8000812:	f100 34ff 	add.w	r4, r0, #4294967295
 8000816:	d202      	bcs.n	800081e <__udivmoddi4+0x146>
 8000818:	429f      	cmp	r7, r3
 800081a:	f200 80b0 	bhi.w	800097e <__udivmoddi4+0x2a6>
 800081e:	4620      	mov	r0, r4
 8000820:	1bdb      	subs	r3, r3, r7
 8000822:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000826:	e7a5      	b.n	8000774 <__udivmoddi4+0x9c>
 8000828:	f1c1 0620 	rsb	r6, r1, #32
 800082c:	408b      	lsls	r3, r1
 800082e:	fa22 f706 	lsr.w	r7, r2, r6
 8000832:	431f      	orrs	r7, r3
 8000834:	fa20 fc06 	lsr.w	ip, r0, r6
 8000838:	fa04 f301 	lsl.w	r3, r4, r1
 800083c:	ea43 030c 	orr.w	r3, r3, ip
 8000840:	40f4      	lsrs	r4, r6
 8000842:	fa00 f801 	lsl.w	r8, r0, r1
 8000846:	0c38      	lsrs	r0, r7, #16
 8000848:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800084c:	fbb4 fef0 	udiv	lr, r4, r0
 8000850:	fa1f fc87 	uxth.w	ip, r7
 8000854:	fb00 441e 	mls	r4, r0, lr, r4
 8000858:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800085c:	fb0e f90c 	mul.w	r9, lr, ip
 8000860:	45a1      	cmp	r9, r4
 8000862:	fa02 f201 	lsl.w	r2, r2, r1
 8000866:	d90a      	bls.n	800087e <__udivmoddi4+0x1a6>
 8000868:	193c      	adds	r4, r7, r4
 800086a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800086e:	f080 8084 	bcs.w	800097a <__udivmoddi4+0x2a2>
 8000872:	45a1      	cmp	r9, r4
 8000874:	f240 8081 	bls.w	800097a <__udivmoddi4+0x2a2>
 8000878:	f1ae 0e02 	sub.w	lr, lr, #2
 800087c:	443c      	add	r4, r7
 800087e:	eba4 0409 	sub.w	r4, r4, r9
 8000882:	fa1f f983 	uxth.w	r9, r3
 8000886:	fbb4 f3f0 	udiv	r3, r4, r0
 800088a:	fb00 4413 	mls	r4, r0, r3, r4
 800088e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000892:	fb03 fc0c 	mul.w	ip, r3, ip
 8000896:	45a4      	cmp	ip, r4
 8000898:	d907      	bls.n	80008aa <__udivmoddi4+0x1d2>
 800089a:	193c      	adds	r4, r7, r4
 800089c:	f103 30ff 	add.w	r0, r3, #4294967295
 80008a0:	d267      	bcs.n	8000972 <__udivmoddi4+0x29a>
 80008a2:	45a4      	cmp	ip, r4
 80008a4:	d965      	bls.n	8000972 <__udivmoddi4+0x29a>
 80008a6:	3b02      	subs	r3, #2
 80008a8:	443c      	add	r4, r7
 80008aa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80008ae:	fba0 9302 	umull	r9, r3, r0, r2
 80008b2:	eba4 040c 	sub.w	r4, r4, ip
 80008b6:	429c      	cmp	r4, r3
 80008b8:	46ce      	mov	lr, r9
 80008ba:	469c      	mov	ip, r3
 80008bc:	d351      	bcc.n	8000962 <__udivmoddi4+0x28a>
 80008be:	d04e      	beq.n	800095e <__udivmoddi4+0x286>
 80008c0:	b155      	cbz	r5, 80008d8 <__udivmoddi4+0x200>
 80008c2:	ebb8 030e 	subs.w	r3, r8, lr
 80008c6:	eb64 040c 	sbc.w	r4, r4, ip
 80008ca:	fa04 f606 	lsl.w	r6, r4, r6
 80008ce:	40cb      	lsrs	r3, r1
 80008d0:	431e      	orrs	r6, r3
 80008d2:	40cc      	lsrs	r4, r1
 80008d4:	e9c5 6400 	strd	r6, r4, [r5]
 80008d8:	2100      	movs	r1, #0
 80008da:	e750      	b.n	800077e <__udivmoddi4+0xa6>
 80008dc:	f1c2 0320 	rsb	r3, r2, #32
 80008e0:	fa20 f103 	lsr.w	r1, r0, r3
 80008e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80008e8:	fa24 f303 	lsr.w	r3, r4, r3
 80008ec:	4094      	lsls	r4, r2
 80008ee:	430c      	orrs	r4, r1
 80008f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008f4:	fa00 fe02 	lsl.w	lr, r0, r2
 80008f8:	fa1f f78c 	uxth.w	r7, ip
 80008fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000900:	fb08 3110 	mls	r1, r8, r0, r3
 8000904:	0c23      	lsrs	r3, r4, #16
 8000906:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800090a:	fb00 f107 	mul.w	r1, r0, r7
 800090e:	4299      	cmp	r1, r3
 8000910:	d908      	bls.n	8000924 <__udivmoddi4+0x24c>
 8000912:	eb1c 0303 	adds.w	r3, ip, r3
 8000916:	f100 36ff 	add.w	r6, r0, #4294967295
 800091a:	d22c      	bcs.n	8000976 <__udivmoddi4+0x29e>
 800091c:	4299      	cmp	r1, r3
 800091e:	d92a      	bls.n	8000976 <__udivmoddi4+0x29e>
 8000920:	3802      	subs	r0, #2
 8000922:	4463      	add	r3, ip
 8000924:	1a5b      	subs	r3, r3, r1
 8000926:	b2a4      	uxth	r4, r4
 8000928:	fbb3 f1f8 	udiv	r1, r3, r8
 800092c:	fb08 3311 	mls	r3, r8, r1, r3
 8000930:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000934:	fb01 f307 	mul.w	r3, r1, r7
 8000938:	42a3      	cmp	r3, r4
 800093a:	d908      	bls.n	800094e <__udivmoddi4+0x276>
 800093c:	eb1c 0404 	adds.w	r4, ip, r4
 8000940:	f101 36ff 	add.w	r6, r1, #4294967295
 8000944:	d213      	bcs.n	800096e <__udivmoddi4+0x296>
 8000946:	42a3      	cmp	r3, r4
 8000948:	d911      	bls.n	800096e <__udivmoddi4+0x296>
 800094a:	3902      	subs	r1, #2
 800094c:	4464      	add	r4, ip
 800094e:	1ae4      	subs	r4, r4, r3
 8000950:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000954:	e739      	b.n	80007ca <__udivmoddi4+0xf2>
 8000956:	4604      	mov	r4, r0
 8000958:	e6f0      	b.n	800073c <__udivmoddi4+0x64>
 800095a:	4608      	mov	r0, r1
 800095c:	e706      	b.n	800076c <__udivmoddi4+0x94>
 800095e:	45c8      	cmp	r8, r9
 8000960:	d2ae      	bcs.n	80008c0 <__udivmoddi4+0x1e8>
 8000962:	ebb9 0e02 	subs.w	lr, r9, r2
 8000966:	eb63 0c07 	sbc.w	ip, r3, r7
 800096a:	3801      	subs	r0, #1
 800096c:	e7a8      	b.n	80008c0 <__udivmoddi4+0x1e8>
 800096e:	4631      	mov	r1, r6
 8000970:	e7ed      	b.n	800094e <__udivmoddi4+0x276>
 8000972:	4603      	mov	r3, r0
 8000974:	e799      	b.n	80008aa <__udivmoddi4+0x1d2>
 8000976:	4630      	mov	r0, r6
 8000978:	e7d4      	b.n	8000924 <__udivmoddi4+0x24c>
 800097a:	46d6      	mov	lr, sl
 800097c:	e77f      	b.n	800087e <__udivmoddi4+0x1a6>
 800097e:	4463      	add	r3, ip
 8000980:	3802      	subs	r0, #2
 8000982:	e74d      	b.n	8000820 <__udivmoddi4+0x148>
 8000984:	4606      	mov	r6, r0
 8000986:	4623      	mov	r3, r4
 8000988:	4608      	mov	r0, r1
 800098a:	e70f      	b.n	80007ac <__udivmoddi4+0xd4>
 800098c:	3e02      	subs	r6, #2
 800098e:	4463      	add	r3, ip
 8000990:	e730      	b.n	80007f4 <__udivmoddi4+0x11c>
 8000992:	bf00      	nop

08000994 <__aeabi_idiv0>:
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop

08000998 <HCI_TL_SPI_Enable_IRQ>:
 * @brief  Enable SPI IRQ.
 * @param  None
 * @retval None
 */
static void HCI_TL_SPI_Enable_IRQ(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  HAL_NVIC_EnableIRQ(HCI_TL_SPI_EXTI_IRQn);
 800099c:	2009      	movs	r0, #9
 800099e:	f002 fa26 	bl	8002dee <HAL_NVIC_EnableIRQ>
}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <HCI_TL_SPI_Disable_IRQ>:
 * @brief  Disable SPI IRQ.
 * @param  None
 * @retval None
 */
static void HCI_TL_SPI_Disable_IRQ(void)
{
 80009a6:	b580      	push	{r7, lr}
 80009a8:	af00      	add	r7, sp, #0
  HAL_NVIC_DisableIRQ(HCI_TL_SPI_EXTI_IRQn);
 80009aa:	2009      	movs	r0, #9
 80009ac:	f002 fa2d 	bl	8002e0a <HAL_NVIC_DisableIRQ>
}
 80009b0:	bf00      	nop
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b088      	sub	sp, #32
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009bc:	4b21      	ldr	r3, [pc, #132]	@ (8000a44 <HCI_TL_SPI_Init+0x90>)
 80009be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c0:	4a20      	ldr	r2, [pc, #128]	@ (8000a44 <HCI_TL_SPI_Init+0x90>)
 80009c2:	f043 0301 	orr.w	r3, r3, #1
 80009c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009c8:	4b1e      	ldr	r3, [pc, #120]	@ (8000a44 <HCI_TL_SPI_Init+0x90>)
 80009ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009cc:	f003 0301 	and.w	r3, r3, #1
 80009d0:	60bb      	str	r3, [r7, #8]
 80009d2:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 80009d4:	2308      	movs	r3, #8
 80009d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009d8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80009dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 80009e2:	f107 030c 	add.w	r3, r7, #12
 80009e6:	4619      	mov	r1, r3
 80009e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009ec:	f002 fa86 	bl	8002efc <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 80009f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f6:	2301      	movs	r3, #1
 80009f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 8000a02:	f107 030c 	add.w	r3, r7, #12
 8000a06:	4619      	mov	r1, r3
 8000a08:	480f      	ldr	r0, [pc, #60]	@ (8000a48 <HCI_TL_SPI_Init+0x94>)
 8000a0a:	f002 fa77 	bl	8002efc <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a12:	2301      	movs	r3, #1
 8000a14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 8000a1e:	f107 030c 	add.w	r3, r7, #12
 8000a22:	4619      	mov	r1, r3
 8000a24:	4809      	ldr	r0, [pc, #36]	@ (8000a4c <HCI_TL_SPI_Init+0x98>)
 8000a26:	f002 fa69 	bl	8002efc <HAL_GPIO_Init>
  /* Deselect CS PIN for BlueNRG at startup to avoid spurious commands */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	2101      	movs	r1, #1
 8000a2e:	4807      	ldr	r0, [pc, #28]	@ (8000a4c <HCI_TL_SPI_Init+0x98>)
 8000a30:	f002 fd00 	bl	8003434 <HAL_GPIO_WritePin>

  return BSP_SPI1_Init();
 8000a34:	f001 f8a2 	bl	8001b7c <BSP_SPI1_Init>
 8000a38:	4603      	mov	r3, r0
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3720      	adds	r7, #32
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40021000 	.word	0x40021000
 8000a48:	48001400 	.word	0x48001400
 8000a4c:	48000800 	.word	0x48000800

08000a50 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 8000a54:	2108      	movs	r1, #8
 8000a56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a5a:	f002 fbe1 	bl	8003220 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 8000a5e:	2101      	movs	r1, #1
 8000a60:	4805      	ldr	r0, [pc, #20]	@ (8000a78 <HCI_TL_SPI_DeInit+0x28>)
 8000a62:	f002 fbdd 	bl	8003220 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 8000a66:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a6a:	4804      	ldr	r0, [pc, #16]	@ (8000a7c <HCI_TL_SPI_DeInit+0x2c>)
 8000a6c:	f002 fbd8 	bl	8003220 <HAL_GPIO_DeInit>
  return 0;
 8000a70:	2300      	movs	r3, #0
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	48000800 	.word	0x48000800
 8000a7c:	48001400 	.word	0x48001400

08000a80 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000a84:	2201      	movs	r2, #1
 8000a86:	2101      	movs	r1, #1
 8000a88:	480b      	ldr	r0, [pc, #44]	@ (8000ab8 <HCI_TL_SPI_Reset+0x38>)
 8000a8a:	f002 fcd3 	bl	8003434 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a94:	4809      	ldr	r0, [pc, #36]	@ (8000abc <HCI_TL_SPI_Reset+0x3c>)
 8000a96:	f002 fccd 	bl	8003434 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8000a9a:	2005      	movs	r0, #5
 8000a9c:	f002 f868 	bl	8002b70 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000aa6:	4805      	ldr	r0, [pc, #20]	@ (8000abc <HCI_TL_SPI_Reset+0x3c>)
 8000aa8:	f002 fcc4 	bl	8003434 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8000aac:	2005      	movs	r0, #5
 8000aae:	f002 f85f 	bl	8002b70 <HAL_Delay>
  return 0;
 8000ab2:	2300      	movs	r3, #0
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	48000800 	.word	0x48000800
 8000abc:	48001400 	.word	0x48001400

08000ac0 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b088      	sub	sp, #32
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	460b      	mov	r3, r1
 8000aca:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 8000acc:	2300      	movs	r3, #0
 8000ace:	777b      	strb	r3, [r7, #29]
  uint8_t char_00 = 0x00;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	75fb      	strb	r3, [r7, #23]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8000ad4:	4a31      	ldr	r2, [pc, #196]	@ (8000b9c <HCI_TL_SPI_Receive+0xdc>)
 8000ad6:	f107 0310 	add.w	r3, r7, #16
 8000ada:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ade:	6018      	str	r0, [r3, #0]
 8000ae0:	3304      	adds	r3, #4
 8000ae2:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  HCI_TL_SPI_Disable_IRQ();
 8000ae4:	f7ff ff5f 	bl	80009a6 <HCI_TL_SPI_Disable_IRQ>

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	2101      	movs	r1, #1
 8000aec:	482c      	ldr	r0, [pc, #176]	@ (8000ba0 <HCI_TL_SPI_Receive+0xe0>)
 8000aee:	f002 fca1 	bl	8003434 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8000af2:	f107 0108 	add.w	r1, r7, #8
 8000af6:	f107 0310 	add.w	r3, r7, #16
 8000afa:	2205      	movs	r2, #5
 8000afc:	4618      	mov	r0, r3
 8000afe:	f001 f86d 	bl	8001bdc <BSP_SPI1_SendRecv>

  /* device is ready */
  byte_count = (header_slave[4] << 8)| header_slave[3];
 8000b02:	7b3b      	ldrb	r3, [r7, #12]
 8000b04:	021b      	lsls	r3, r3, #8
 8000b06:	b21a      	sxth	r2, r3
 8000b08:	7afb      	ldrb	r3, [r7, #11]
 8000b0a:	b21b      	sxth	r3, r3
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	b21b      	sxth	r3, r3
 8000b10:	83fb      	strh	r3, [r7, #30]

  if(byte_count > 0)
 8000b12:	8bfb      	ldrh	r3, [r7, #30]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d01e      	beq.n	8000b56 <HCI_TL_SPI_Receive+0x96>
  {

    /* avoid to read more data than the size of the buffer */
    if (byte_count > size)
 8000b18:	8bfa      	ldrh	r2, [r7, #30]
 8000b1a:	887b      	ldrh	r3, [r7, #2]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d901      	bls.n	8000b24 <HCI_TL_SPI_Receive+0x64>
    {
      byte_count = size;
 8000b20:	887b      	ldrh	r3, [r7, #2]
 8000b22:	83fb      	strh	r3, [r7, #30]
    }

    for(len = 0; len < byte_count; len++)
 8000b24:	2300      	movs	r3, #0
 8000b26:	777b      	strb	r3, [r7, #29]
 8000b28:	e010      	b.n	8000b4c <HCI_TL_SPI_Receive+0x8c>
    {
      BSP_SPI1_SendRecv(&char_00, (uint8_t*)&read_char, 1);
 8000b2a:	f107 0116 	add.w	r1, r7, #22
 8000b2e:	f107 0317 	add.w	r3, r7, #23
 8000b32:	2201      	movs	r2, #1
 8000b34:	4618      	mov	r0, r3
 8000b36:	f001 f851 	bl	8001bdc <BSP_SPI1_SendRecv>
      buffer[len] = read_char;
 8000b3a:	7f7b      	ldrb	r3, [r7, #29]
 8000b3c:	687a      	ldr	r2, [r7, #4]
 8000b3e:	4413      	add	r3, r2
 8000b40:	7dba      	ldrb	r2, [r7, #22]
 8000b42:	b2d2      	uxtb	r2, r2
 8000b44:	701a      	strb	r2, [r3, #0]
    for(len = 0; len < byte_count; len++)
 8000b46:	7f7b      	ldrb	r3, [r7, #29]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	777b      	strb	r3, [r7, #29]
 8000b4c:	7f7b      	ldrb	r3, [r7, #29]
 8000b4e:	b29b      	uxth	r3, r3
 8000b50:	8bfa      	ldrh	r2, [r7, #30]
 8000b52:	429a      	cmp	r2, r3
 8000b54:	d8e9      	bhi.n	8000b2a <HCI_TL_SPI_Receive+0x6a>
  /**
   * To be aligned to the SPI protocol.
   * Can bring to a delay inside the frame, due to the BlueNRG-2 that needs
   * to check if the header is received or not.
   */
  uint32_t tickstart = HAL_GetTick();
 8000b56:	f001 ffff 	bl	8002b58 <HAL_GetTick>
 8000b5a:	61b8      	str	r0, [r7, #24]
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 8000b5c:	e007      	b.n	8000b6e <HCI_TL_SPI_Receive+0xae>
    if (HAL_GPIO_ReadPin(HCI_TL_SPI_IRQ_PORT, HCI_TL_SPI_IRQ_PIN)==GPIO_PIN_RESET) {
 8000b5e:	2108      	movs	r1, #8
 8000b60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b64:	f002 fc4e 	bl	8003404 <HAL_GPIO_ReadPin>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d008      	beq.n	8000b80 <HCI_TL_SPI_Receive+0xc0>
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 8000b6e:	f001 fff3 	bl	8002b58 <HAL_GetTick>
 8000b72:	4602      	mov	r2, r0
 8000b74:	69bb      	ldr	r3, [r7, #24]
 8000b76:	1ad3      	subs	r3, r2, r3
 8000b78:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000b7c:	d3ef      	bcc.n	8000b5e <HCI_TL_SPI_Receive+0x9e>
 8000b7e:	e000      	b.n	8000b82 <HCI_TL_SPI_Receive+0xc2>
      break;
 8000b80:	bf00      	nop
    }
  }
  HCI_TL_SPI_Enable_IRQ();
 8000b82:	f7ff ff09 	bl	8000998 <HCI_TL_SPI_Enable_IRQ>

  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000b86:	2201      	movs	r2, #1
 8000b88:	2101      	movs	r1, #1
 8000b8a:	4805      	ldr	r0, [pc, #20]	@ (8000ba0 <HCI_TL_SPI_Receive+0xe0>)
 8000b8c:	f002 fc52 	bl	8003434 <HAL_GPIO_WritePin>

  return len;
 8000b90:	7f7b      	ldrb	r3, [r7, #29]
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3720      	adds	r7, #32
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	0800b330 	.word	0x0800b330
 8000ba0:	48000800 	.word	0x48000800

08000ba4 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08a      	sub	sp, #40	@ 0x28
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
 8000bac:	460b      	mov	r3, r1
 8000bae:	807b      	strh	r3, [r7, #2]
  int32_t result;
  uint16_t rx_bytes;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8000bb0:	4a3f      	ldr	r2, [pc, #252]	@ (8000cb0 <HCI_TL_SPI_Send+0x10c>)
 8000bb2:	f107 0314 	add.w	r3, r7, #20
 8000bb6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000bba:	6018      	str	r0, [r3, #0]
 8000bbc:	3304      	adds	r3, #4
 8000bbe:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8000bc0:	f001 ffca 	bl	8002b58 <HAL_GetTick>
 8000bc4:	6238      	str	r0, [r7, #32]

  HCI_TL_SPI_Disable_IRQ();
 8000bc6:	f7ff feee 	bl	80009a6 <HCI_TL_SPI_Disable_IRQ>

  do
  {
    uint32_t tickstart_data_available = HAL_GetTick();
 8000bca:	f001 ffc5 	bl	8002b58 <HAL_GetTick>
 8000bce:	61f8      	str	r0, [r7, #28]

    result = 0;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	627b      	str	r3, [r7, #36]	@ 0x24

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	4836      	ldr	r0, [pc, #216]	@ (8000cb4 <HCI_TL_SPI_Send+0x110>)
 8000bda:	f002 fc2b 	bl	8003434 <HAL_GPIO_WritePin>

    /*
     * Wait until BlueNRG-2 is ready.
     * When ready it will raise the IRQ pin.
     */
    while(!IsDataAvailable())
 8000bde:	e00a      	b.n	8000bf6 <HCI_TL_SPI_Send+0x52>
    {
      if((HAL_GetTick() - tickstart_data_available) > TIMEOUT_DURATION)
 8000be0:	f001 ffba 	bl	8002b58 <HAL_GetTick>
 8000be4:	4602      	mov	r2, r0
 8000be6:	69fb      	ldr	r3, [r7, #28]
 8000be8:	1ad3      	subs	r3, r2, r3
 8000bea:	2b64      	cmp	r3, #100	@ 0x64
 8000bec:	d903      	bls.n	8000bf6 <HCI_TL_SPI_Send+0x52>
      {
        result = -3;
 8000bee:	f06f 0302 	mvn.w	r3, #2
 8000bf2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8000bf4:	e004      	b.n	8000c00 <HCI_TL_SPI_Send+0x5c>
    while(!IsDataAvailable())
 8000bf6:	f000 f861 	bl	8000cbc <IsDataAvailable>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d0ef      	beq.n	8000be0 <HCI_TL_SPI_Send+0x3c>
      }
    }
    if(result == -3)
 8000c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c02:	f113 0f03 	cmn.w	r3, #3
 8000c06:	d105      	bne.n	8000c14 <HCI_TL_SPI_Send+0x70>
    {
      /* The break causes the exiting from the "while", so the CS line must be released */
      HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000c08:	2201      	movs	r2, #1
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	4829      	ldr	r0, [pc, #164]	@ (8000cb4 <HCI_TL_SPI_Send+0x110>)
 8000c0e:	f002 fc11 	bl	8003434 <HAL_GPIO_WritePin>
      break;
 8000c12:	e030      	b.n	8000c76 <HCI_TL_SPI_Send+0xd2>
    }

    /* Read header */
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8000c14:	f107 010c 	add.w	r1, r7, #12
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	2205      	movs	r2, #5
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f000 ffdc 	bl	8001bdc <BSP_SPI1_SendRecv>

    rx_bytes = (((uint16_t)header_slave[2])<<8) | ((uint16_t)header_slave[1]);
 8000c24:	7bbb      	ldrb	r3, [r7, #14]
 8000c26:	021b      	lsls	r3, r3, #8
 8000c28:	b21a      	sxth	r2, r3
 8000c2a:	7b7b      	ldrb	r3, [r7, #13]
 8000c2c:	b21b      	sxth	r3, r3
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	b21b      	sxth	r3, r3
 8000c32:	837b      	strh	r3, [r7, #26]

    if(rx_bytes >= size)
 8000c34:	8b7a      	ldrh	r2, [r7, #26]
 8000c36:	887b      	ldrh	r3, [r7, #2]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	d306      	bcc.n	8000c4a <HCI_TL_SPI_Send+0xa6>
    {
      /* Buffer is big enough */
      BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 8000c3c:	887b      	ldrh	r3, [r7, #2]
 8000c3e:	461a      	mov	r2, r3
 8000c40:	491d      	ldr	r1, [pc, #116]	@ (8000cb8 <HCI_TL_SPI_Send+0x114>)
 8000c42:	6878      	ldr	r0, [r7, #4]
 8000c44:	f000 ffca 	bl	8001bdc <BSP_SPI1_SendRecv>
 8000c48:	e002      	b.n	8000c50 <HCI_TL_SPI_Send+0xac>
    }
    else
    {
      /* Buffer is too small */
      result = -2;
 8000c4a:	f06f 0301 	mvn.w	r3, #1
 8000c4e:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000c50:	2201      	movs	r2, #1
 8000c52:	2101      	movs	r1, #1
 8000c54:	4817      	ldr	r0, [pc, #92]	@ (8000cb4 <HCI_TL_SPI_Send+0x110>)
 8000c56:	f002 fbed 	bl	8003434 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 8000c5a:	f001 ff7d 	bl	8002b58 <HAL_GetTick>
 8000c5e:	4602      	mov	r2, r0
 8000c60:	6a3b      	ldr	r3, [r7, #32]
 8000c62:	1ad3      	subs	r3, r2, r3
 8000c64:	2b64      	cmp	r3, #100	@ 0x64
 8000c66:	d903      	bls.n	8000c70 <HCI_TL_SPI_Send+0xcc>
    {
      result = -3;
 8000c68:	f06f 0302 	mvn.w	r3, #2
 8000c6c:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8000c6e:	e002      	b.n	8000c76 <HCI_TL_SPI_Send+0xd2>
    }
  } while(result < 0);
 8000c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	dba9      	blt.n	8000bca <HCI_TL_SPI_Send+0x26>
  /**
   * To be aligned to the SPI protocol.
   * Can bring to a delay inside the frame, due to the BlueNRG-2 that needs
   * to check if the header is received or not.
   */
  tickstart = HAL_GetTick();
 8000c76:	f001 ff6f 	bl	8002b58 <HAL_GetTick>
 8000c7a:	6238      	str	r0, [r7, #32]
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 8000c7c:	e007      	b.n	8000c8e <HCI_TL_SPI_Send+0xea>
    if (HAL_GPIO_ReadPin(HCI_TL_SPI_IRQ_PORT, HCI_TL_SPI_IRQ_PIN)==GPIO_PIN_RESET) {
 8000c7e:	2108      	movs	r1, #8
 8000c80:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c84:	f002 fbbe 	bl	8003404 <HAL_GPIO_ReadPin>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d008      	beq.n	8000ca0 <HCI_TL_SPI_Send+0xfc>
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 8000c8e:	f001 ff63 	bl	8002b58 <HAL_GetTick>
 8000c92:	4602      	mov	r2, r0
 8000c94:	6a3b      	ldr	r3, [r7, #32]
 8000c96:	1ad3      	subs	r3, r2, r3
 8000c98:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000c9c:	d3ef      	bcc.n	8000c7e <HCI_TL_SPI_Send+0xda>
 8000c9e:	e000      	b.n	8000ca2 <HCI_TL_SPI_Send+0xfe>
      break;
 8000ca0:	bf00      	nop
    }
  }
  HCI_TL_SPI_Enable_IRQ();
 8000ca2:	f7ff fe79 	bl	8000998 <HCI_TL_SPI_Enable_IRQ>

  return result;
 8000ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3728      	adds	r7, #40	@ 0x28
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	0800b338 	.word	0x0800b338
 8000cb4:	48000800 	.word	0x48000800
 8000cb8:	20000090 	.word	0x20000090

08000cbc <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8000cc0:	2108      	movs	r1, #8
 8000cc2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cc6:	f002 fb9d 	bl	8003404 <HAL_GPIO_ReadPin>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	bf0c      	ite	eq
 8000cd0:	2301      	moveq	r3, #1
 8000cd2:	2300      	movne	r3, #0
 8000cd4:	b2db      	uxtb	r3, r3
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	bd80      	pop	{r7, pc}
	...

08000cdc <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b088      	sub	sp, #32
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 8000ce2:	4b12      	ldr	r3, [pc, #72]	@ (8000d2c <hci_tl_lowlevel_init+0x50>)
 8000ce4:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 8000ce6:	4b12      	ldr	r3, [pc, #72]	@ (8000d30 <hci_tl_lowlevel_init+0x54>)
 8000ce8:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 8000cea:	4b12      	ldr	r3, [pc, #72]	@ (8000d34 <hci_tl_lowlevel_init+0x58>)
 8000cec:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 8000cee:	4b12      	ldr	r3, [pc, #72]	@ (8000d38 <hci_tl_lowlevel_init+0x5c>)
 8000cf0:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 8000cf2:	4b12      	ldr	r3, [pc, #72]	@ (8000d3c <hci_tl_lowlevel_init+0x60>)
 8000cf4:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 8000cf6:	4b12      	ldr	r3, [pc, #72]	@ (8000d40 <hci_tl_lowlevel_init+0x64>)
 8000cf8:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 8000cfa:	1d3b      	adds	r3, r7, #4
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f008 ff85 	bl	8009c0c <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti3, EXTI_LINE_3);
 8000d02:	4910      	ldr	r1, [pc, #64]	@ (8000d44 <hci_tl_lowlevel_init+0x68>)
 8000d04:	4810      	ldr	r0, [pc, #64]	@ (8000d48 <hci_tl_lowlevel_init+0x6c>)
 8000d06:	f002 f8b4 	bl	8002e72 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti3, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8000d0a:	4a10      	ldr	r2, [pc, #64]	@ (8000d4c <hci_tl_lowlevel_init+0x70>)
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	480e      	ldr	r0, [pc, #56]	@ (8000d48 <hci_tl_lowlevel_init+0x6c>)
 8000d10:	f002 f895 	bl	8002e3e <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000d14:	2200      	movs	r2, #0
 8000d16:	2100      	movs	r1, #0
 8000d18:	2009      	movs	r0, #9
 8000d1a:	f002 f84c 	bl	8002db6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000d1e:	2009      	movs	r0, #9
 8000d20:	f002 f865 	bl	8002dee <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 8000d24:	bf00      	nop
 8000d26:	3720      	adds	r7, #32
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	080009b5 	.word	0x080009b5
 8000d30:	08000a51 	.word	0x08000a51
 8000d34:	08000ba5 	.word	0x08000ba5
 8000d38:	08000ac1 	.word	0x08000ac1
 8000d3c:	08000a81 	.word	0x08000a81
 8000d40:	08001c1d 	.word	0x08001c1d
 8000d44:	16000003 	.word	0x16000003
 8000d48:	20000088 	.word	0x20000088
 8000d4c:	08000d51 	.word	0x08000d51

08000d50 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 8000d54:	e005      	b.n	8000d62 <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 8000d56:	2000      	movs	r0, #0
 8000d58:	f009 f8bc 	bl	8009ed4 <hci_notify_asynch_evt>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d105      	bne.n	8000d6e <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 8000d62:	f7ff ffab 	bl	8000cbc <IsDataAvailable>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d1f4      	bne.n	8000d56 <hci_tl_lowlevel_isr+0x6>
 8000d6c:	e000      	b.n	8000d70 <hci_tl_lowlevel_isr+0x20>
    {
      return;
 8000d6e:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 8000d70:	bd80      	pop	{r7, pc}
	...

08000d74 <MX_BlueNRG_2_Init>:
 *  @param None
 * 	@retval None
 *
 *
 **/
void MX_BlueNRG_2_Init(void) {
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0

	uint8_t ret;

	User_Init();
 8000d7a:	f000 f837 	bl	8000dec <User_Init>

	// user_button_init_state = BSP_PB_GetState(BUTTON_KEY);

	// This passes the callback that we made in sensor, which lets give it to this function, and it will call
	// whenever some event occurs.
	hci_init(APP_UserEvtRx, NULL);
 8000d7e:	2100      	movs	r1, #0
 8000d80:	4810      	ldr	r0, [pc, #64]	@ (8000dc4 <MX_BlueNRG_2_Init+0x50>)
 8000d82:	f008 ff01 	bl	8009b88 <hci_init>

	PRINT_DBG("\033[2J"); // Serial console clear screen
 8000d86:	4810      	ldr	r0, [pc, #64]	@ (8000dc8 <MX_BlueNRG_2_Init+0x54>)
 8000d88:	f009 fb08 	bl	800a39c <iprintf>
	PRINT_DBG("\033[H"); // Serial console cursor to home
 8000d8c:	480f      	ldr	r0, [pc, #60]	@ (8000dcc <MX_BlueNRG_2_Init+0x58>)
 8000d8e:	f009 fb05 	bl	800a39c <iprintf>
	PRINT_DBG("Haptic Glove Grid Write Application\r\n");
 8000d92:	480f      	ldr	r0, [pc, #60]	@ (8000dd0 <MX_BlueNRG_2_Init+0x5c>)
 8000d94:	f009 fb72 	bl	800a47c <puts>

	// Initializing the sensor device
	ret = Sensor_DeviceInit();
 8000d98:	f000 f830 	bl	8000dfc <Sensor_DeviceInit>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	71fb      	strb	r3, [r7, #7]
	if (ret != BLE_STATUS_SUCCESS)
 8000da0:	79fb      	ldrb	r3, [r7, #7]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d006      	beq.n	8000db4 <MX_BlueNRG_2_Init+0x40>
	{
		// Turn on the LED
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 8000da6:	2201      	movs	r2, #1
 8000da8:	2180      	movs	r1, #128	@ 0x80
 8000daa:	480a      	ldr	r0, [pc, #40]	@ (8000dd4 <MX_BlueNRG_2_Init+0x60>)
 8000dac:	f002 fb42 	bl	8003434 <HAL_GPIO_WritePin>
		while (1); // endless loop to stop program.
 8000db0:	bf00      	nop
 8000db2:	e7fd      	b.n	8000db0 <MX_BlueNRG_2_Init+0x3c>

	}

	PRINT_DBG("BLE Stack Initialized and Device Configured\r\n");
 8000db4:	4808      	ldr	r0, [pc, #32]	@ (8000dd8 <MX_BlueNRG_2_Init+0x64>)
 8000db6:	f009 fb61 	bl	800a47c <puts>

}
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	08001a8d 	.word	0x08001a8d
 8000dc8:	0800b340 	.word	0x0800b340
 8000dcc:	0800b348 	.word	0x0800b348
 8000dd0:	0800b34c 	.word	0x0800b34c
 8000dd4:	48000400 	.word	0x48000400
 8000dd8:	0800b374 	.word	0x0800b374

08000ddc <MX_BlueNRG_2_Process>:

// BlueNRG-2 background task
void MX_BlueNRG_2_Process(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0

	hci_user_evt_proc();
 8000de0:	f009 f84c 	bl	8009e7c <hci_user_evt_proc>
	User_Process();
 8000de4:	f000 f90e 	bl	8001004 <User_Process>

}
 8000de8:	bf00      	nop
 8000dea:	bd80      	pop	{r7, pc}

08000dec <User_Init>:
 *
 * @param None
 * @retval None
 */
static void User_Init(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0

	// BSP_PB_Init()
	// BSP_LED_Init(LED2)
	// BSP_COM_Init(COM1)

}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
	...

08000dfc <Sensor_DeviceInit>:
 * @param None
 * @retval None
 *
 */
uint8_t Sensor_DeviceInit(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b08c      	sub	sp, #48	@ 0x30
 8000e00:	af06      	add	r7, sp, #24
	uint8_t ret;
	uint16_t service_handle, dev_name_char_handle, appearance_char_handle;
	uint8_t device_name[] = {SENSOR_DEMO_NAME};
 8000e02:	4a6b      	ldr	r2, [pc, #428]	@ (8000fb0 <Sensor_DeviceInit+0x1b4>)
 8000e04:	f107 0308 	add.w	r3, r7, #8
 8000e08:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e0c:	6018      	str	r0, [r3, #0]
 8000e0e:	3304      	adds	r3, #4
 8000e10:	8019      	strh	r1, [r3, #0]
 8000e12:	3302      	adds	r3, #2
 8000e14:	0c0a      	lsrs	r2, r1, #16
 8000e16:	701a      	strb	r2, [r3, #0]
	uint8_t hwVersion;
	uint16_t fwVersion;
	uint8_t bdaddr_len_out;
	uint8_t config_data_stored_static_random_address = 0x80; // This is an offset of a static random address stored in NVM?
 8000e18:	2380      	movs	r3, #128	@ 0x80
 8000e1a:	75fb      	strb	r3, [r7, #23]

	// Software reset of the device
	hci_reset();
 8000e1c:	f007 fcd0 	bl	80087c0 <hci_reset>

	// The BlueNRG-2 required a minimum delay of 2000ms for device boot
	HAL_Delay(2000);
 8000e20:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000e24:	f001 fea4 	bl	8002b70 <HAL_Delay>

	// getting the bluenrg hw and firmware versions
	getBlueNRGVersion(&hwVersion, &fwVersion);
 8000e28:	1d3a      	adds	r2, r7, #4
 8000e2a:	1dfb      	adds	r3, r7, #7
 8000e2c:	4611      	mov	r1, r2
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f000 f976 	bl	8001120 <getBlueNRGVersion>

	PRINT_DBG("HWver %d\nFwver %d\r\n", hwVersion, fwVersion);
 8000e34:	79fb      	ldrb	r3, [r7, #7]
 8000e36:	4619      	mov	r1, r3
 8000e38:	88bb      	ldrh	r3, [r7, #4]
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	485d      	ldr	r0, [pc, #372]	@ (8000fb4 <Sensor_DeviceInit+0x1b8>)
 8000e3e:	f009 faad 	bl	800a39c <iprintf>

	ret = aci_hal_read_config_data(config_data_stored_static_random_address,
 8000e42:	1cf9      	adds	r1, r7, #3
 8000e44:	7dfb      	ldrb	r3, [r7, #23]
 8000e46:	4a5c      	ldr	r2, [pc, #368]	@ (8000fb8 <Sensor_DeviceInit+0x1bc>)
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f008 fd0f 	bl	800986c <aci_hal_read_config_data>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	75bb      	strb	r3, [r7, #22]
									&bdaddr_len_out, bdaddr);
	if (ret) {
 8000e52:	7dbb      	ldrb	r3, [r7, #22]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d002      	beq.n	8000e5e <Sensor_DeviceInit+0x62>
		PRINT_DBG("Read Static Random address failed\r\n");
 8000e58:	4858      	ldr	r0, [pc, #352]	@ (8000fbc <Sensor_DeviceInit+0x1c0>)
 8000e5a:	f009 fb0f 	bl	800a47c <puts>
		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
	}

	if ((bdaddr[5] & 0xC0) != 0xC0) {
 8000e5e:	4b56      	ldr	r3, [pc, #344]	@ (8000fb8 <Sensor_DeviceInit+0x1bc>)
 8000e60:	795b      	ldrb	r3, [r3, #5]
 8000e62:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8000e66:	2bc0      	cmp	r3, #192	@ 0xc0
 8000e68:	d004      	beq.n	8000e74 <Sensor_DeviceInit+0x78>
		PRINT_DBG("Static Random address not well formed\r\n");
 8000e6a:	4855      	ldr	r0, [pc, #340]	@ (8000fc0 <Sensor_DeviceInit+0x1c4>)
 8000e6c:	f009 fb06 	bl	800a47c <puts>
		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
		while(1);
 8000e70:	bf00      	nop
 8000e72:	e7fd      	b.n	8000e70 <Sensor_DeviceInit+0x74>
	}

	ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8000e74:	78fb      	ldrb	r3, [r7, #3]
 8000e76:	4a50      	ldr	r2, [pc, #320]	@ (8000fb8 <Sensor_DeviceInit+0x1bc>)
 8000e78:	4619      	mov	r1, r3
 8000e7a:	2000      	movs	r0, #0
 8000e7c:	f008 fc68 	bl	8009750 <aci_hal_write_config_data>
 8000e80:	4603      	mov	r3, r0
 8000e82:	75bb      	strb	r3, [r7, #22]
									bdaddr_len_out,
									bdaddr);

	if (ret != BLE_STATUS_SUCCESS) {
 8000e84:	7dbb      	ldrb	r3, [r7, #22]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d003      	beq.n	8000e92 <Sensor_DeviceInit+0x96>
		PRINT_DBG("aci_hal_write_config_data() Failed\r\n");
 8000e8a:	484e      	ldr	r0, [pc, #312]	@ (8000fc4 <Sensor_DeviceInit+0x1c8>)
 8000e8c:	f009 faf6 	bl	800a47c <puts>
 8000e90:	e002      	b.n	8000e98 <Sensor_DeviceInit+0x9c>
		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
	} else {
		PRINT_DBG("aci_hal_write_config_data() Success!\r\n");
 8000e92:	484d      	ldr	r0, [pc, #308]	@ (8000fc8 <Sensor_DeviceInit+0x1cc>)
 8000e94:	f009 faf2 	bl	800a47c <puts>
	}


	// Set the TX power to -2 dBm
	aci_hal_set_tx_power_level(1, 4);
 8000e98:	2104      	movs	r1, #4
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	f008 fd6a 	bl	8009974 <aci_hal_set_tx_power_level>
	if (ret != BLE_STATUS_SUCCESS) {
 8000ea0:	7dbb      	ldrb	r3, [r7, #22]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d102      	bne.n	8000eac <Sensor_DeviceInit+0xb0>
		//PRINT_DBG("aci_hal_set_tx_power_level() failed");
		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
	} else {
		PRINT_DBG("aci_hal_set_tx_power_level() Success!\r\n");
 8000ea6:	4849      	ldr	r0, [pc, #292]	@ (8000fcc <Sensor_DeviceInit+0x1d0>)
 8000ea8:	f009 fae8 	bl	800a47c <puts>
	}

	// GATT initialization
	ret = aci_gatt_init();
 8000eac:	f008 f938 	bl	8009120 <aci_gatt_init>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	75bb      	strb	r3, [r7, #22]
	if (ret != BLE_STATUS_SUCCESS) {
 8000eb4:	7dbb      	ldrb	r3, [r7, #22]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d004      	beq.n	8000ec4 <Sensor_DeviceInit+0xc8>
		PRINT_DBG("aci_gatt_init() failed\r\n");
 8000eba:	4845      	ldr	r0, [pc, #276]	@ (8000fd0 <Sensor_DeviceInit+0x1d4>)
 8000ebc:	f009 fade 	bl	800a47c <puts>
		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
		return ret;
 8000ec0:	7dbb      	ldrb	r3, [r7, #22]
 8000ec2:	e070      	b.n	8000fa6 <Sensor_DeviceInit+0x1aa>
	} else {
		PRINT_DBG("aci_gatt_init() Success!\r\n");
 8000ec4:	4843      	ldr	r0, [pc, #268]	@ (8000fd4 <Sensor_DeviceInit+0x1d8>)
 8000ec6:	f009 fad9 	bl	800a47c <puts>
	}

	// GAP Initialization
	ret = aci_gap_init(GAP_PERIPHERAL_ROLE, 0x00, 0x07, &service_handle,
 8000eca:	f107 0214 	add.w	r2, r7, #20
 8000ece:	f107 0310 	add.w	r3, r7, #16
 8000ed2:	9301      	str	r3, [sp, #4]
 8000ed4:	f107 0312 	add.w	r3, r7, #18
 8000ed8:	9300      	str	r3, [sp, #0]
 8000eda:	4613      	mov	r3, r2
 8000edc:	2207      	movs	r2, #7
 8000ede:	2100      	movs	r1, #0
 8000ee0:	2001      	movs	r0, #1
 8000ee2:	f007 ff95 	bl	8008e10 <aci_gap_init>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	75bb      	strb	r3, [r7, #22]
														&dev_name_char_handle,
														&appearance_char_handle);

	if (ret != BLE_STATUS_SUCCESS) {
 8000eea:	7dbb      	ldrb	r3, [r7, #22]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d004      	beq.n	8000efa <Sensor_DeviceInit+0xfe>
		PRINT_DBG("aci_gap_init() Failed\r\n");
 8000ef0:	4839      	ldr	r0, [pc, #228]	@ (8000fd8 <Sensor_DeviceInit+0x1dc>)
 8000ef2:	f009 fac3 	bl	800a47c <puts>
		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
		return ret;
 8000ef6:	7dbb      	ldrb	r3, [r7, #22]
 8000ef8:	e055      	b.n	8000fa6 <Sensor_DeviceInit+0x1aa>
	} else {
		PRINT_DBG("aci_gap_init() Success!\r\n");
 8000efa:	4838      	ldr	r0, [pc, #224]	@ (8000fdc <Sensor_DeviceInit+0x1e0>)
 8000efc:	f009 fabe 	bl	800a47c <puts>
	}

	// Update the device name
	ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 8000f00:	8ab8      	ldrh	r0, [r7, #20]
 8000f02:	8a79      	ldrh	r1, [r7, #18]
 8000f04:	f107 0308 	add.w	r3, r7, #8
 8000f08:	9300      	str	r3, [sp, #0]
 8000f0a:	2307      	movs	r3, #7
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	f008 fb0f 	bl	8009530 <aci_gatt_update_char_value>
 8000f12:	4603      	mov	r3, r0
 8000f14:	75bb      	strb	r3, [r7, #22]
											sizeof(device_name), device_name);

	if (ret != BLE_STATUS_SUCCESS) {
 8000f16:	7dbb      	ldrb	r3, [r7, #22]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d004      	beq.n	8000f26 <Sensor_DeviceInit+0x12a>
		PRINT_DBG("aci_gatt_update_char_value() Failed\r\n");
 8000f1c:	4830      	ldr	r0, [pc, #192]	@ (8000fe0 <Sensor_DeviceInit+0x1e4>)
 8000f1e:	f009 faad 	bl	800a47c <puts>
		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
		return ret;
 8000f22:	7dbb      	ldrb	r3, [r7, #22]
 8000f24:	e03f      	b.n	8000fa6 <Sensor_DeviceInit+0x1aa>
	} else if (ret != BLE_STATUS_SUCCESS) {
 8000f26:	7dbb      	ldrb	r3, [r7, #22]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d002      	beq.n	8000f32 <Sensor_DeviceInit+0x136>
		PRINT_DBG("aci_gap_update_char_value() Success!\r\n");
 8000f2c:	482d      	ldr	r0, [pc, #180]	@ (8000fe4 <Sensor_DeviceInit+0x1e8>)
 8000f2e:	f009 faa5 	bl	800a47c <puts>
//	  } else {
//	    PRINT_DBG("Error Setting I/O Capability\r\n");
//	  }

	  /* BLE Security v4.2 is supported: BLE stack FW version >= 2.x (new API prototype) */
	  ret = aci_gap_set_authentication_requirement(NO_BONDING,
 8000f32:	2300      	movs	r3, #0
 8000f34:	9304      	str	r3, [sp, #16]
 8000f36:	4b2c      	ldr	r3, [pc, #176]	@ (8000fe8 <Sensor_DeviceInit+0x1ec>)
 8000f38:	9303      	str	r3, [sp, #12]
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	9302      	str	r3, [sp, #8]
 8000f3e:	2310      	movs	r3, #16
 8000f40:	9301      	str	r3, [sp, #4]
 8000f42:	2307      	movs	r3, #7
 8000f44:	9300      	str	r3, [sp, #0]
 8000f46:	2300      	movs	r3, #0
 8000f48:	2200      	movs	r2, #0
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	2000      	movs	r0, #0
 8000f4e:	f007 fe22 	bl	8008b96 <aci_gap_set_authentication_requirement>
 8000f52:	4603      	mov	r3, r0
 8000f54:	75bb      	strb	r3, [r7, #22]
	                                               16,
	                                               USE_FIXED_PIN_FOR_PAIRING,
	                                               PERIPHERAL_PASS_KEY,
	                                               0x00); /* - 0x00: Public Identity Address
	                                                         - 0x01: Random (static) Identity Address */
	  if (ret != BLE_STATUS_SUCCESS) {
 8000f56:	7dbb      	ldrb	r3, [r7, #22]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d006      	beq.n	8000f6a <Sensor_DeviceInit+0x16e>
	    PRINT_DBG("aci_gap_set_authentication_requirement()failed: 0x%02x\r\n", ret);
 8000f5c:	7dbb      	ldrb	r3, [r7, #22]
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4822      	ldr	r0, [pc, #136]	@ (8000fec <Sensor_DeviceInit+0x1f0>)
 8000f62:	f009 fa1b 	bl	800a39c <iprintf>
	    //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
	    return ret;
 8000f66:	7dbb      	ldrb	r3, [r7, #22]
 8000f68:	e01d      	b.n	8000fa6 <Sensor_DeviceInit+0x1aa>
	  }
	  else {
	    PRINT_DBG("aci_gap_set_authentication_requirement() --> SUCCESS\r\n");
 8000f6a:	4821      	ldr	r0, [pc, #132]	@ (8000ff0 <Sensor_DeviceInit+0x1f4>)
 8000f6c:	f009 fa86 	bl	800a47c <puts>
	  }

	  PRINT_DBG("BLE Stack Initialized with SUCCESS\r\n");
 8000f70:	4820      	ldr	r0, [pc, #128]	@ (8000ff4 <Sensor_DeviceInit+0x1f8>)
 8000f72:	f009 fa83 	bl	800a47c <puts>

	  ret = Add_HWServW2ST_Service();
 8000f76:	f000 fa35 	bl	80013e4 <Add_HWServW2ST_Service>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	75bb      	strb	r3, [r7, #22]
	  if (ret == BLE_STATUS_SUCCESS) {
 8000f7e:	7dbb      	ldrb	r3, [r7, #22]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d104      	bne.n	8000f8e <Sensor_DeviceInit+0x192>

	    PRINT_DBG("BlueNRG2 HW service added successfully.\r\n");
 8000f84:	481c      	ldr	r0, [pc, #112]	@ (8000ff8 <Sensor_DeviceInit+0x1fc>)
 8000f86:	f009 fa79 	bl	800a47c <puts>
//	  else {
//	     PRINT_DBG("Error while adding BlueNRG2 HW service: 0x%02x\r\n", ret);
//	     while(1);
//	  }

	  return BLE_STATUS_SUCCESS;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	e00b      	b.n	8000fa6 <Sensor_DeviceInit+0x1aa>
	    PRINT_DBG("Error while adding BlueNRG2 HW service: 0x%02x\r\n", ret);
 8000f8e:	7dbb      	ldrb	r3, [r7, #22]
 8000f90:	4619      	mov	r1, r3
 8000f92:	481a      	ldr	r0, [pc, #104]	@ (8000ffc <Sensor_DeviceInit+0x200>)
 8000f94:	f009 fa02 	bl	800a39c <iprintf>
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000f98:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f9c:	4818      	ldr	r0, [pc, #96]	@ (8001000 <Sensor_DeviceInit+0x204>)
 8000f9e:	f002 fa61 	bl	8003464 <HAL_GPIO_TogglePin>
	    while(1);
 8000fa2:	bf00      	nop
 8000fa4:	e7fd      	b.n	8000fa2 <Sensor_DeviceInit+0x1a6>
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3718      	adds	r7, #24
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	0800b628 	.word	0x0800b628
 8000fb4:	0800b3a4 	.word	0x0800b3a4
 8000fb8:	20000190 	.word	0x20000190
 8000fbc:	0800b3b8 	.word	0x0800b3b8
 8000fc0:	0800b3dc 	.word	0x0800b3dc
 8000fc4:	0800b404 	.word	0x0800b404
 8000fc8:	0800b428 	.word	0x0800b428
 8000fcc:	0800b450 	.word	0x0800b450
 8000fd0:	0800b478 	.word	0x0800b478
 8000fd4:	0800b490 	.word	0x0800b490
 8000fd8:	0800b4ac 	.word	0x0800b4ac
 8000fdc:	0800b4c4 	.word	0x0800b4c4
 8000fe0:	0800b4e0 	.word	0x0800b4e0
 8000fe4:	0800b508 	.word	0x0800b508
 8000fe8:	0001e240 	.word	0x0001e240
 8000fec:	0800b530 	.word	0x0800b530
 8000ff0:	0800b56c 	.word	0x0800b56c
 8000ff4:	0800b5a4 	.word	0x0800b5a4
 8000ff8:	0800b5c8 	.word	0x0800b5c8
 8000ffc:	0800b5f4 	.word	0x0800b5f4
 8001000:	48000400 	.word	0x48000400

08001004 <User_Process>:
 *
 * @param None
 * @retval None
 */
static void User_Process(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b088      	sub	sp, #32
 8001008:	af00      	add	r7, sp, #0

	    float grid[2][2];

	    uint8_t ret = 0;
 800100a:	2300      	movs	r3, #0
 800100c:	75fb      	strb	r3, [r7, #23]

	    if (set_connectable) {
 800100e:	4b38      	ldr	r3, [pc, #224]	@ (80010f0 <User_Process+0xec>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	b2db      	uxtb	r3, r3
 8001014:	2b00      	cmp	r3, #0
 8001016:	d007      	beq.n	8001028 <User_Process+0x24>
	    	PRINT_DBG("Setting device connectable!");
 8001018:	4836      	ldr	r0, [pc, #216]	@ (80010f4 <User_Process+0xf0>)
 800101a:	f009 f9bf 	bl	800a39c <iprintf>
	        Set_DeviceConnectable();
 800101e:	f000 fca9 	bl	8001974 <Set_DeviceConnectable>
	        set_connectable = FALSE;
 8001022:	4b33      	ldr	r3, [pc, #204]	@ (80010f0 <User_Process+0xec>)
 8001024:	2200      	movs	r2, #0
 8001026:	701a      	strb	r2, [r3, #0]
	    }

	    if ((connected) && (!pairing))
 8001028:	4b33      	ldr	r3, [pc, #204]	@ (80010f8 <User_Process+0xf4>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	b2db      	uxtb	r3, r3
 800102e:	2b00      	cmp	r3, #0
 8001030:	d023      	beq.n	800107a <User_Process+0x76>
 8001032:	4b32      	ldr	r3, [pc, #200]	@ (80010fc <User_Process+0xf8>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	b2db      	uxtb	r3, r3
 8001038:	2b00      	cmp	r3, #0
 800103a:	d11e      	bne.n	800107a <User_Process+0x76>
	    {
	    	PRINT_DBG("STARTING PAIRING");
 800103c:	4830      	ldr	r0, [pc, #192]	@ (8001100 <User_Process+0xfc>)
 800103e:	f009 f9ad 	bl	800a39c <iprintf>
	        ret = aci_gap_slave_security_req(connection_handle);
 8001042:	4b30      	ldr	r3, [pc, #192]	@ (8001104 <User_Process+0x100>)
 8001044:	881b      	ldrh	r3, [r3, #0]
 8001046:	b29b      	uxth	r3, r3
 8001048:	4618      	mov	r0, r3
 800104a:	f007 ff8e 	bl	8008f6a <aci_gap_slave_security_req>
 800104e:	4603      	mov	r3, r0
 8001050:	75fb      	strb	r3, [r7, #23]
	        if (ret != BLE_STATUS_SUCCESS) {
 8001052:	7dfb      	ldrb	r3, [r7, #23]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d00a      	beq.n	800106e <User_Process+0x6a>
	            PRINT_DBG("aci_gap_slave_security_req() failed:0x%02x\r\n", ret);
 8001058:	7dfb      	ldrb	r3, [r7, #23]
 800105a:	4619      	mov	r1, r3
 800105c:	482a      	ldr	r0, [pc, #168]	@ (8001108 <User_Process+0x104>)
 800105e:	f009 f99d 	bl	800a39c <iprintf>
	            HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8001062:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001066:	4829      	ldr	r0, [pc, #164]	@ (800110c <User_Process+0x108>)
 8001068:	f002 f9fc 	bl	8003464 <HAL_GPIO_TogglePin>
 800106c:	e002      	b.n	8001074 <User_Process+0x70>
	        }
	        else {
	            PRINT_DBG("aci_gap_slave_security_req --> SUCCESS\r\n");
 800106e:	4828      	ldr	r0, [pc, #160]	@ (8001110 <User_Process+0x10c>)
 8001070:	f009 fa04 	bl	800a47c <puts>
	        }
	        pairing = TRUE;
 8001074:	4b21      	ldr	r3, [pc, #132]	@ (80010fc <User_Process+0xf8>)
 8001076:	2201      	movs	r2, #1
 8001078:	701a      	strb	r2, [r3, #0]
	    }

	    if (paired) {
 800107a:	4b26      	ldr	r3, [pc, #152]	@ (8001114 <User_Process+0x110>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	b2db      	uxtb	r3, r3
 8001080:	2b00      	cmp	r3, #0
 8001082:	d031      	beq.n	80010e8 <User_Process+0xe4>
	        // Generate random values for the grid
	        for (int i = 0; i < 2; i++) {
 8001084:	2300      	movs	r3, #0
 8001086:	61fb      	str	r3, [r7, #28]
 8001088:	e023      	b.n	80010d2 <User_Process+0xce>
	            for (int j = 0; j < 2; j++) {
 800108a:	2300      	movs	r3, #0
 800108c:	61bb      	str	r3, [r7, #24]
 800108e:	e01a      	b.n	80010c6 <User_Process+0xc2>
	                grid[i][j] = ((float)rand() / RAND_MAX) * 100.0f; // Random float between 0 and 100
 8001090:	f009 f884 	bl	800a19c <rand>
 8001094:	ee07 0a90 	vmov	s15, r0
 8001098:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800109c:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8001118 <User_Process+0x114>
 80010a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010a4:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800111c <User_Process+0x118>
 80010a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	005a      	lsls	r2, r3, #1
 80010b0:	69bb      	ldr	r3, [r7, #24]
 80010b2:	4413      	add	r3, r2
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	3320      	adds	r3, #32
 80010b8:	443b      	add	r3, r7
 80010ba:	3b1c      	subs	r3, #28
 80010bc:	edc3 7a00 	vstr	s15, [r3]
	            for (int j = 0; j < 2; j++) {
 80010c0:	69bb      	ldr	r3, [r7, #24]
 80010c2:	3301      	adds	r3, #1
 80010c4:	61bb      	str	r3, [r7, #24]
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	dde1      	ble.n	8001090 <User_Process+0x8c>
	        for (int i = 0; i < 2; i++) {
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	3301      	adds	r3, #1
 80010d0:	61fb      	str	r3, [r7, #28]
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	ddd8      	ble.n	800108a <User_Process+0x86>

	        // Update the grid characteristic
	        //Grid_Update(grid);

	        // Toggle LED to indicate data sent
	        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80010d8:	2180      	movs	r1, #128	@ 0x80
 80010da:	480c      	ldr	r0, [pc, #48]	@ (800110c <User_Process+0x108>)
 80010dc:	f002 f9c2 	bl	8003464 <HAL_GPIO_TogglePin>

	        // Wait before sending next update
	        HAL_Delay(1000);
 80010e0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010e4:	f001 fd44 	bl	8002b70 <HAL_Delay>
	    }
}
 80010e8:	bf00      	nop
 80010ea:	3720      	adds	r7, #32
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	20000000 	.word	0x20000000
 80010f4:	0800b630 	.word	0x0800b630
 80010f8:	200001c2 	.word	0x200001c2
 80010fc:	200001c3 	.word	0x200001c3
 8001100:	0800b64c 	.word	0x0800b64c
 8001104:	200001c0 	.word	0x200001c0
 8001108:	0800b660 	.word	0x0800b660
 800110c:	48000400 	.word	0x48000400
 8001110:	0800b690 	.word	0x0800b690
 8001114:	200001c4 	.word	0x200001c4
 8001118:	4f000000 	.word	0x4f000000
 800111c:	42c80000 	.word	0x42c80000

08001120 <getBlueNRGVersion>:
 * @param  Hardware version
 * @param  Firmware version
 * @retval Status
 */
uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 8001120:	b590      	push	{r4, r7, lr}
 8001122:	b089      	sub	sp, #36	@ 0x24
 8001124:	af02      	add	r7, sp, #8
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_read_local_version_information(&hci_version, &hci_revision, &lmp_pal_version,
 800112a:	f107 0410 	add.w	r4, r7, #16
 800112e:	f107 0215 	add.w	r2, r7, #21
 8001132:	f107 0112 	add.w	r1, r7, #18
 8001136:	f107 0016 	add.w	r0, r7, #22
 800113a:	f107 030e 	add.w	r3, r7, #14
 800113e:	9300      	str	r3, [sp, #0]
 8001140:	4623      	mov	r3, r4
 8001142:	f007 fb66 	bl	8008812 <hci_read_local_version_information>
 8001146:	4603      	mov	r3, r0
 8001148:	75fb      	strb	r3, [r7, #23]
                                              &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 800114a:	7dfb      	ldrb	r3, [r7, #23]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d126      	bne.n	800119e <getBlueNRGVersion+0x7e>
    *hwVersion = hci_revision >> 8;
 8001150:	8a7b      	ldrh	r3, [r7, #18]
 8001152:	0a1b      	lsrs	r3, r3, #8
 8001154:	b29b      	uxth	r3, r3
 8001156:	b2da      	uxtb	r2, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	701a      	strb	r2, [r3, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 800115c:	8a7b      	ldrh	r3, [r7, #18]
 800115e:	021b      	lsls	r3, r3, #8
 8001160:	b29a      	uxth	r2, r3
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	801a      	strh	r2, [r3, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	881b      	ldrh	r3, [r3, #0]
 800116a:	b21a      	sxth	r2, r3
 800116c:	89fb      	ldrh	r3, [r7, #14]
 800116e:	091b      	lsrs	r3, r3, #4
 8001170:	b29b      	uxth	r3, r3
 8001172:	011b      	lsls	r3, r3, #4
 8001174:	b21b      	sxth	r3, r3
 8001176:	b2db      	uxtb	r3, r3
 8001178:	b21b      	sxth	r3, r3
 800117a:	4313      	orrs	r3, r2
 800117c:	b21b      	sxth	r3, r3
 800117e:	b29a      	uxth	r2, r3
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	801a      	strh	r2, [r3, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	881b      	ldrh	r3, [r3, #0]
 8001188:	b21a      	sxth	r2, r3
 800118a:	89fb      	ldrh	r3, [r7, #14]
 800118c:	b21b      	sxth	r3, r3
 800118e:	f003 030f 	and.w	r3, r3, #15
 8001192:	b21b      	sxth	r3, r3
 8001194:	4313      	orrs	r3, r2
 8001196:	b21b      	sxth	r3, r3
 8001198:	b29a      	uxth	r2, r3
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	801a      	strh	r2, [r3, #0]
  }
  return status;
 800119e:	7dfb      	ldrb	r3, [r7, #23]
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	371c      	adds	r7, #28
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd90      	pop	{r4, r7, pc}

080011a8 <hci_le_connection_complete_event>:
        uint8_t Peer_Address[6],
        uint16_t Conn_Interval,
        uint16_t Conn_Latency,
        uint16_t Supervision_Timeout,
        uint8_t Master_Clock_Accuracy)
{
 80011a8:	b5b0      	push	{r4, r5, r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af04      	add	r7, sp, #16
 80011ae:	4604      	mov	r4, r0
 80011b0:	4608      	mov	r0, r1
 80011b2:	4611      	mov	r1, r2
 80011b4:	461a      	mov	r2, r3
 80011b6:	4623      	mov	r3, r4
 80011b8:	71fb      	strb	r3, [r7, #7]
 80011ba:	4603      	mov	r3, r0
 80011bc:	80bb      	strh	r3, [r7, #4]
 80011be:	460b      	mov	r3, r1
 80011c0:	71bb      	strb	r3, [r7, #6]
 80011c2:	4613      	mov	r3, r2
 80011c4:	70fb      	strb	r3, [r7, #3]
    if (Status == 0x00) { // Success
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d132      	bne.n	8001232 <hci_le_connection_complete_event+0x8a>
        connection_handle = Connection_Handle;
 80011cc:	4a1d      	ldr	r2, [pc, #116]	@ (8001244 <hci_le_connection_complete_event+0x9c>)
 80011ce:	88bb      	ldrh	r3, [r7, #4]
 80011d0:	8013      	strh	r3, [r2, #0]
        connected = TRUE;
 80011d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001248 <hci_le_connection_complete_event+0xa0>)
 80011d4:	2201      	movs	r2, #1
 80011d6:	701a      	strb	r2, [r3, #0]
        set_connectable = FALSE;
 80011d8:	4b1c      	ldr	r3, [pc, #112]	@ (800124c <hci_le_connection_complete_event+0xa4>)
 80011da:	2200      	movs	r2, #0
 80011dc:	701a      	strb	r2, [r3, #0]

        PRINT_DBG("Connected to device: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	3305      	adds	r3, #5
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	4618      	mov	r0, r3
 80011e6:	69bb      	ldr	r3, [r7, #24]
 80011e8:	3304      	adds	r3, #4
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	461c      	mov	r4, r3
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	3303      	adds	r3, #3
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	461d      	mov	r5, r3
 80011f6:	69bb      	ldr	r3, [r7, #24]
 80011f8:	3302      	adds	r3, #2
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	461a      	mov	r2, r3
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	3301      	adds	r3, #1
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	4619      	mov	r1, r3
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	9302      	str	r3, [sp, #8]
 800120c:	9101      	str	r1, [sp, #4]
 800120e:	9200      	str	r2, [sp, #0]
 8001210:	462b      	mov	r3, r5
 8001212:	4622      	mov	r2, r4
 8001214:	4601      	mov	r1, r0
 8001216:	480e      	ldr	r0, [pc, #56]	@ (8001250 <hci_le_connection_complete_event+0xa8>)
 8001218:	f009 f8c0 	bl	800a39c <iprintf>
                  Peer_Address[5], Peer_Address[4], Peer_Address[3],
                  Peer_Address[2], Peer_Address[1], Peer_Address[0]);
        PRINT_DBG("Connection Interval: %d\r\n", Conn_Interval);
 800121c:	8bbb      	ldrh	r3, [r7, #28]
 800121e:	4619      	mov	r1, r3
 8001220:	480c      	ldr	r0, [pc, #48]	@ (8001254 <hci_le_connection_complete_event+0xac>)
 8001222:	f009 f8bb 	bl	800a39c <iprintf>
        PRINT_DBG("Supervision Timeout: %d\r\n", Supervision_Timeout);
 8001226:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001228:	4619      	mov	r1, r3
 800122a:	480b      	ldr	r0, [pc, #44]	@ (8001258 <hci_le_connection_complete_event+0xb0>)
 800122c:	f009 f8b6 	bl	800a39c <iprintf>
    } else {
        PRINT_DBG("Connection failed with status: 0x%02X\r\n", Status);
    }
}
 8001230:	e004      	b.n	800123c <hci_le_connection_complete_event+0x94>
        PRINT_DBG("Connection failed with status: 0x%02X\r\n", Status);
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	4619      	mov	r1, r3
 8001236:	4809      	ldr	r0, [pc, #36]	@ (800125c <hci_le_connection_complete_event+0xb4>)
 8001238:	f009 f8b0 	bl	800a39c <iprintf>
}
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bdb0      	pop	{r4, r5, r7, pc}
 8001244:	200001c0 	.word	0x200001c0
 8001248:	200001c2 	.word	0x200001c2
 800124c:	20000000 	.word	0x20000000
 8001250:	0800b6b8 	.word	0x0800b6b8
 8001254:	0800b6f0 	.word	0x0800b6f0
 8001258:	0800b70c 	.word	0x0800b70c
 800125c:	0800b728 	.word	0x0800b728

08001260 <hci_disconnection_complete_event>:
 * @retval See file bluenrg1_events.h
 */
void hci_disconnection_complete_event(uint8_t Status,
                                      uint16_t Connection_Handle,
                                      uint8_t Reason)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	71fb      	strb	r3, [r7, #7]
 800126a:	460b      	mov	r3, r1
 800126c:	80bb      	strh	r3, [r7, #4]
 800126e:	4613      	mov	r3, r2
 8001270:	71bb      	strb	r3, [r7, #6]
  connected = FALSE;
 8001272:	4b0e      	ldr	r3, [pc, #56]	@ (80012ac <hci_disconnection_complete_event+0x4c>)
 8001274:	2200      	movs	r2, #0
 8001276:	701a      	strb	r2, [r3, #0]
  pairing = FALSE;
 8001278:	4b0d      	ldr	r3, [pc, #52]	@ (80012b0 <hci_disconnection_complete_event+0x50>)
 800127a:	2200      	movs	r2, #0
 800127c:	701a      	strb	r2, [r3, #0]
  paired = FALSE;
 800127e:	4b0d      	ldr	r3, [pc, #52]	@ (80012b4 <hci_disconnection_complete_event+0x54>)
 8001280:	2200      	movs	r2, #0
 8001282:	701a      	strb	r2, [r3, #0]

  /* Make the device connectable again */
  set_connectable = TRUE;
 8001284:	4b0c      	ldr	r3, [pc, #48]	@ (80012b8 <hci_disconnection_complete_event+0x58>)
 8001286:	2201      	movs	r2, #1
 8001288:	701a      	strb	r2, [r3, #0]
  connection_handle = 0;
 800128a:	4b0c      	ldr	r3, [pc, #48]	@ (80012bc <hci_disconnection_complete_event+0x5c>)
 800128c:	2200      	movs	r2, #0
 800128e:	801a      	strh	r2, [r3, #0]
  PRINT_DBG("Disconnected (0x%02x)\r\n", Reason);
 8001290:	79bb      	ldrb	r3, [r7, #6]
 8001292:	4619      	mov	r1, r3
 8001294:	480a      	ldr	r0, [pc, #40]	@ (80012c0 <hci_disconnection_complete_event+0x60>)
 8001296:	f009 f881 	bl	800a39c <iprintf>

  // Turn on LED upon disconnect
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 800129a:	2201      	movs	r2, #1
 800129c:	2180      	movs	r1, #128	@ 0x80
 800129e:	4809      	ldr	r0, [pc, #36]	@ (80012c4 <hci_disconnection_complete_event+0x64>)
 80012a0:	f002 f8c8 	bl	8003434 <HAL_GPIO_WritePin>
}
 80012a4:	bf00      	nop
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	200001c2 	.word	0x200001c2
 80012b0:	200001c3 	.word	0x200001c3
 80012b4:	200001c4 	.word	0x200001c4
 80012b8:	20000000 	.word	0x20000000
 80012bc:	200001c0 	.word	0x200001c0
 80012c0:	0800b750 	.word	0x0800b750
 80012c4:	48000400 	.word	0x48000400

080012c8 <aci_gatt_read_permit_req_event>:
 * @retval See file bluenrg1_events.h
 */
void aci_gatt_read_permit_req_event(uint16_t Connection_Handle,
                                    uint16_t Attribute_Handle,
                                    uint16_t Offset)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	80fb      	strh	r3, [r7, #6]
 80012d2:	460b      	mov	r3, r1
 80012d4:	80bb      	strh	r3, [r7, #4]
 80012d6:	4613      	mov	r3, r2
 80012d8:	807b      	strh	r3, [r7, #2]
  Read_Request_CB(Attribute_Handle);
 80012da:	88bb      	ldrh	r3, [r7, #4]
 80012dc:	4618      	mov	r0, r3
 80012de:	f000 f907 	bl	80014f0 <Read_Request_CB>
}
 80012e2:	bf00      	nop
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
	...

080012ec <aci_gatt_attribute_modified_event>:
void aci_gatt_attribute_modified_event(uint16_t Connection_Handle,
                                       uint16_t Attribute_Handle,
                                       uint16_t Offset,
                                       uint16_t Attr_Data_Length,
                                       uint8_t Attr_Data[])
{
 80012ec:	b590      	push	{r4, r7, lr}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af02      	add	r7, sp, #8
 80012f2:	4604      	mov	r4, r0
 80012f4:	4608      	mov	r0, r1
 80012f6:	4611      	mov	r1, r2
 80012f8:	461a      	mov	r2, r3
 80012fa:	4623      	mov	r3, r4
 80012fc:	80fb      	strh	r3, [r7, #6]
 80012fe:	4603      	mov	r3, r0
 8001300:	80bb      	strh	r3, [r7, #4]
 8001302:	460b      	mov	r3, r1
 8001304:	807b      	strh	r3, [r7, #2]
 8001306:	4613      	mov	r3, r2
 8001308:	803b      	strh	r3, [r7, #0]
  Attribute_Modified_Request_CB(Connection_Handle, Attribute_Handle, Offset, Attr_Data_Length, Attr_Data);
 800130a:	883b      	ldrh	r3, [r7, #0]
 800130c:	b2dc      	uxtb	r4, r3
 800130e:	887a      	ldrh	r2, [r7, #2]
 8001310:	88b9      	ldrh	r1, [r7, #4]
 8001312:	88f8      	ldrh	r0, [r7, #6]
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	9300      	str	r3, [sp, #0]
 8001318:	4623      	mov	r3, r4
 800131a:	f000 f9f1 	bl	8001700 <Attribute_Modified_Request_CB>
  PRINT_DBG("" + Offset);
 800131e:	887b      	ldrh	r3, [r7, #2]
 8001320:	4a04      	ldr	r2, [pc, #16]	@ (8001334 <aci_gatt_attribute_modified_event+0x48>)
 8001322:	4413      	add	r3, r2
 8001324:	4618      	mov	r0, r3
 8001326:	f009 f839 	bl	800a39c <iprintf>
}
 800132a:	bf00      	nop
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	bd90      	pop	{r4, r7, pc}
 8001332:	bf00      	nop
 8001334:	0800b768 	.word	0x0800b768

08001338 <aci_gap_pass_key_req_event>:
 *         aci_gap_pass_key_resp command.
 * @param  See file bluenrg1_events.h
 * @retval See file bluenrg1_events.h
 */
void aci_gap_pass_key_req_event(uint16_t Connection_Handle)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	80fb      	strh	r3, [r7, #6]
  uint8_t ret;

  ret = aci_gap_pass_key_resp(connection_handle, PERIPHERAL_PASS_KEY);
 8001342:	4b0c      	ldr	r3, [pc, #48]	@ (8001374 <aci_gap_pass_key_req_event+0x3c>)
 8001344:	881b      	ldrh	r3, [r3, #0]
 8001346:	b29b      	uxth	r3, r3
 8001348:	490b      	ldr	r1, [pc, #44]	@ (8001378 <aci_gap_pass_key_req_event+0x40>)
 800134a:	4618      	mov	r0, r3
 800134c:	f007 fcf0 	bl	8008d30 <aci_gap_pass_key_resp>
 8001350:	4603      	mov	r3, r0
 8001352:	73fb      	strb	r3, [r7, #15]
  if (ret != BLE_STATUS_SUCCESS) {
 8001354:	7bfb      	ldrb	r3, [r7, #15]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d005      	beq.n	8001366 <aci_gap_pass_key_req_event+0x2e>
    PRINT_DBG("aci_gap_pass_key_resp failed:0x%02x\r\n", ret);
 800135a:	7bfb      	ldrb	r3, [r7, #15]
 800135c:	4619      	mov	r1, r3
 800135e:	4807      	ldr	r0, [pc, #28]	@ (800137c <aci_gap_pass_key_req_event+0x44>)
 8001360:	f009 f81c 	bl	800a39c <iprintf>
  } else {
    PRINT_DBG("aci_gap_pass_key_resp OK\r\n");
  }
}
 8001364:	e002      	b.n	800136c <aci_gap_pass_key_req_event+0x34>
    PRINT_DBG("aci_gap_pass_key_resp OK\r\n");
 8001366:	4806      	ldr	r0, [pc, #24]	@ (8001380 <aci_gap_pass_key_req_event+0x48>)
 8001368:	f009 f888 	bl	800a47c <puts>
}
 800136c:	bf00      	nop
 800136e:	3710      	adds	r7, #16
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	200001c0 	.word	0x200001c0
 8001378:	0001e240 	.word	0x0001e240
 800137c:	0800b76c 	.word	0x0800b76c
 8001380:	0800b794 	.word	0x0800b794

08001384 <aci_gap_pairing_complete_event>:
 *         timeout has occurred so that the upper layer can decide to disconnect the link.
 * @param  See file bluenrg1_events.h
 * @retval See file bluenrg1_events.h
 */
void aci_gap_pairing_complete_event(uint16_t connection_handle, uint8_t status, uint8_t reason)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	80fb      	strh	r3, [r7, #6]
 800138e:	460b      	mov	r3, r1
 8001390:	717b      	strb	r3, [r7, #5]
 8001392:	4613      	mov	r3, r2
 8001394:	713b      	strb	r3, [r7, #4]
  if (status == 0x02) { /* Pairing Failed */
 8001396:	797b      	ldrb	r3, [r7, #5]
 8001398:	2b02      	cmp	r3, #2
 800139a:	d10b      	bne.n	80013b4 <aci_gap_pairing_complete_event+0x30>
    PRINT_DBG("aci_gap_pairing_complete_event failed:0x%02x with reason 0x%02x\r\n", status, reason);
 800139c:	797b      	ldrb	r3, [r7, #5]
 800139e:	793a      	ldrb	r2, [r7, #4]
 80013a0:	4619      	mov	r1, r3
 80013a2:	480c      	ldr	r0, [pc, #48]	@ (80013d4 <aci_gap_pairing_complete_event+0x50>)
 80013a4:	f008 fffa 	bl	800a39c <iprintf>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80013a8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80013ac:	480a      	ldr	r0, [pc, #40]	@ (80013d8 <aci_gap_pairing_complete_event+0x54>)
 80013ae:	f002 f859 	bl	8003464 <HAL_GPIO_TogglePin>
    PRINT_DBG("aci_gap_pairing_complete_event with status 0x%02x\r\n", status);
    //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
    HAL_Delay(1000);
    //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
  }
}
 80013b2:	e00b      	b.n	80013cc <aci_gap_pairing_complete_event+0x48>
    paired = TRUE;
 80013b4:	4b09      	ldr	r3, [pc, #36]	@ (80013dc <aci_gap_pairing_complete_event+0x58>)
 80013b6:	2201      	movs	r2, #1
 80013b8:	701a      	strb	r2, [r3, #0]
    PRINT_DBG("aci_gap_pairing_complete_event with status 0x%02x\r\n", status);
 80013ba:	797b      	ldrb	r3, [r7, #5]
 80013bc:	4619      	mov	r1, r3
 80013be:	4808      	ldr	r0, [pc, #32]	@ (80013e0 <aci_gap_pairing_complete_event+0x5c>)
 80013c0:	f008 ffec 	bl	800a39c <iprintf>
    HAL_Delay(1000);
 80013c4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80013c8:	f001 fbd2 	bl	8002b70 <HAL_Delay>
}
 80013cc:	bf00      	nop
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	0800b7b0 	.word	0x0800b7b0
 80013d8:	48000400 	.word	0x48000400
 80013dc:	200001c4 	.word	0x200001c4
 80013e0:	0800b7f4 	.word	0x0800b7f4

080013e4 <Add_HWServW2ST_Service>:
 * @brief  Add the 'HW' service (and the Environmental and AccGyr characteristics).
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_HWServW2ST_Service(void)
{
 80013e4:	b590      	push	{r4, r7, lr}
 80013e6:	b08d      	sub	sp, #52	@ 0x34
 80013e8:	af06      	add	r7, sp, #24
    tBleStatus ret;
    uint8_t uuid[16];

    // Add SW_SENS_W2ST service
    COPY_SW_SENS_W2ST_SERVICE_UUID(uuid);
 80013ea:	231b      	movs	r3, #27
 80013ec:	713b      	strb	r3, [r7, #4]
 80013ee:	23c5      	movs	r3, #197	@ 0xc5
 80013f0:	717b      	strb	r3, [r7, #5]
 80013f2:	23d5      	movs	r3, #213	@ 0xd5
 80013f4:	71bb      	strb	r3, [r7, #6]
 80013f6:	23a5      	movs	r3, #165	@ 0xa5
 80013f8:	71fb      	strb	r3, [r7, #7]
 80013fa:	2302      	movs	r3, #2
 80013fc:	723b      	strb	r3, [r7, #8]
 80013fe:	2300      	movs	r3, #0
 8001400:	727b      	strb	r3, [r7, #9]
 8001402:	23b4      	movs	r3, #180	@ 0xb4
 8001404:	72bb      	strb	r3, [r7, #10]
 8001406:	239a      	movs	r3, #154	@ 0x9a
 8001408:	72fb      	strb	r3, [r7, #11]
 800140a:	23e1      	movs	r3, #225	@ 0xe1
 800140c:	733b      	strb	r3, [r7, #12]
 800140e:	2311      	movs	r3, #17
 8001410:	737b      	strb	r3, [r7, #13]
 8001412:	2302      	movs	r3, #2
 8001414:	73bb      	strb	r3, [r7, #14]
 8001416:	2300      	movs	r3, #0
 8001418:	73fb      	strb	r3, [r7, #15]
 800141a:	2300      	movs	r3, #0
 800141c:	743b      	strb	r3, [r7, #16]
 800141e:	2300      	movs	r3, #0
 8001420:	747b      	strb	r3, [r7, #17]
 8001422:	2300      	movs	r3, #0
 8001424:	74bb      	strb	r3, [r7, #18]
 8001426:	2300      	movs	r3, #0
 8001428:	74fb      	strb	r3, [r7, #19]
    BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 800142a:	4b2d      	ldr	r3, [pc, #180]	@ (80014e0 <Add_HWServW2ST_Service+0xfc>)
 800142c:	461c      	mov	r4, r3
 800142e:	1d3b      	adds	r3, r7, #4
 8001430:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001432:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    ret = aci_gatt_add_service(UUID_TYPE_128, &service_uuid, PRIMARY_SERVICE,
 8001436:	4b2b      	ldr	r3, [pc, #172]	@ (80014e4 <Add_HWServW2ST_Service+0x100>)
 8001438:	9300      	str	r3, [sp, #0]
 800143a:	2304      	movs	r3, #4
 800143c:	2201      	movs	r2, #1
 800143e:	4928      	ldr	r1, [pc, #160]	@ (80014e0 <Add_HWServW2ST_Service+0xfc>)
 8001440:	2002      	movs	r0, #2
 8001442:	f007 fe97 	bl	8009174 <aci_gatt_add_service>
 8001446:	4603      	mov	r3, r0
 8001448:	75fb      	strb	r3, [r7, #23]
                               1+(3*1), &SWServW2STHandle);
    if (ret != BLE_STATUS_SUCCESS) {
 800144a:	7dfb      	ldrb	r3, [r7, #23]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <Add_HWServW2ST_Service+0x70>
        return BLE_STATUS_ERROR;
 8001450:	2347      	movs	r3, #71	@ 0x47
 8001452:	e040      	b.n	80014d6 <Add_HWServW2ST_Service+0xf2>
    }

    // Add Grid characteristic
    COPY_GRID_W2ST_CHAR_UUID(uuid);
 8001454:	231b      	movs	r3, #27
 8001456:	713b      	strb	r3, [r7, #4]
 8001458:	23c5      	movs	r3, #197	@ 0xc5
 800145a:	717b      	strb	r3, [r7, #5]
 800145c:	23d5      	movs	r3, #213	@ 0xd5
 800145e:	71bb      	strb	r3, [r7, #6]
 8001460:	23a5      	movs	r3, #165	@ 0xa5
 8001462:	71fb      	strb	r3, [r7, #7]
 8001464:	2302      	movs	r3, #2
 8001466:	723b      	strb	r3, [r7, #8]
 8001468:	2300      	movs	r3, #0
 800146a:	727b      	strb	r3, [r7, #9]
 800146c:	2336      	movs	r3, #54	@ 0x36
 800146e:	72bb      	strb	r3, [r7, #10]
 8001470:	23ac      	movs	r3, #172	@ 0xac
 8001472:	72fb      	strb	r3, [r7, #11]
 8001474:	23e1      	movs	r3, #225	@ 0xe1
 8001476:	733b      	strb	r3, [r7, #12]
 8001478:	2311      	movs	r3, #17
 800147a:	737b      	strb	r3, [r7, #13]
 800147c:	2301      	movs	r3, #1
 800147e:	73bb      	strb	r3, [r7, #14]
 8001480:	2300      	movs	r3, #0
 8001482:	73fb      	strb	r3, [r7, #15]
 8001484:	2301      	movs	r3, #1
 8001486:	743b      	strb	r3, [r7, #16]
 8001488:	2300      	movs	r3, #0
 800148a:	747b      	strb	r3, [r7, #17]
 800148c:	2300      	movs	r3, #0
 800148e:	74bb      	strb	r3, [r7, #18]
 8001490:	2300      	movs	r3, #0
 8001492:	74fb      	strb	r3, [r7, #19]
    BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8001494:	4b14      	ldr	r3, [pc, #80]	@ (80014e8 <Add_HWServW2ST_Service+0x104>)
 8001496:	461c      	mov	r4, r3
 8001498:	1d3b      	adds	r3, r7, #4
 800149a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800149c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    ret = aci_gatt_add_char(SWServW2STHandle, UUID_TYPE_128, &char_uuid,
 80014a0:	4b10      	ldr	r3, [pc, #64]	@ (80014e4 <Add_HWServW2ST_Service+0x100>)
 80014a2:	8818      	ldrh	r0, [r3, #0]
 80014a4:	4b11      	ldr	r3, [pc, #68]	@ (80014ec <Add_HWServW2ST_Service+0x108>)
 80014a6:	9305      	str	r3, [sp, #20]
 80014a8:	2300      	movs	r3, #0
 80014aa:	9304      	str	r3, [sp, #16]
 80014ac:	2310      	movs	r3, #16
 80014ae:	9303      	str	r3, [sp, #12]
 80014b0:	2301      	movs	r3, #1
 80014b2:	9302      	str	r3, [sp, #8]
 80014b4:	2300      	movs	r3, #0
 80014b6:	9301      	str	r3, [sp, #4]
 80014b8:	231a      	movs	r3, #26
 80014ba:	9300      	str	r3, [sp, #0]
 80014bc:	2312      	movs	r3, #18
 80014be:	4a0a      	ldr	r2, [pc, #40]	@ (80014e8 <Add_HWServW2ST_Service+0x104>)
 80014c0:	2102      	movs	r1, #2
 80014c2:	f007 ff2d 	bl	8009320 <aci_gatt_add_char>
 80014c6:	4603      	mov	r3, r0
 80014c8:	75fb      	strb	r3, [r7, #23]
                            2+4*4, // 2 bytes for timestamp, 4 floats (4 bytes each)
                            CHAR_PROP_NOTIFY | CHAR_PROP_READ | CHAR_PROP_WRITE,
                            ATTR_PERMISSION_NONE,
                            GATT_NOTIFY_ATTRIBUTE_WRITE,
                            16, 0, &GridCharHandle);
    if (ret != BLE_STATUS_SUCCESS) {
 80014ca:	7dfb      	ldrb	r3, [r7, #23]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <Add_HWServW2ST_Service+0xf0>
        return BLE_STATUS_ERROR;
 80014d0:	2347      	movs	r3, #71	@ 0x47
 80014d2:	e000      	b.n	80014d6 <Add_HWServW2ST_Service+0xf2>
    }

    return BLE_STATUS_SUCCESS;
 80014d4:	2300      	movs	r3, #0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	371c      	adds	r7, #28
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd90      	pop	{r4, r7, pc}
 80014de:	bf00      	nop
 80014e0:	200001a0 	.word	0x200001a0
 80014e4:	2000019c 	.word	0x2000019c
 80014e8:	200001b0 	.word	0x200001b0
 80014ec:	20000196 	.word	0x20000196

080014f0 <Read_Request_CB>:
 *
 * @param  Handle of the characteristic to update
 * @retval None
 */
void Read_Request_CB(uint16_t handle)
{
 80014f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80014f4:	b08e      	sub	sp, #56	@ 0x38
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	4603      	mov	r3, r0
 80014fa:	84fb      	strh	r3, [r7, #38]	@ 0x26
  tBleStatus ret;

  if(handle == AccGyroMagCharHandle + 1)
 80014fc:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80014fe:	4b4d      	ldr	r3, [pc, #308]	@ (8001634 <Read_Request_CB+0x144>)
 8001500:	881b      	ldrh	r3, [r3, #0]
 8001502:	3301      	adds	r3, #1
 8001504:	429a      	cmp	r2, r3
 8001506:	d078      	beq.n	80015fa <Read_Request_CB+0x10a>
  {
    //Acc_Update(&x_axes, &g_axes, &m_axes);
  }
  else if (handle == EnvironmentalCharHandle + 1)
 8001508:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800150a:	4b4b      	ldr	r3, [pc, #300]	@ (8001638 <Read_Request_CB+0x148>)
 800150c:	881b      	ldrh	r3, [r3, #0]
 800150e:	3301      	adds	r3, #1
 8001510:	429a      	cmp	r2, r3
 8001512:	d172      	bne.n	80015fa <Read_Request_CB+0x10a>
  {
    float data_t, data_p;
    data_t = 27.0 + ((uint64_t)rand()*5)/RAND_MAX; //T sensor emulation
 8001514:	f008 fe42 	bl	800a19c <rand>
 8001518:	4603      	mov	r3, r0
 800151a:	17da      	asrs	r2, r3, #31
 800151c:	61bb      	str	r3, [r7, #24]
 800151e:	61fa      	str	r2, [r7, #28]
 8001520:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001524:	f04f 0000 	mov.w	r0, #0
 8001528:	f04f 0100 	mov.w	r1, #0
 800152c:	0099      	lsls	r1, r3, #2
 800152e:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001532:	0090      	lsls	r0, r2, #2
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	69b9      	ldr	r1, [r7, #24]
 800153a:	1851      	adds	r1, r2, r1
 800153c:	6139      	str	r1, [r7, #16]
 800153e:	69f9      	ldr	r1, [r7, #28]
 8001540:	eb43 0101 	adc.w	r1, r3, r1
 8001544:	6179      	str	r1, [r7, #20]
 8001546:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800154a:	f04f 0300 	mov.w	r3, #0
 800154e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001552:	f7ff f8a9 	bl	80006a8 <__aeabi_uldivmod>
 8001556:	4602      	mov	r2, r0
 8001558:	460b      	mov	r3, r1
 800155a:	4610      	mov	r0, r2
 800155c:	4619      	mov	r1, r3
 800155e:	f7ff f81d 	bl	800059c <__aeabi_ul2d>
 8001562:	f04f 0200 	mov.w	r2, #0
 8001566:	4b35      	ldr	r3, [pc, #212]	@ (800163c <Read_Request_CB+0x14c>)
 8001568:	f7fe fe98 	bl	800029c <__adddf3>
 800156c:	4602      	mov	r2, r0
 800156e:	460b      	mov	r3, r1
 8001570:	4610      	mov	r0, r2
 8001572:	4619      	mov	r1, r3
 8001574:	f7ff f848 	bl	8000608 <__aeabi_d2f>
 8001578:	4603      	mov	r3, r0
 800157a:	637b      	str	r3, [r7, #52]	@ 0x34
    data_p = 1000.0 + ((uint64_t)rand()*100)/RAND_MAX; //P sensor emulation
 800157c:	f008 fe0e 	bl	800a19c <rand>
 8001580:	4603      	mov	r3, r0
 8001582:	17da      	asrs	r2, r3, #31
 8001584:	4698      	mov	r8, r3
 8001586:	4691      	mov	r9, r2
 8001588:	4642      	mov	r2, r8
 800158a:	464b      	mov	r3, r9
 800158c:	1891      	adds	r1, r2, r2
 800158e:	6039      	str	r1, [r7, #0]
 8001590:	415b      	adcs	r3, r3
 8001592:	607b      	str	r3, [r7, #4]
 8001594:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001598:	eb12 0408 	adds.w	r4, r2, r8
 800159c:	eb43 0509 	adc.w	r5, r3, r9
 80015a0:	f04f 0200 	mov.w	r2, #0
 80015a4:	f04f 0300 	mov.w	r3, #0
 80015a8:	016b      	lsls	r3, r5, #5
 80015aa:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80015ae:	0162      	lsls	r2, r4, #5
 80015b0:	eb14 0a02 	adds.w	sl, r4, r2
 80015b4:	eb45 0b03 	adc.w	fp, r5, r3
 80015b8:	eb1a 0308 	adds.w	r3, sl, r8
 80015bc:	60bb      	str	r3, [r7, #8]
 80015be:	eb4b 0309 	adc.w	r3, fp, r9
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80015c8:	f04f 0300 	mov.w	r3, #0
 80015cc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80015d0:	f7ff f86a 	bl	80006a8 <__aeabi_uldivmod>
 80015d4:	4602      	mov	r2, r0
 80015d6:	460b      	mov	r3, r1
 80015d8:	4610      	mov	r0, r2
 80015da:	4619      	mov	r1, r3
 80015dc:	f7fe ffde 	bl	800059c <__aeabi_ul2d>
 80015e0:	f04f 0200 	mov.w	r2, #0
 80015e4:	4b16      	ldr	r3, [pc, #88]	@ (8001640 <Read_Request_CB+0x150>)
 80015e6:	f7fe fe59 	bl	800029c <__adddf3>
 80015ea:	4602      	mov	r2, r0
 80015ec:	460b      	mov	r3, r1
 80015ee:	4610      	mov	r0, r2
 80015f0:	4619      	mov	r1, r3
 80015f2:	f7ff f809 	bl	8000608 <__aeabi_d2f>
 80015f6:	4603      	mov	r3, r0
 80015f8:	633b      	str	r3, [r7, #48]	@ 0x30
    //Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10));
  }

  if(connection_handle !=0)
 80015fa:	4b12      	ldr	r3, [pc, #72]	@ (8001644 <Read_Request_CB+0x154>)
 80015fc:	881b      	ldrh	r3, [r3, #0]
 80015fe:	b29b      	uxth	r3, r3
 8001600:	2b00      	cmp	r3, #0
 8001602:	d012      	beq.n	800162a <Read_Request_CB+0x13a>
  {
    ret = aci_gatt_allow_read(connection_handle);
 8001604:	4b0f      	ldr	r3, [pc, #60]	@ (8001644 <Read_Request_CB+0x154>)
 8001606:	881b      	ldrh	r3, [r3, #0]
 8001608:	b29b      	uxth	r3, r3
 800160a:	4618      	mov	r0, r3
 800160c:	f008 f842 	bl	8009694 <aci_gatt_allow_read>
 8001610:	4603      	mov	r3, r0
 8001612:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (ret != BLE_STATUS_SUCCESS)
 8001616:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800161a:	2b00      	cmp	r3, #0
 800161c:	d005      	beq.n	800162a <Read_Request_CB+0x13a>
    {
      PRINT_DBG("aci_gatt_allow_read() failed: 0x%02x\r\n", ret);
 800161e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001622:	4619      	mov	r1, r3
 8001624:	4808      	ldr	r0, [pc, #32]	@ (8001648 <Read_Request_CB+0x158>)
 8001626:	f008 feb9 	bl	800a39c <iprintf>
    }
  }
}
 800162a:	bf00      	nop
 800162c:	3738      	adds	r7, #56	@ 0x38
 800162e:	46bd      	mov	sp, r7
 8001630:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001634:	2000019a 	.word	0x2000019a
 8001638:	20000198 	.word	0x20000198
 800163c:	403b0000 	.word	0x403b0000
 8001640:	408f4000 	.word	0x408f4000
 8001644:	200001c0 	.word	0x200001c0
 8001648:	0800b8a8 	.word	0x0800b8a8

0800164c <printBits>:

// Assumes little endian
void printBits(size_t const size, uint8_t* ptr)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
    unsigned char *b = (unsigned char*) ptr;
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	60fb      	str	r3, [r7, #12]
    unsigned char byte;
    int i, j;

    for (i = size-1; i >= 0; i--) {
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	3b01      	subs	r3, #1
 800165e:	617b      	str	r3, [r7, #20]
 8001660:	e01f      	b.n	80016a2 <printBits+0x56>
        for (j = 7; j >= 0; j--) {
 8001662:	2307      	movs	r3, #7
 8001664:	613b      	str	r3, [r7, #16]
 8001666:	e013      	b.n	8001690 <printBits+0x44>
            byte = (b[i] >> j) & 1;
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	68fa      	ldr	r2, [r7, #12]
 800166c:	4413      	add	r3, r2
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	461a      	mov	r2, r3
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	fa42 f303 	asr.w	r3, r2, r3
 8001678:	b2db      	uxtb	r3, r3
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	72fb      	strb	r3, [r7, #11]
            printf("%u", byte);
 8001680:	7afb      	ldrb	r3, [r7, #11]
 8001682:	4619      	mov	r1, r3
 8001684:	480c      	ldr	r0, [pc, #48]	@ (80016b8 <printBits+0x6c>)
 8001686:	f008 fe89 	bl	800a39c <iprintf>
        for (j = 7; j >= 0; j--) {
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	3b01      	subs	r3, #1
 800168e:	613b      	str	r3, [r7, #16]
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	2b00      	cmp	r3, #0
 8001694:	dae8      	bge.n	8001668 <printBits+0x1c>
        }
        printf(" ");
 8001696:	2020      	movs	r0, #32
 8001698:	f008 fe92 	bl	800a3c0 <putchar>
    for (i = size-1; i >= 0; i--) {
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	3b01      	subs	r3, #1
 80016a0:	617b      	str	r3, [r7, #20]
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	dadc      	bge.n	8001662 <printBits+0x16>
    }
    puts("");
 80016a8:	4804      	ldr	r0, [pc, #16]	@ (80016bc <printBits+0x70>)
 80016aa:	f008 fee7 	bl	800a47c <puts>
}
 80016ae:	bf00      	nop
 80016b0:	3718      	adds	r7, #24
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	0800b8d0 	.word	0x0800b8d0
 80016bc:	0800b8d4 	.word	0x0800b8d4

080016c0 <compare_floats>:

int compare_floats(float a, float b, float epsilon) {
 80016c0:	b480      	push	{r7}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	ed87 0a03 	vstr	s0, [r7, #12]
 80016ca:	edc7 0a02 	vstr	s1, [r7, #8]
 80016ce:	ed87 1a01 	vstr	s2, [r7, #4]
    return (a - b) > epsilon;
 80016d2:	ed97 7a03 	vldr	s14, [r7, #12]
 80016d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80016da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016de:	ed97 7a01 	vldr	s14, [r7, #4]
 80016e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ea:	bf4c      	ite	mi
 80016ec:	2301      	movmi	r3, #1
 80016ee:	2300      	movpl	r3, #0
 80016f0:	b2db      	uxtb	r3, r3
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3714      	adds	r7, #20
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
	...

08001700 <Attribute_Modified_Request_CB>:
void Attribute_Modified_Request_CB(uint16_t Connection_Handle,
									uint16_t attr_handle,
									uint16_t Offset,
									uint8_t data_length,
									uint8_t *att_data)
{
 8001700:	b590      	push	{r4, r7, lr}
 8001702:	b091      	sub	sp, #68	@ 0x44
 8001704:	af02      	add	r7, sp, #8
 8001706:	4604      	mov	r4, r0
 8001708:	4608      	mov	r0, r1
 800170a:	4611      	mov	r1, r2
 800170c:	461a      	mov	r2, r3
 800170e:	4623      	mov	r3, r4
 8001710:	80fb      	strh	r3, [r7, #6]
 8001712:	4603      	mov	r3, r0
 8001714:	80bb      	strh	r3, [r7, #4]
 8001716:	460b      	mov	r3, r1
 8001718:	807b      	strh	r3, [r7, #2]
 800171a:	4613      	mov	r3, r2
 800171c:	707b      	strb	r3, [r7, #1]
	float grid[4];

	PRINT_DBG("GRID_CHAR_HANDLE: 0x%04X\r\n", GridCharHandle);
 800171e:	4b86      	ldr	r3, [pc, #536]	@ (8001938 <Attribute_Modified_Request_CB+0x238>)
 8001720:	881b      	ldrh	r3, [r3, #0]
 8001722:	4619      	mov	r1, r3
 8001724:	4885      	ldr	r0, [pc, #532]	@ (800193c <Attribute_Modified_Request_CB+0x23c>)
 8001726:	f008 fe39 	bl	800a39c <iprintf>
	if (attr_handle == GridCharHandle + 1) { // Replace GridCharHandle with your characteristic handle
 800172a:	88ba      	ldrh	r2, [r7, #4]
 800172c:	4b82      	ldr	r3, [pc, #520]	@ (8001938 <Attribute_Modified_Request_CB+0x238>)
 800172e:	881b      	ldrh	r3, [r3, #0]
 8001730:	3301      	adds	r3, #1
 8001732:	429a      	cmp	r2, r3
 8001734:	f040 80f6 	bne.w	8001924 <Attribute_Modified_Request_CB+0x224>
	        PRINT_DBG("Characteristic written: Handle=0x%04X, Data Length=%d\r\n",
 8001738:	88bb      	ldrh	r3, [r7, #4]
 800173a:	787a      	ldrb	r2, [r7, #1]
 800173c:	4619      	mov	r1, r3
 800173e:	4880      	ldr	r0, [pc, #512]	@ (8001940 <Attribute_Modified_Request_CB+0x240>)
 8001740:	f008 fe2c 	bl	800a39c <iprintf>
	                  attr_handle, data_length);

	        // Timestamp
	        uint16_t timestamp = att_data[0] | (att_data[1] << 8);
 8001744:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	b21a      	sxth	r2, r3
 800174a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800174c:	3301      	adds	r3, #1
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	021b      	lsls	r3, r3, #8
 8001752:	b21b      	sxth	r3, r3
 8001754:	4313      	orrs	r3, r2
 8001756:	b21b      	sxth	r3, r3
 8001758:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	        PRINT_DBG("Timestamp: %u\r\n", timestamp);
 800175a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800175c:	4619      	mov	r1, r3
 800175e:	4879      	ldr	r0, [pc, #484]	@ (8001944 <Attribute_Modified_Request_CB+0x244>)
 8001760:	f008 fe1c 	bl	800a39c <iprintf>

	        for (int i = 0; i < 4; ++i) {
 8001764:	2300      	movs	r3, #0
 8001766:	637b      	str	r3, [r7, #52]	@ 0x34
 8001768:	e03f      	b.n	80017ea <Attribute_Modified_Request_CB+0xea>
	        	float value;
	        	memcpy(&value, att_data + 2 + (i*4), 4);
 800176a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	3302      	adds	r3, #2
 8001770:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001772:	4413      	add	r3, r2
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	617b      	str	r3, [r7, #20]
	        	PRINT_DBG("Float %d: %f (Raw: 0x%08X)\r\n", i, value, *(uint32_t*)(att_data + 2 + (i * 4)));
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	4618      	mov	r0, r3
 800177c:	f7fe feec 	bl	8000558 <__aeabi_f2d>
 8001780:	4602      	mov	r2, r0
 8001782:	460b      	mov	r3, r1
 8001784:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001786:	0089      	lsls	r1, r1, #2
 8001788:	3102      	adds	r1, #2
 800178a:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800178c:	4401      	add	r1, r0
 800178e:	6809      	ldr	r1, [r1, #0]
 8001790:	9100      	str	r1, [sp, #0]
 8001792:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001794:	486c      	ldr	r0, [pc, #432]	@ (8001948 <Attribute_Modified_Request_CB+0x248>)
 8001796:	f008 fe01 	bl	800a39c <iprintf>

	        	// Convert 4 bytes to float
	        					int index = 2 + (i * 4);
 800179a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	3302      	adds	r3, #2
 80017a0:	62bb      	str	r3, [r7, #40]	@ 0x28

	        	                uint32_t temp = 0;
 80017a2:	2300      	movs	r3, #0
 80017a4:	613b      	str	r3, [r7, #16]
	        	                memcpy(&temp, att_data + 2 + (i*4), 4);
 80017a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	3302      	adds	r3, #2
 80017ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80017ae:	4413      	add	r3, r2
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	613b      	str	r3, [r7, #16]

	        	               union {
	        	                	uint32_t i;
	        	                	float f;
	        	                } converter;
	        	               converter.i = temp;
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	60fb      	str	r3, [r7, #12]

	        	                // Use memcpy to avoid strict aliasing violations
	        	                //memcpy(&value, &temp, sizeof(float));


	        	               	grid[i] = converter.f;
 80017b8:	68fa      	ldr	r2, [r7, #12]
 80017ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	3338      	adds	r3, #56	@ 0x38
 80017c0:	443b      	add	r3, r7
 80017c2:	3b20      	subs	r3, #32
 80017c4:	601a      	str	r2, [r3, #0]
	        	                PRINT_DBG("Grid[%d]: %f\r\n", i, grid[i]);
 80017c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	3338      	adds	r3, #56	@ 0x38
 80017cc:	443b      	add	r3, r7
 80017ce:	3b20      	subs	r3, #32
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7fe fec0 	bl	8000558 <__aeabi_f2d>
 80017d8:	4602      	mov	r2, r0
 80017da:	460b      	mov	r3, r1
 80017dc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80017de:	485b      	ldr	r0, [pc, #364]	@ (800194c <Attribute_Modified_Request_CB+0x24c>)
 80017e0:	f008 fddc 	bl	800a39c <iprintf>
	        for (int i = 0; i < 4; ++i) {
 80017e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017e6:	3301      	adds	r3, #1
 80017e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80017ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017ec:	2b03      	cmp	r3, #3
 80017ee:	ddbc      	ble.n	800176a <Attribute_Modified_Request_CB+0x6a>

	        }

	        // Hex dump
	        PRINT_DBG("Full hex dump:\r\n");
 80017f0:	4857      	ldr	r0, [pc, #348]	@ (8001950 <Attribute_Modified_Request_CB+0x250>)
 80017f2:	f008 fe43 	bl	800a47c <puts>
	        for (int i = 0; i < data_length; i++) {
 80017f6:	2300      	movs	r3, #0
 80017f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80017fa:	e013      	b.n	8001824 <Attribute_Modified_Request_CB+0x124>
	        	PRINT_DBG("%02X ", att_data[i]);
 80017fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001800:	4413      	add	r3, r2
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	4619      	mov	r1, r3
 8001806:	4853      	ldr	r0, [pc, #332]	@ (8001954 <Attribute_Modified_Request_CB+0x254>)
 8001808:	f008 fdc8 	bl	800a39c <iprintf>
	        	if ((i + 1) % 8 == 0) PRINT_DBG("\r\n");
 800180c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800180e:	3301      	adds	r3, #1
 8001810:	f003 0307 	and.w	r3, r3, #7
 8001814:	2b00      	cmp	r3, #0
 8001816:	d102      	bne.n	800181e <Attribute_Modified_Request_CB+0x11e>
 8001818:	484f      	ldr	r0, [pc, #316]	@ (8001958 <Attribute_Modified_Request_CB+0x258>)
 800181a:	f008 fe2f 	bl	800a47c <puts>
	        for (int i = 0; i < data_length; i++) {
 800181e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001820:	3301      	adds	r3, #1
 8001822:	633b      	str	r3, [r7, #48]	@ 0x30
 8001824:	787b      	ldrb	r3, [r7, #1]
 8001826:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001828:	429a      	cmp	r2, r3
 800182a:	dbe7      	blt.n	80017fc <Attribute_Modified_Request_CB+0xfc>


	        }
	        PRINT_DBG("\r\n");
 800182c:	484a      	ldr	r0, [pc, #296]	@ (8001958 <Attribute_Modified_Request_CB+0x258>)
 800182e:	f008 fe25 	bl	800a47c <puts>

	        // Process the data (assuming it's a float, adjust as needed)
	        printBits(18, att_data);
 8001832:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8001834:	2012      	movs	r0, #18
 8001836:	f7ff ff09 	bl	800164c <printBits>

	        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 800183a:	2201      	movs	r2, #1
 800183c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001840:	4846      	ldr	r0, [pc, #280]	@ (800195c <Attribute_Modified_Request_CB+0x25c>)
 8001842:	f001 fdf7 	bl	8003434 <HAL_GPIO_WritePin>

	        if (compare_floats((float) 0.5, grid[0], 0.00001)) {
 8001846:	edd7 7a06 	vldr	s15, [r7, #24]
 800184a:	ed9f 1a45 	vldr	s2, [pc, #276]	@ 8001960 <Attribute_Modified_Request_CB+0x260>
 800184e:	eef0 0a67 	vmov.f32	s1, s15
 8001852:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8001856:	f7ff ff33 	bl	80016c0 <compare_floats>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d006      	beq.n	800186e <Attribute_Modified_Request_CB+0x16e>

	        	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8001860:	2200      	movs	r2, #0
 8001862:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001866:	483d      	ldr	r0, [pc, #244]	@ (800195c <Attribute_Modified_Request_CB+0x25c>)
 8001868:	f001 fde4 	bl	8003434 <HAL_GPIO_WritePin>
 800186c:	e005      	b.n	800187a <Attribute_Modified_Request_CB+0x17a>
	        } else {
	        	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 800186e:	2201      	movs	r2, #1
 8001870:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001874:	4839      	ldr	r0, [pc, #228]	@ (800195c <Attribute_Modified_Request_CB+0x25c>)
 8001876:	f001 fddd 	bl	8003434 <HAL_GPIO_WritePin>
	        }

	        // Handle the new data as needed
	        change_pwm_pulse_2(&htim2, TIM_CHANNEL_3, (uint32_t) roundf(grid[0] * 24));
 800187a:	edd7 7a06 	vldr	s15, [r7, #24]
 800187e:	eeb3 7a08 	vmov.f32	s14, #56	@ 0x41c00000  24.0
 8001882:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001886:	eeb0 0a67 	vmov.f32	s0, s15
 800188a:	f009 fd21 	bl	800b2d0 <roundf>
 800188e:	eef0 7a40 	vmov.f32	s15, s0
 8001892:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001896:	ee17 2a90 	vmov	r2, s15
 800189a:	2108      	movs	r1, #8
 800189c:	4831      	ldr	r0, [pc, #196]	@ (8001964 <Attribute_Modified_Request_CB+0x264>)
 800189e:	f000 fa96 	bl	8001dce <change_pwm_pulse_2>
	        change_pwm_pulse_2(&htim2, TIM_CHANNEL_4, (uint32_t) roundf(grid[1] * 24));
 80018a2:	edd7 7a07 	vldr	s15, [r7, #28]
 80018a6:	eeb3 7a08 	vmov.f32	s14, #56	@ 0x41c00000  24.0
 80018aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018ae:	eeb0 0a67 	vmov.f32	s0, s15
 80018b2:	f009 fd0d 	bl	800b2d0 <roundf>
 80018b6:	eef0 7a40 	vmov.f32	s15, s0
 80018ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018be:	ee17 2a90 	vmov	r2, s15
 80018c2:	210c      	movs	r1, #12
 80018c4:	4827      	ldr	r0, [pc, #156]	@ (8001964 <Attribute_Modified_Request_CB+0x264>)
 80018c6:	f000 fa82 	bl	8001dce <change_pwm_pulse_2>
	        change_pwm_pulse(&htim16, TIM_CHANNEL_1, (uint16_t) roundf(grid[2] * 24));
 80018ca:	edd7 7a08 	vldr	s15, [r7, #32]
 80018ce:	eeb3 7a08 	vmov.f32	s14, #56	@ 0x41c00000  24.0
 80018d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018d6:	eeb0 0a67 	vmov.f32	s0, s15
 80018da:	f009 fcf9 	bl	800b2d0 <roundf>
 80018de:	eef0 7a40 	vmov.f32	s15, s0
 80018e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018e6:	ee17 3a90 	vmov	r3, s15
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	461a      	mov	r2, r3
 80018ee:	2100      	movs	r1, #0
 80018f0:	481d      	ldr	r0, [pc, #116]	@ (8001968 <Attribute_Modified_Request_CB+0x268>)
 80018f2:	f000 fa33 	bl	8001d5c <change_pwm_pulse>
	        change_pwm_pulse(&htim1, TIM_CHANNEL_4, (uint16_t) roundf(grid[3] * 24));
 80018f6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80018fa:	eeb3 7a08 	vmov.f32	s14, #56	@ 0x41c00000  24.0
 80018fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001902:	eeb0 0a67 	vmov.f32	s0, s15
 8001906:	f009 fce3 	bl	800b2d0 <roundf>
 800190a:	eef0 7a40 	vmov.f32	s15, s0
 800190e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001912:	ee17 3a90 	vmov	r3, s15
 8001916:	b29b      	uxth	r3, r3
 8001918:	461a      	mov	r2, r3
 800191a:	210c      	movs	r1, #12
 800191c:	4813      	ldr	r0, [pc, #76]	@ (800196c <Attribute_Modified_Request_CB+0x26c>)
 800191e:	f000 fa1d 	bl	8001d5c <change_pwm_pulse>
	    } else {
	        PRINT_DBG("Attribute modification for unknown handle: 0x%04X\r\n", attr_handle);
	    }
}
 8001922:	e004      	b.n	800192e <Attribute_Modified_Request_CB+0x22e>
	        PRINT_DBG("Attribute modification for unknown handle: 0x%04X\r\n", attr_handle);
 8001924:	88bb      	ldrh	r3, [r7, #4]
 8001926:	4619      	mov	r1, r3
 8001928:	4811      	ldr	r0, [pc, #68]	@ (8001970 <Attribute_Modified_Request_CB+0x270>)
 800192a:	f008 fd37 	bl	800a39c <iprintf>
}
 800192e:	bf00      	nop
 8001930:	373c      	adds	r7, #60	@ 0x3c
 8001932:	46bd      	mov	sp, r7
 8001934:	bd90      	pop	{r4, r7, pc}
 8001936:	bf00      	nop
 8001938:	20000196 	.word	0x20000196
 800193c:	0800b8d8 	.word	0x0800b8d8
 8001940:	0800b8f4 	.word	0x0800b8f4
 8001944:	0800b92c 	.word	0x0800b92c
 8001948:	0800b93c 	.word	0x0800b93c
 800194c:	0800b95c 	.word	0x0800b95c
 8001950:	0800b96c 	.word	0x0800b96c
 8001954:	0800b97c 	.word	0x0800b97c
 8001958:	0800b984 	.word	0x0800b984
 800195c:	48000400 	.word	0x48000400
 8001960:	3727c5ac 	.word	0x3727c5ac
 8001964:	2000038c 	.word	0x2000038c
 8001968:	200003d8 	.word	0x200003d8
 800196c:	20000340 	.word	0x20000340
 8001970:	0800b988 	.word	0x0800b988

08001974 <Set_DeviceConnectable>:
 * @note	Puts the devie in a connectable mode
 * @param	None
 * @retval None
 */
void Set_DeviceConnectable(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b092      	sub	sp, #72	@ 0x48
 8001978:	af08      	add	r7, sp, #32
	uint8_t ret;
	uint8_t local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME, SENSOR_DEMO_NAME};
 800197a:	4a3f      	ldr	r2, [pc, #252]	@ (8001a78 <Set_DeviceConnectable+0x104>)
 800197c:	f107 031c 	add.w	r3, r7, #28
 8001980:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001984:	e883 0003 	stmia.w	r3, {r0, r1}

	uint8_t manuf_data[26] = {
 8001988:	2302      	movs	r3, #2
 800198a:	703b      	strb	r3, [r7, #0]
 800198c:	230a      	movs	r3, #10
 800198e:	707b      	strb	r3, [r7, #1]
 8001990:	2300      	movs	r3, #0
 8001992:	70bb      	strb	r3, [r7, #2]
 8001994:	2308      	movs	r3, #8
 8001996:	70fb      	strb	r3, [r7, #3]
 8001998:	2309      	movs	r3, #9
 800199a:	713b      	strb	r3, [r7, #4]
 800199c:	2348      	movs	r3, #72	@ 0x48
 800199e:	717b      	strb	r3, [r7, #5]
 80019a0:	2361      	movs	r3, #97	@ 0x61
 80019a2:	71bb      	strb	r3, [r7, #6]
 80019a4:	2370      	movs	r3, #112	@ 0x70
 80019a6:	71fb      	strb	r3, [r7, #7]
 80019a8:	2374      	movs	r3, #116	@ 0x74
 80019aa:	723b      	strb	r3, [r7, #8]
 80019ac:	2369      	movs	r3, #105	@ 0x69
 80019ae:	727b      	strb	r3, [r7, #9]
 80019b0:	2363      	movs	r3, #99	@ 0x63
 80019b2:	72bb      	strb	r3, [r7, #10]
 80019b4:	2320      	movs	r3, #32
 80019b6:	72fb      	strb	r3, [r7, #11]
 80019b8:	230d      	movs	r3, #13
 80019ba:	733b      	strb	r3, [r7, #12]
 80019bc:	23ff      	movs	r3, #255	@ 0xff
 80019be:	737b      	strb	r3, [r7, #13]
 80019c0:	2301      	movs	r3, #1
 80019c2:	73bb      	strb	r3, [r7, #14]
 80019c4:	2380      	movs	r3, #128	@ 0x80
 80019c6:	73fb      	strb	r3, [r7, #15]
 80019c8:	2300      	movs	r3, #0
 80019ca:	743b      	strb	r3, [r7, #16]
 80019cc:	23f4      	movs	r3, #244	@ 0xf4
 80019ce:	747b      	strb	r3, [r7, #17]
 80019d0:	2300      	movs	r3, #0
 80019d2:	74bb      	strb	r3, [r7, #18]
 80019d4:	2300      	movs	r3, #0
 80019d6:	74fb      	strb	r3, [r7, #19]
		0x80,
		0x00,
		0xF4,
		0x00,
		0x00,
		bdaddr[5], // BLE MAC START -MSB FIRST-
 80019d8:	4b28      	ldr	r3, [pc, #160]	@ (8001a7c <Set_DeviceConnectable+0x108>)
 80019da:	795b      	ldrb	r3, [r3, #5]
	uint8_t manuf_data[26] = {
 80019dc:	753b      	strb	r3, [r7, #20]
		bdaddr[4],
 80019de:	4b27      	ldr	r3, [pc, #156]	@ (8001a7c <Set_DeviceConnectable+0x108>)
 80019e0:	791b      	ldrb	r3, [r3, #4]
	uint8_t manuf_data[26] = {
 80019e2:	757b      	strb	r3, [r7, #21]
		bdaddr[3],
 80019e4:	4b25      	ldr	r3, [pc, #148]	@ (8001a7c <Set_DeviceConnectable+0x108>)
 80019e6:	78db      	ldrb	r3, [r3, #3]
	uint8_t manuf_data[26] = {
 80019e8:	75bb      	strb	r3, [r7, #22]
		bdaddr[2],
 80019ea:	4b24      	ldr	r3, [pc, #144]	@ (8001a7c <Set_DeviceConnectable+0x108>)
 80019ec:	789b      	ldrb	r3, [r3, #2]
	uint8_t manuf_data[26] = {
 80019ee:	75fb      	strb	r3, [r7, #23]
		bdaddr[1],
 80019f0:	4b22      	ldr	r3, [pc, #136]	@ (8001a7c <Set_DeviceConnectable+0x108>)
 80019f2:	785b      	ldrb	r3, [r3, #1]
	uint8_t manuf_data[26] = {
 80019f4:	763b      	strb	r3, [r7, #24]
		bdaddr[0] // BLE MAC STOP
 80019f6:	4b21      	ldr	r3, [pc, #132]	@ (8001a7c <Set_DeviceConnectable+0x108>)
 80019f8:	781b      	ldrb	r3, [r3, #0]
	uint8_t manuf_data[26] = {
 80019fa:	767b      	strb	r3, [r7, #25]
	};

	// Sensor fusion?
	manuf_data[18] |= 0x01;
 80019fc:	7cbb      	ldrb	r3, [r7, #18]
 80019fe:	f043 0301 	orr.w	r3, r3, #1
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	74bb      	strb	r3, [r7, #18]

	hci_le_set_scan_response_data(0, NULL);
 8001a06:	2100      	movs	r1, #0
 8001a08:	2000      	movs	r0, #0
 8001a0a:	f006 ff48 	bl	800889e <hci_le_set_scan_response_data>

	PRINT_DBG("Set General Discoverable Mode.\r\n");
 8001a0e:	481c      	ldr	r0, [pc, #112]	@ (8001a80 <Set_DeviceConnectable+0x10c>)
 8001a10:	f008 fd34 	bl	800a47c <puts>

	ret = aci_gap_set_discoverable(ADV_DATA_TYPE,
 8001a14:	2300      	movs	r3, #0
 8001a16:	9306      	str	r3, [sp, #24]
 8001a18:	2300      	movs	r3, #0
 8001a1a:	9305      	str	r3, [sp, #20]
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	9304      	str	r3, [sp, #16]
 8001a20:	2300      	movs	r3, #0
 8001a22:	9303      	str	r3, [sp, #12]
 8001a24:	f107 031c 	add.w	r3, r7, #28
 8001a28:	9302      	str	r3, [sp, #8]
 8001a2a:	2308      	movs	r3, #8
 8001a2c:	9301      	str	r3, [sp, #4]
 8001a2e:	2300      	movs	r3, #0
 8001a30:	9300      	str	r3, [sp, #0]
 8001a32:	2300      	movs	r3, #0
 8001a34:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001a38:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a3c:	2000      	movs	r0, #0
 8001a3e:	f006 ffa7 	bl	8008990 <aci_gap_set_discoverable>
 8001a42:	4603      	mov	r3, r0
 8001a44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
									ADV_INTERV_MIN, ADV_INTERV_MAX,
									PUBLIC_ADDR,
									NO_WHITE_LIST_USE,
									sizeof(local_name), local_name, 0, NULL, 0, 0);

	aci_gap_update_adv_data(26, manuf_data);
 8001a48:	463b      	mov	r3, r7
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	201a      	movs	r0, #26
 8001a4e:	f007 faec 	bl	800902a <aci_gap_update_adv_data>

	if (ret != BLE_STATUS_SUCCESS) {
 8001a52:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d006      	beq.n	8001a68 <Set_DeviceConnectable+0xf4>
		PRINT_DBG("aci_gap_set_discoverable() failed: 0x%02x\r\n", ret);
 8001a5a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4808      	ldr	r0, [pc, #32]	@ (8001a84 <Set_DeviceConnectable+0x110>)
 8001a62:	f008 fc9b 	bl	800a39c <iprintf>
	} else {
		PRINT_DBG("aci_gap_set_discoverable() success!\r\n");
	}

}
 8001a66:	e002      	b.n	8001a6e <Set_DeviceConnectable+0xfa>
		PRINT_DBG("aci_gap_set_discoverable() success!\r\n");
 8001a68:	4807      	ldr	r0, [pc, #28]	@ (8001a88 <Set_DeviceConnectable+0x114>)
 8001a6a:	f008 fd07 	bl	800a47c <puts>
}
 8001a6e:	bf00      	nop
 8001a70:	3728      	adds	r7, #40	@ 0x28
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	0800ba30 	.word	0x0800ba30
 8001a7c:	20000190 	.word	0x20000190
 8001a80:	0800b9bc 	.word	0x0800b9bc
 8001a84:	0800b9dc 	.word	0x0800b9dc
 8001a88:	0800ba08 	.word	0x0800ba08

08001a8c <APP_UserEvtRx>:
 * @param 	void* pointer to the ACI packet
 * @retval	none
 *
 */
void APP_UserEvtRx(void *pData)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b088      	sub	sp, #32
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
	uint32_t i;

	  hci_spi_pckt *hci_pckt = (hci_spi_pckt *)pData;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	61bb      	str	r3, [r7, #24]

	  if(hci_pckt->type == HCI_EVENT_PKT)
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	2b04      	cmp	r3, #4
 8001a9e:	d163      	bne.n	8001b68 <APP_UserEvtRx+0xdc>
	  {
	    hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	617b      	str	r3, [r7, #20]

	    if(event_pckt->evt == EVT_LE_META_EVENT)
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	2b3e      	cmp	r3, #62	@ 0x3e
 8001aac:	d11e      	bne.n	8001aec <APP_UserEvtRx+0x60>
	    {
	      evt_le_meta_event *evt = (void *)event_pckt->data;
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	3302      	adds	r3, #2
 8001ab2:	60fb      	str	r3, [r7, #12]

	      for (i = 0; i < (sizeof(hci_le_meta_events_table)/sizeof(hci_le_meta_events_table_type)); i++)
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	61fb      	str	r3, [r7, #28]
 8001ab8:	e014      	b.n	8001ae4 <APP_UserEvtRx+0x58>
	      {
	        if (evt->subevent == hci_le_meta_events_table[i].evt_code)
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4a2b      	ldr	r2, [pc, #172]	@ (8001b70 <APP_UserEvtRx+0xe4>)
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 8001ac8:	4299      	cmp	r1, r3
 8001aca:	d108      	bne.n	8001ade <APP_UserEvtRx+0x52>
	        {
	          hci_le_meta_events_table[i].process((void *)evt->data);
 8001acc:	4a28      	ldr	r2, [pc, #160]	@ (8001b70 <APP_UserEvtRx+0xe4>)
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	00db      	lsls	r3, r3, #3
 8001ad2:	4413      	add	r3, r2
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	68fa      	ldr	r2, [r7, #12]
 8001ad8:	3201      	adds	r2, #1
 8001ada:	4610      	mov	r0, r2
 8001adc:	4798      	blx	r3
	      for (i = 0; i < (sizeof(hci_le_meta_events_table)/sizeof(hci_le_meta_events_table_type)); i++)
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	61fb      	str	r3, [r7, #28]
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	2b09      	cmp	r3, #9
 8001ae8:	d9e7      	bls.n	8001aba <APP_UserEvtRx+0x2e>
	          hci_events_table[i].process((void *)event_pckt->data);
	        }
	      }
	    }
	  }
}
 8001aea:	e03d      	b.n	8001b68 <APP_UserEvtRx+0xdc>
	    else if(event_pckt->evt == EVT_VENDOR)
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	2bff      	cmp	r3, #255	@ 0xff
 8001af2:	d11e      	bne.n	8001b32 <APP_UserEvtRx+0xa6>
	      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	3302      	adds	r3, #2
 8001af8:	613b      	str	r3, [r7, #16]
	      for (i = 0; i < (sizeof(hci_vendor_specific_events_table)/sizeof(hci_vendor_specific_events_table_type)); i++)
 8001afa:	2300      	movs	r3, #0
 8001afc:	61fb      	str	r3, [r7, #28]
 8001afe:	e014      	b.n	8001b2a <APP_UserEvtRx+0x9e>
	        if (blue_evt->ecode == hci_vendor_specific_events_table[i].evt_code)
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	881b      	ldrh	r3, [r3, #0]
 8001b04:	b29a      	uxth	r2, r3
 8001b06:	491b      	ldr	r1, [pc, #108]	@ (8001b74 <APP_UserEvtRx+0xe8>)
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d108      	bne.n	8001b24 <APP_UserEvtRx+0x98>
	          hci_vendor_specific_events_table[i].process((void *)blue_evt->data);
 8001b12:	4a18      	ldr	r2, [pc, #96]	@ (8001b74 <APP_UserEvtRx+0xe8>)
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	00db      	lsls	r3, r3, #3
 8001b18:	4413      	add	r3, r2
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	693a      	ldr	r2, [r7, #16]
 8001b1e:	3202      	adds	r2, #2
 8001b20:	4610      	mov	r0, r2
 8001b22:	4798      	blx	r3
	      for (i = 0; i < (sizeof(hci_vendor_specific_events_table)/sizeof(hci_vendor_specific_events_table_type)); i++)
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	3301      	adds	r3, #1
 8001b28:	61fb      	str	r3, [r7, #28]
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	2b2a      	cmp	r3, #42	@ 0x2a
 8001b2e:	d9e7      	bls.n	8001b00 <APP_UserEvtRx+0x74>
}
 8001b30:	e01a      	b.n	8001b68 <APP_UserEvtRx+0xdc>
	      for (i = 0; i < (sizeof(hci_events_table)/sizeof(hci_events_table_type)); i++)
 8001b32:	2300      	movs	r3, #0
 8001b34:	61fb      	str	r3, [r7, #28]
 8001b36:	e014      	b.n	8001b62 <APP_UserEvtRx+0xd6>
	        if (event_pckt->evt == hci_events_table[i].evt_code)
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4a0e      	ldr	r2, [pc, #56]	@ (8001b78 <APP_UserEvtRx+0xec>)
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 8001b46:	4299      	cmp	r1, r3
 8001b48:	d108      	bne.n	8001b5c <APP_UserEvtRx+0xd0>
	          hci_events_table[i].process((void *)event_pckt->data);
 8001b4a:	4a0b      	ldr	r2, [pc, #44]	@ (8001b78 <APP_UserEvtRx+0xec>)
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	00db      	lsls	r3, r3, #3
 8001b50:	4413      	add	r3, r2
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	697a      	ldr	r2, [r7, #20]
 8001b56:	3202      	adds	r2, #2
 8001b58:	4610      	mov	r0, r2
 8001b5a:	4798      	blx	r3
	      for (i = 0; i < (sizeof(hci_events_table)/sizeof(hci_events_table_type)); i++)
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	3301      	adds	r3, #1
 8001b60:	61fb      	str	r3, [r7, #28]
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	2b06      	cmp	r3, #6
 8001b66:	d9e7      	bls.n	8001b38 <APP_UserEvtRx+0xac>
}
 8001b68:	bf00      	nop
 8001b6a:	3720      	adds	r7, #32
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	0800c334 	.word	0x0800c334
 8001b74:	0800c384 	.word	0x0800c384
 8001b78:	0800c2fc 	.word	0x0800c2fc

08001b7c <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8001b82:	2300      	movs	r3, #0
 8001b84:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 8001b86:	4b12      	ldr	r3, [pc, #72]	@ (8001bd0 <BSP_SPI1_Init+0x54>)
 8001b88:	4a12      	ldr	r2, [pc, #72]	@ (8001bd4 <BSP_SPI1_Init+0x58>)
 8001b8a:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 8001b8c:	4b12      	ldr	r3, [pc, #72]	@ (8001bd8 <BSP_SPI1_Init+0x5c>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	1c5a      	adds	r2, r3, #1
 8001b92:	4911      	ldr	r1, [pc, #68]	@ (8001bd8 <BSP_SPI1_Init+0x5c>)
 8001b94:	600a      	str	r2, [r1, #0]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d114      	bne.n	8001bc4 <BSP_SPI1_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8001b9a:	480d      	ldr	r0, [pc, #52]	@ (8001bd0 <BSP_SPI1_Init+0x54>)
 8001b9c:	f003 fae8 	bl	8005170 <HAL_SPI_GetState>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d10e      	bne.n	8001bc4 <BSP_SPI1_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI1_MspInit(&hspi1);
 8001ba6:	480a      	ldr	r0, [pc, #40]	@ (8001bd0 <BSP_SPI1_Init+0x54>)
 8001ba8:	f000 f882 	bl	8001cb0 <SPI1_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d108      	bne.n	8001bc4 <BSP_SPI1_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI1_Init(&hspi1) != HAL_OK)
 8001bb2:	4807      	ldr	r0, [pc, #28]	@ (8001bd0 <BSP_SPI1_Init+0x54>)
 8001bb4:	f000 f83a 	bl	8001c2c <MX_SPI1_Init>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d002      	beq.n	8001bc4 <BSP_SPI1_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8001bbe:	f06f 0307 	mvn.w	r3, #7
 8001bc2:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 8001bc4:	687b      	ldr	r3, [r7, #4]
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	200001c8 	.word	0x200001c8
 8001bd4:	40013000 	.word	0x40013000
 8001bd8:	2000022c 	.word	0x2000022c

08001bdc <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b088      	sub	sp, #32
 8001be0:	af02      	add	r7, sp, #8
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	60b9      	str	r1, [r7, #8]
 8001be6:	4613      	mov	r3, r2
 8001be8:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001bea:	2300      	movs	r3, #0
 8001bec:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8001bee:	88fb      	ldrh	r3, [r7, #6]
 8001bf0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001bf4:	9200      	str	r2, [sp, #0]
 8001bf6:	68ba      	ldr	r2, [r7, #8]
 8001bf8:	68f9      	ldr	r1, [r7, #12]
 8001bfa:	4807      	ldr	r0, [pc, #28]	@ (8001c18 <BSP_SPI1_SendRecv+0x3c>)
 8001bfc:	f003 f899 	bl	8004d32 <HAL_SPI_TransmitReceive>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d002      	beq.n	8001c0c <BSP_SPI1_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8001c06:	f06f 0305 	mvn.w	r3, #5
 8001c0a:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8001c0c:	697b      	ldr	r3, [r7, #20]
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3718      	adds	r7, #24
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	200001c8 	.word	0x200001c8

08001c1c <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001c20:	f000 ff9a 	bl	8002b58 <HAL_GetTick>
 8001c24:	4603      	mov	r3, r0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	bd80      	pop	{r7, pc}
	...

08001c2c <MX_SPI1_Init>:

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001c34:	2300      	movs	r3, #0
 8001c36:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI1;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	4a1c      	ldr	r2, [pc, #112]	@ (8001cac <MX_SPI1_Init+0x80>)
 8001c3c:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001c44:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001c52:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c66:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2210      	movs	r2, #16
 8001c6c:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi->Init.CRCPolynomial = 7;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2207      	movs	r2, #7
 8001c84:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f002 ffa0 	bl	8004bd8 <HAL_SPI_Init>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <MX_SPI1_Init+0x76>
  {
    ret = HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3710      	adds	r7, #16
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40013000 	.word	0x40013000

08001cb0 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b08a      	sub	sp, #40	@ 0x28
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001cb8:	4b27      	ldr	r3, [pc, #156]	@ (8001d58 <SPI1_MspInit+0xa8>)
 8001cba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cbc:	4a26      	ldr	r2, [pc, #152]	@ (8001d58 <SPI1_MspInit+0xa8>)
 8001cbe:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001cc2:	6613      	str	r3, [r2, #96]	@ 0x60
 8001cc4:	4b24      	ldr	r3, [pc, #144]	@ (8001d58 <SPI1_MspInit+0xa8>)
 8001cc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cc8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ccc:	613b      	str	r3, [r7, #16]
 8001cce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd0:	4b21      	ldr	r3, [pc, #132]	@ (8001d58 <SPI1_MspInit+0xa8>)
 8001cd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cd4:	4a20      	ldr	r2, [pc, #128]	@ (8001d58 <SPI1_MspInit+0xa8>)
 8001cd6:	f043 0301 	orr.w	r3, r3, #1
 8001cda:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cdc:	4b1e      	ldr	r3, [pc, #120]	@ (8001d58 <SPI1_MspInit+0xa8>)
 8001cde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ce0:	f003 0301 	and.w	r3, r3, #1
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8001ce8:	2320      	movs	r3, #32
 8001cea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cec:	2302      	movs	r3, #2
 8001cee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 8001cf8:	2305      	movs	r3, #5
 8001cfa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8001cfc:	f107 0314 	add.w	r3, r7, #20
 8001d00:	4619      	mov	r1, r3
 8001d02:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d06:	f001 f8f9 	bl	8002efc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8001d0a:	2340      	movs	r3, #64	@ 0x40
 8001d0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d12:	2300      	movs	r3, #0
 8001d14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d16:	2303      	movs	r3, #3
 8001d18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8001d1a:	2305      	movs	r3, #5
 8001d1c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8001d1e:	f107 0314 	add.w	r3, r7, #20
 8001d22:	4619      	mov	r1, r3
 8001d24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d28:	f001 f8e8 	bl	8002efc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8001d2c:	2380      	movs	r3, #128	@ 0x80
 8001d2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d30:	2302      	movs	r3, #2
 8001d32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d34:	2300      	movs	r3, #0
 8001d36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 8001d3c:	2305      	movs	r3, #5
 8001d3e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8001d40:	f107 0314 	add.w	r3, r7, #20
 8001d44:	4619      	mov	r1, r3
 8001d46:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d4a:	f001 f8d7 	bl	8002efc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 8001d4e:	bf00      	nop
 8001d50:	3728      	adds	r7, #40	@ 0x28
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	40021000 	.word	0x40021000

08001d5c <change_pwm_pulse>:
static void MX_TIM1_Init(void);
static void MX_TIM16_Init(void);
/* USER CODE BEGIN PFP */


void change_pwm_pulse(TIM_HandleTypeDef* tim, uint32_t channel, uint16_t pulse) {
 8001d5c:	b480      	push	{r7}
 8001d5e:	b085      	sub	sp, #20
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	4613      	mov	r3, r2
 8001d68:	80fb      	strh	r3, [r7, #6]

	__HAL_TIM_SET_COMPARE(tim, channel, pulse);
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d104      	bne.n	8001d7a <change_pwm_pulse+0x1e>
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	88fa      	ldrh	r2, [r7, #6]
 8001d76:	635a      	str	r2, [r3, #52]	@ 0x34

}
 8001d78:	e023      	b.n	8001dc2 <change_pwm_pulse+0x66>
	__HAL_TIM_SET_COMPARE(tim, channel, pulse);
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	2b04      	cmp	r3, #4
 8001d7e:	d104      	bne.n	8001d8a <change_pwm_pulse+0x2e>
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	88fb      	ldrh	r3, [r7, #6]
 8001d86:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001d88:	e01b      	b.n	8001dc2 <change_pwm_pulse+0x66>
	__HAL_TIM_SET_COMPARE(tim, channel, pulse);
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	2b08      	cmp	r3, #8
 8001d8e:	d104      	bne.n	8001d9a <change_pwm_pulse+0x3e>
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	88fb      	ldrh	r3, [r7, #6]
 8001d96:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001d98:	e013      	b.n	8001dc2 <change_pwm_pulse+0x66>
	__HAL_TIM_SET_COMPARE(tim, channel, pulse);
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	2b0c      	cmp	r3, #12
 8001d9e:	d104      	bne.n	8001daa <change_pwm_pulse+0x4e>
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	88fb      	ldrh	r3, [r7, #6]
 8001da6:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001da8:	e00b      	b.n	8001dc2 <change_pwm_pulse+0x66>
	__HAL_TIM_SET_COMPARE(tim, channel, pulse);
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	2b10      	cmp	r3, #16
 8001dae:	d104      	bne.n	8001dba <change_pwm_pulse+0x5e>
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	88fb      	ldrh	r3, [r7, #6]
 8001db6:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8001db8:	e003      	b.n	8001dc2 <change_pwm_pulse+0x66>
	__HAL_TIM_SET_COMPARE(tim, channel, pulse);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	88fb      	ldrh	r3, [r7, #6]
 8001dc0:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 8001dc2:	bf00      	nop
 8001dc4:	3714      	adds	r7, #20
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr

08001dce <change_pwm_pulse_2>:

void change_pwm_pulse_2(TIM_HandleTypeDef* tim, uint32_t channel, uint32_t pulse) {
 8001dce:	b480      	push	{r7}
 8001dd0:	b085      	sub	sp, #20
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	60f8      	str	r0, [r7, #12]
 8001dd6:	60b9      	str	r1, [r7, #8]
 8001dd8:	607a      	str	r2, [r7, #4]

	__HAL_TIM_SET_COMPARE(tim, channel, pulse);
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d104      	bne.n	8001dea <change_pwm_pulse_2+0x1c>
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	635a      	str	r2, [r3, #52]	@ 0x34

}
 8001de8:	e023      	b.n	8001e32 <change_pwm_pulse_2+0x64>
	__HAL_TIM_SET_COMPARE(tim, channel, pulse);
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	2b04      	cmp	r3, #4
 8001dee:	d104      	bne.n	8001dfa <change_pwm_pulse_2+0x2c>
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001df8:	e01b      	b.n	8001e32 <change_pwm_pulse_2+0x64>
	__HAL_TIM_SET_COMPARE(tim, channel, pulse);
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	2b08      	cmp	r3, #8
 8001dfe:	d104      	bne.n	8001e0a <change_pwm_pulse_2+0x3c>
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001e08:	e013      	b.n	8001e32 <change_pwm_pulse_2+0x64>
	__HAL_TIM_SET_COMPARE(tim, channel, pulse);
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	2b0c      	cmp	r3, #12
 8001e0e:	d104      	bne.n	8001e1a <change_pwm_pulse_2+0x4c>
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001e18:	e00b      	b.n	8001e32 <change_pwm_pulse_2+0x64>
	__HAL_TIM_SET_COMPARE(tim, channel, pulse);
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	2b10      	cmp	r3, #16
 8001e1e:	d104      	bne.n	8001e2a <change_pwm_pulse_2+0x5c>
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8001e28:	e003      	b.n	8001e32 <change_pwm_pulse_2+0x64>
	__HAL_TIM_SET_COMPARE(tim, channel, pulse);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 8001e32:	bf00      	nop
 8001e34:	3714      	adds	r7, #20
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
	...

08001e40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e44:	f000 fe1f 	bl	8002a86 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e48:	f000 f840 	bl	8001ecc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e4c:	f000 fa46 	bl	80022dc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001e50:	f000 f8ae 	bl	8001fb0 <MX_USART3_UART_Init>
  MX_LPUART1_UART_Init();
 8001e54:	f000 f880 	bl	8001f58 <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 8001e58:	f000 f966 	bl	8002128 <MX_TIM2_Init>
  MX_TIM1_Init();
 8001e5c:	f000 f8d8 	bl	8002010 <MX_TIM1_Init>
  MX_TIM16_Init();
 8001e60:	f000 f9c6 	bl	80021f0 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2); // First Grid PWM
 8001e64:	4816      	ldr	r0, [pc, #88]	@ (8001ec0 <main+0x80>)
 8001e66:	f003 fb4d 	bl	8005504 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8001e6a:	4815      	ldr	r0, [pc, #84]	@ (8001ec0 <main+0x80>)
 8001e6c:	f003 fbb2 	bl	80055d4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001e70:	210c      	movs	r1, #12
 8001e72:	4813      	ldr	r0, [pc, #76]	@ (8001ec0 <main+0x80>)
 8001e74:	f003 fc76 	bl	8005764 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start(&htim2); // Second Grid PWM
 8001e78:	4811      	ldr	r0, [pc, #68]	@ (8001ec0 <main+0x80>)
 8001e7a:	f003 fb43 	bl	8005504 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8001e7e:	4810      	ldr	r0, [pc, #64]	@ (8001ec0 <main+0x80>)
 8001e80:	f003 fba8 	bl	80055d4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001e84:	2108      	movs	r1, #8
 8001e86:	480e      	ldr	r0, [pc, #56]	@ (8001ec0 <main+0x80>)
 8001e88:	f003 fc6c 	bl	8005764 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start(&htim1); // Third Grid PWM
 8001e8c:	480d      	ldr	r0, [pc, #52]	@ (8001ec4 <main+0x84>)
 8001e8e:	f003 fb39 	bl	8005504 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim1);
 8001e92:	480c      	ldr	r0, [pc, #48]	@ (8001ec4 <main+0x84>)
 8001e94:	f003 fb9e 	bl	80055d4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001e98:	210c      	movs	r1, #12
 8001e9a:	480a      	ldr	r0, [pc, #40]	@ (8001ec4 <main+0x84>)
 8001e9c:	f003 fc62 	bl	8005764 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start(&htim16); // 4th Grid PWM
 8001ea0:	4809      	ldr	r0, [pc, #36]	@ (8001ec8 <main+0x88>)
 8001ea2:	f003 fb2f 	bl	8005504 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim16);
 8001ea6:	4808      	ldr	r0, [pc, #32]	@ (8001ec8 <main+0x88>)
 8001ea8:	f003 fb94 	bl	80055d4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8001eac:	2100      	movs	r1, #0
 8001eae:	4806      	ldr	r0, [pc, #24]	@ (8001ec8 <main+0x88>)
 8001eb0:	f003 fc58 	bl	8005764 <HAL_TIM_PWM_Start>

  MX_BlueNRG_2_Init();
 8001eb4:	f7fe ff5e 	bl	8000d74 <MX_BlueNRG_2_Init>
    /* USER CODE BEGIN 3 */
	  //printf("Hello world");
	  //HAL_Delay(200);


	  MX_BlueNRG_2_Process();
 8001eb8:	f7fe ff90 	bl	8000ddc <MX_BlueNRG_2_Process>
 8001ebc:	e7fc      	b.n	8001eb8 <main+0x78>
 8001ebe:	bf00      	nop
 8001ec0:	2000038c 	.word	0x2000038c
 8001ec4:	20000340 	.word	0x20000340
 8001ec8:	200003d8 	.word	0x200003d8

08001ecc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b096      	sub	sp, #88	@ 0x58
 8001ed0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ed2:	f107 0314 	add.w	r3, r7, #20
 8001ed6:	2244      	movs	r2, #68	@ 0x44
 8001ed8:	2100      	movs	r1, #0
 8001eda:	4618      	mov	r0, r3
 8001edc:	f008 fbae 	bl	800a63c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ee0:	463b      	mov	r3, r7
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	601a      	str	r2, [r3, #0]
 8001ee6:	605a      	str	r2, [r3, #4]
 8001ee8:	609a      	str	r2, [r3, #8]
 8001eea:	60da      	str	r2, [r3, #12]
 8001eec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001eee:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001ef2:	f001 fb03 	bl	80034fc <HAL_PWREx_ControlVoltageScaling>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001efc:	f000 faf8 	bl	80024f0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001f00:	2310      	movs	r3, #16
 8001f02:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001f04:	2301      	movs	r3, #1
 8001f06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001f0c:	2360      	movs	r3, #96	@ 0x60
 8001f0e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001f10:	2300      	movs	r3, #0
 8001f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f14:	f107 0314 	add.w	r3, r7, #20
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f001 fb55 	bl	80035c8 <HAL_RCC_OscConfig>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001f24:	f000 fae4 	bl	80024f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f28:	230f      	movs	r3, #15
 8001f2a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f30:	2300      	movs	r3, #0
 8001f32:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f34:	2300      	movs	r3, #0
 8001f36:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001f3c:	463b      	mov	r3, r7
 8001f3e:	2100      	movs	r1, #0
 8001f40:	4618      	mov	r0, r3
 8001f42:	f001 ff5b 	bl	8003dfc <HAL_RCC_ClockConfig>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001f4c:	f000 fad0 	bl	80024f0 <Error_Handler>
  }
}
 8001f50:	bf00      	nop
 8001f52:	3758      	adds	r7, #88	@ 0x58
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001f5c:	4b12      	ldr	r3, [pc, #72]	@ (8001fa8 <MX_LPUART1_UART_Init+0x50>)
 8001f5e:	4a13      	ldr	r2, [pc, #76]	@ (8001fac <MX_LPUART1_UART_Init+0x54>)
 8001f60:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001f62:	4b11      	ldr	r3, [pc, #68]	@ (8001fa8 <MX_LPUART1_UART_Init+0x50>)
 8001f64:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f68:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f6a:	4b0f      	ldr	r3, [pc, #60]	@ (8001fa8 <MX_LPUART1_UART_Init+0x50>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001f70:	4b0d      	ldr	r3, [pc, #52]	@ (8001fa8 <MX_LPUART1_UART_Init+0x50>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001f76:	4b0c      	ldr	r3, [pc, #48]	@ (8001fa8 <MX_LPUART1_UART_Init+0x50>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001f7c:	4b0a      	ldr	r3, [pc, #40]	@ (8001fa8 <MX_LPUART1_UART_Init+0x50>)
 8001f7e:	220c      	movs	r2, #12
 8001f80:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f82:	4b09      	ldr	r3, [pc, #36]	@ (8001fa8 <MX_LPUART1_UART_Init+0x50>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f88:	4b07      	ldr	r3, [pc, #28]	@ (8001fa8 <MX_LPUART1_UART_Init+0x50>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f8e:	4b06      	ldr	r3, [pc, #24]	@ (8001fa8 <MX_LPUART1_UART_Init+0x50>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001f94:	4804      	ldr	r0, [pc, #16]	@ (8001fa8 <MX_LPUART1_UART_Init+0x50>)
 8001f96:	f004 faa7 	bl	80064e8 <HAL_UART_Init>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8001fa0:	f000 faa6 	bl	80024f0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001fa4:	bf00      	nop
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	20000230 	.word	0x20000230
 8001fac:	40008000 	.word	0x40008000

08001fb0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001fb4:	4b14      	ldr	r3, [pc, #80]	@ (8002008 <MX_USART3_UART_Init+0x58>)
 8001fb6:	4a15      	ldr	r2, [pc, #84]	@ (800200c <MX_USART3_UART_Init+0x5c>)
 8001fb8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001fba:	4b13      	ldr	r3, [pc, #76]	@ (8002008 <MX_USART3_UART_Init+0x58>)
 8001fbc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001fc0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001fc2:	4b11      	ldr	r3, [pc, #68]	@ (8002008 <MX_USART3_UART_Init+0x58>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001fc8:	4b0f      	ldr	r3, [pc, #60]	@ (8002008 <MX_USART3_UART_Init+0x58>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001fce:	4b0e      	ldr	r3, [pc, #56]	@ (8002008 <MX_USART3_UART_Init+0x58>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001fd4:	4b0c      	ldr	r3, [pc, #48]	@ (8002008 <MX_USART3_UART_Init+0x58>)
 8001fd6:	220c      	movs	r2, #12
 8001fd8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fda:	4b0b      	ldr	r3, [pc, #44]	@ (8002008 <MX_USART3_UART_Init+0x58>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fe0:	4b09      	ldr	r3, [pc, #36]	@ (8002008 <MX_USART3_UART_Init+0x58>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fe6:	4b08      	ldr	r3, [pc, #32]	@ (8002008 <MX_USART3_UART_Init+0x58>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fec:	4b06      	ldr	r3, [pc, #24]	@ (8002008 <MX_USART3_UART_Init+0x58>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ff2:	4805      	ldr	r0, [pc, #20]	@ (8002008 <MX_USART3_UART_Init+0x58>)
 8001ff4:	f004 fa78 	bl	80064e8 <HAL_UART_Init>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001ffe:	f000 fa77 	bl	80024f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002002:	bf00      	nop
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	200002b8 	.word	0x200002b8
 800200c:	40004800 	.word	0x40004800

08002010 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b096      	sub	sp, #88	@ 0x58
 8002014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002016:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800201a:	2200      	movs	r2, #0
 800201c:	601a      	str	r2, [r3, #0]
 800201e:	605a      	str	r2, [r3, #4]
 8002020:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002022:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002026:	2200      	movs	r2, #0
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	605a      	str	r2, [r3, #4]
 800202c:	609a      	str	r2, [r3, #8]
 800202e:	60da      	str	r2, [r3, #12]
 8002030:	611a      	str	r2, [r3, #16]
 8002032:	615a      	str	r2, [r3, #20]
 8002034:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002036:	1d3b      	adds	r3, r7, #4
 8002038:	222c      	movs	r2, #44	@ 0x2c
 800203a:	2100      	movs	r1, #0
 800203c:	4618      	mov	r0, r3
 800203e:	f008 fafd 	bl	800a63c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002042:	4b37      	ldr	r3, [pc, #220]	@ (8002120 <MX_TIM1_Init+0x110>)
 8002044:	4a37      	ldr	r2, [pc, #220]	@ (8002124 <MX_TIM1_Init+0x114>)
 8002046:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3;
 8002048:	4b35      	ldr	r3, [pc, #212]	@ (8002120 <MX_TIM1_Init+0x110>)
 800204a:	2203      	movs	r2, #3
 800204c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800204e:	4b34      	ldr	r3, [pc, #208]	@ (8002120 <MX_TIM1_Init+0x110>)
 8002050:	2200      	movs	r2, #0
 8002052:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 24;
 8002054:	4b32      	ldr	r3, [pc, #200]	@ (8002120 <MX_TIM1_Init+0x110>)
 8002056:	2218      	movs	r2, #24
 8002058:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800205a:	4b31      	ldr	r3, [pc, #196]	@ (8002120 <MX_TIM1_Init+0x110>)
 800205c:	2200      	movs	r2, #0
 800205e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002060:	4b2f      	ldr	r3, [pc, #188]	@ (8002120 <MX_TIM1_Init+0x110>)
 8002062:	2200      	movs	r2, #0
 8002064:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002066:	4b2e      	ldr	r3, [pc, #184]	@ (8002120 <MX_TIM1_Init+0x110>)
 8002068:	2200      	movs	r2, #0
 800206a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800206c:	482c      	ldr	r0, [pc, #176]	@ (8002120 <MX_TIM1_Init+0x110>)
 800206e:	f003 fb21 	bl	80056b4 <HAL_TIM_PWM_Init>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8002078:	f000 fa3a 	bl	80024f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800207c:	2300      	movs	r3, #0
 800207e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002080:	2300      	movs	r3, #0
 8002082:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002084:	2300      	movs	r3, #0
 8002086:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002088:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800208c:	4619      	mov	r1, r3
 800208e:	4824      	ldr	r0, [pc, #144]	@ (8002120 <MX_TIM1_Init+0x110>)
 8002090:	f004 f924 	bl	80062dc <HAL_TIMEx_MasterConfigSynchronization>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 800209a:	f000 fa29 	bl	80024f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800209e:	2360      	movs	r3, #96	@ 0x60
 80020a0:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 23;
 80020a2:	2317      	movs	r3, #23
 80020a4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020a6:	2300      	movs	r3, #0
 80020a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020aa:	2300      	movs	r3, #0
 80020ac:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80020ae:	2300      	movs	r3, #0
 80020b0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80020b2:	2300      	movs	r3, #0
 80020b4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80020b6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80020ba:	220c      	movs	r2, #12
 80020bc:	4619      	mov	r1, r3
 80020be:	4818      	ldr	r0, [pc, #96]	@ (8002120 <MX_TIM1_Init+0x110>)
 80020c0:	f003 fc56 	bl	8005970 <HAL_TIM_PWM_ConfigChannel>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80020ca:	f000 fa11 	bl	80024f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80020ce:	2300      	movs	r3, #0
 80020d0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80020d2:	2300      	movs	r3, #0
 80020d4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80020d6:	2300      	movs	r3, #0
 80020d8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80020da:	2300      	movs	r3, #0
 80020dc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80020de:	2300      	movs	r3, #0
 80020e0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80020e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80020e6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80020e8:	2300      	movs	r3, #0
 80020ea:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80020ec:	2300      	movs	r3, #0
 80020ee:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80020f0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80020f4:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80020f6:	2300      	movs	r3, #0
 80020f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80020fa:	2300      	movs	r3, #0
 80020fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80020fe:	1d3b      	adds	r3, r7, #4
 8002100:	4619      	mov	r1, r3
 8002102:	4807      	ldr	r0, [pc, #28]	@ (8002120 <MX_TIM1_Init+0x110>)
 8002104:	f004 f972 	bl	80063ec <HAL_TIMEx_ConfigBreakDeadTime>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 800210e:	f000 f9ef 	bl	80024f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002112:	4803      	ldr	r0, [pc, #12]	@ (8002120 <MX_TIM1_Init+0x110>)
 8002114:	f000 fb0e 	bl	8002734 <HAL_TIM_MspPostInit>

}
 8002118:	bf00      	nop
 800211a:	3758      	adds	r7, #88	@ 0x58
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	20000340 	.word	0x20000340
 8002124:	40012c00 	.word	0x40012c00

08002128 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b08a      	sub	sp, #40	@ 0x28
 800212c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800212e:	f107 031c 	add.w	r3, r7, #28
 8002132:	2200      	movs	r2, #0
 8002134:	601a      	str	r2, [r3, #0]
 8002136:	605a      	str	r2, [r3, #4]
 8002138:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800213a:	463b      	mov	r3, r7
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]
 8002140:	605a      	str	r2, [r3, #4]
 8002142:	609a      	str	r2, [r3, #8]
 8002144:	60da      	str	r2, [r3, #12]
 8002146:	611a      	str	r2, [r3, #16]
 8002148:	615a      	str	r2, [r3, #20]
 800214a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800214c:	4b27      	ldr	r3, [pc, #156]	@ (80021ec <MX_TIM2_Init+0xc4>)
 800214e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002152:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3;
 8002154:	4b25      	ldr	r3, [pc, #148]	@ (80021ec <MX_TIM2_Init+0xc4>)
 8002156:	2203      	movs	r2, #3
 8002158:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800215a:	4b24      	ldr	r3, [pc, #144]	@ (80021ec <MX_TIM2_Init+0xc4>)
 800215c:	2200      	movs	r2, #0
 800215e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 24;
 8002160:	4b22      	ldr	r3, [pc, #136]	@ (80021ec <MX_TIM2_Init+0xc4>)
 8002162:	2218      	movs	r2, #24
 8002164:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002166:	4b21      	ldr	r3, [pc, #132]	@ (80021ec <MX_TIM2_Init+0xc4>)
 8002168:	2200      	movs	r2, #0
 800216a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800216c:	4b1f      	ldr	r3, [pc, #124]	@ (80021ec <MX_TIM2_Init+0xc4>)
 800216e:	2200      	movs	r2, #0
 8002170:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002172:	481e      	ldr	r0, [pc, #120]	@ (80021ec <MX_TIM2_Init+0xc4>)
 8002174:	f003 fa9e 	bl	80056b4 <HAL_TIM_PWM_Init>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800217e:	f000 f9b7 	bl	80024f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002182:	2300      	movs	r3, #0
 8002184:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002186:	2300      	movs	r3, #0
 8002188:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800218a:	f107 031c 	add.w	r3, r7, #28
 800218e:	4619      	mov	r1, r3
 8002190:	4816      	ldr	r0, [pc, #88]	@ (80021ec <MX_TIM2_Init+0xc4>)
 8002192:	f004 f8a3 	bl	80062dc <HAL_TIMEx_MasterConfigSynchronization>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800219c:	f000 f9a8 	bl	80024f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021a0:	2360      	movs	r3, #96	@ 0x60
 80021a2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 23;
 80021a4:	2317      	movs	r3, #23
 80021a6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021a8:	2300      	movs	r3, #0
 80021aa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021ac:	2300      	movs	r3, #0
 80021ae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80021b0:	463b      	mov	r3, r7
 80021b2:	2208      	movs	r2, #8
 80021b4:	4619      	mov	r1, r3
 80021b6:	480d      	ldr	r0, [pc, #52]	@ (80021ec <MX_TIM2_Init+0xc4>)
 80021b8:	f003 fbda 	bl	8005970 <HAL_TIM_PWM_ConfigChannel>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80021c2:	f000 f995 	bl	80024f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80021c6:	463b      	mov	r3, r7
 80021c8:	220c      	movs	r2, #12
 80021ca:	4619      	mov	r1, r3
 80021cc:	4807      	ldr	r0, [pc, #28]	@ (80021ec <MX_TIM2_Init+0xc4>)
 80021ce:	f003 fbcf 	bl	8005970 <HAL_TIM_PWM_ConfigChannel>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80021d8:	f000 f98a 	bl	80024f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80021dc:	4803      	ldr	r0, [pc, #12]	@ (80021ec <MX_TIM2_Init+0xc4>)
 80021de:	f000 faa9 	bl	8002734 <HAL_TIM_MspPostInit>

}
 80021e2:	bf00      	nop
 80021e4:	3728      	adds	r7, #40	@ 0x28
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	2000038c 	.word	0x2000038c

080021f0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b092      	sub	sp, #72	@ 0x48
 80021f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80021f6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80021fa:	2200      	movs	r2, #0
 80021fc:	601a      	str	r2, [r3, #0]
 80021fe:	605a      	str	r2, [r3, #4]
 8002200:	609a      	str	r2, [r3, #8]
 8002202:	60da      	str	r2, [r3, #12]
 8002204:	611a      	str	r2, [r3, #16]
 8002206:	615a      	str	r2, [r3, #20]
 8002208:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800220a:	463b      	mov	r3, r7
 800220c:	222c      	movs	r2, #44	@ 0x2c
 800220e:	2100      	movs	r1, #0
 8002210:	4618      	mov	r0, r3
 8002212:	f008 fa13 	bl	800a63c <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002216:	4b2f      	ldr	r3, [pc, #188]	@ (80022d4 <MX_TIM16_Init+0xe4>)
 8002218:	4a2f      	ldr	r2, [pc, #188]	@ (80022d8 <MX_TIM16_Init+0xe8>)
 800221a:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 3;
 800221c:	4b2d      	ldr	r3, [pc, #180]	@ (80022d4 <MX_TIM16_Init+0xe4>)
 800221e:	2203      	movs	r2, #3
 8002220:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002222:	4b2c      	ldr	r3, [pc, #176]	@ (80022d4 <MX_TIM16_Init+0xe4>)
 8002224:	2200      	movs	r2, #0
 8002226:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 24;
 8002228:	4b2a      	ldr	r3, [pc, #168]	@ (80022d4 <MX_TIM16_Init+0xe4>)
 800222a:	2218      	movs	r2, #24
 800222c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800222e:	4b29      	ldr	r3, [pc, #164]	@ (80022d4 <MX_TIM16_Init+0xe4>)
 8002230:	2200      	movs	r2, #0
 8002232:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002234:	4b27      	ldr	r3, [pc, #156]	@ (80022d4 <MX_TIM16_Init+0xe4>)
 8002236:	2200      	movs	r2, #0
 8002238:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800223a:	4b26      	ldr	r3, [pc, #152]	@ (80022d4 <MX_TIM16_Init+0xe4>)
 800223c:	2200      	movs	r2, #0
 800223e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002240:	4824      	ldr	r0, [pc, #144]	@ (80022d4 <MX_TIM16_Init+0xe4>)
 8002242:	f003 f907 	bl	8005454 <HAL_TIM_Base_Init>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 800224c:	f000 f950 	bl	80024f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8002250:	4820      	ldr	r0, [pc, #128]	@ (80022d4 <MX_TIM16_Init+0xe4>)
 8002252:	f003 fa2f 	bl	80056b4 <HAL_TIM_PWM_Init>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 800225c:	f000 f948 	bl	80024f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002260:	2360      	movs	r3, #96	@ 0x60
 8002262:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 23;
 8002264:	2317      	movs	r3, #23
 8002266:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002268:	2300      	movs	r3, #0
 800226a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800226c:	2300      	movs	r3, #0
 800226e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002270:	2300      	movs	r3, #0
 8002272:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002274:	2300      	movs	r3, #0
 8002276:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002278:	2300      	movs	r3, #0
 800227a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800227c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002280:	2200      	movs	r2, #0
 8002282:	4619      	mov	r1, r3
 8002284:	4813      	ldr	r0, [pc, #76]	@ (80022d4 <MX_TIM16_Init+0xe4>)
 8002286:	f003 fb73 	bl	8005970 <HAL_TIM_PWM_ConfigChannel>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <MX_TIM16_Init+0xa4>
  {
    Error_Handler();
 8002290:	f000 f92e 	bl	80024f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002294:	2300      	movs	r3, #0
 8002296:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002298:	2300      	movs	r3, #0
 800229a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800229c:	2300      	movs	r3, #0
 800229e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80022a0:	2300      	movs	r3, #0
 80022a2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80022a4:	2300      	movs	r3, #0
 80022a6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80022a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80022ac:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80022ae:	2300      	movs	r3, #0
 80022b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80022b2:	463b      	mov	r3, r7
 80022b4:	4619      	mov	r1, r3
 80022b6:	4807      	ldr	r0, [pc, #28]	@ (80022d4 <MX_TIM16_Init+0xe4>)
 80022b8:	f004 f898 	bl	80063ec <HAL_TIMEx_ConfigBreakDeadTime>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <MX_TIM16_Init+0xd6>
  {
    Error_Handler();
 80022c2:	f000 f915 	bl	80024f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80022c6:	4803      	ldr	r0, [pc, #12]	@ (80022d4 <MX_TIM16_Init+0xe4>)
 80022c8:	f000 fa34 	bl	8002734 <HAL_TIM_MspPostInit>

}
 80022cc:	bf00      	nop
 80022ce:	3748      	adds	r7, #72	@ 0x48
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	200003d8 	.word	0x200003d8
 80022d8:	40014400 	.word	0x40014400

080022dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b08c      	sub	sp, #48	@ 0x30
 80022e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e2:	f107 031c 	add.w	r3, r7, #28
 80022e6:	2200      	movs	r2, #0
 80022e8:	601a      	str	r2, [r3, #0]
 80022ea:	605a      	str	r2, [r3, #4]
 80022ec:	609a      	str	r2, [r3, #8]
 80022ee:	60da      	str	r2, [r3, #12]
 80022f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022f2:	4b61      	ldr	r3, [pc, #388]	@ (8002478 <MX_GPIO_Init+0x19c>)
 80022f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022f6:	4a60      	ldr	r2, [pc, #384]	@ (8002478 <MX_GPIO_Init+0x19c>)
 80022f8:	f043 0304 	orr.w	r3, r3, #4
 80022fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022fe:	4b5e      	ldr	r3, [pc, #376]	@ (8002478 <MX_GPIO_Init+0x19c>)
 8002300:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002302:	f003 0304 	and.w	r3, r3, #4
 8002306:	61bb      	str	r3, [r7, #24]
 8002308:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800230a:	4b5b      	ldr	r3, [pc, #364]	@ (8002478 <MX_GPIO_Init+0x19c>)
 800230c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800230e:	4a5a      	ldr	r2, [pc, #360]	@ (8002478 <MX_GPIO_Init+0x19c>)
 8002310:	f043 0301 	orr.w	r3, r3, #1
 8002314:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002316:	4b58      	ldr	r3, [pc, #352]	@ (8002478 <MX_GPIO_Init+0x19c>)
 8002318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	617b      	str	r3, [r7, #20]
 8002320:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002322:	4b55      	ldr	r3, [pc, #340]	@ (8002478 <MX_GPIO_Init+0x19c>)
 8002324:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002326:	4a54      	ldr	r2, [pc, #336]	@ (8002478 <MX_GPIO_Init+0x19c>)
 8002328:	f043 0320 	orr.w	r3, r3, #32
 800232c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800232e:	4b52      	ldr	r3, [pc, #328]	@ (8002478 <MX_GPIO_Init+0x19c>)
 8002330:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002332:	f003 0320 	and.w	r3, r3, #32
 8002336:	613b      	str	r3, [r7, #16]
 8002338:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800233a:	4b4f      	ldr	r3, [pc, #316]	@ (8002478 <MX_GPIO_Init+0x19c>)
 800233c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800233e:	4a4e      	ldr	r2, [pc, #312]	@ (8002478 <MX_GPIO_Init+0x19c>)
 8002340:	f043 0310 	orr.w	r3, r3, #16
 8002344:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002346:	4b4c      	ldr	r3, [pc, #304]	@ (8002478 <MX_GPIO_Init+0x19c>)
 8002348:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800234a:	f003 0310 	and.w	r3, r3, #16
 800234e:	60fb      	str	r3, [r7, #12]
 8002350:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002352:	4b49      	ldr	r3, [pc, #292]	@ (8002478 <MX_GPIO_Init+0x19c>)
 8002354:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002356:	4a48      	ldr	r2, [pc, #288]	@ (8002478 <MX_GPIO_Init+0x19c>)
 8002358:	f043 0302 	orr.w	r3, r3, #2
 800235c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800235e:	4b46      	ldr	r3, [pc, #280]	@ (8002478 <MX_GPIO_Init+0x19c>)
 8002360:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	60bb      	str	r3, [r7, #8]
 8002368:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800236a:	4b43      	ldr	r3, [pc, #268]	@ (8002478 <MX_GPIO_Init+0x19c>)
 800236c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800236e:	4a42      	ldr	r2, [pc, #264]	@ (8002478 <MX_GPIO_Init+0x19c>)
 8002370:	f043 0308 	orr.w	r3, r3, #8
 8002374:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002376:	4b40      	ldr	r3, [pc, #256]	@ (8002478 <MX_GPIO_Init+0x19c>)
 8002378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800237a:	f003 0308 	and.w	r3, r3, #8
 800237e:	607b      	str	r3, [r7, #4]
 8002380:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002382:	4b3d      	ldr	r3, [pc, #244]	@ (8002478 <MX_GPIO_Init+0x19c>)
 8002384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002386:	4a3c      	ldr	r2, [pc, #240]	@ (8002478 <MX_GPIO_Init+0x19c>)
 8002388:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800238c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800238e:	4b3a      	ldr	r3, [pc, #232]	@ (8002478 <MX_GPIO_Init+0x19c>)
 8002390:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002392:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002396:	603b      	str	r3, [r7, #0]
 8002398:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 800239a:	f001 f905 	bl	80035a8 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|LD1_Pin, GPIO_PIN_RESET);
 800239e:	2200      	movs	r2, #0
 80023a0:	2181      	movs	r1, #129	@ 0x81
 80023a2:	4836      	ldr	r0, [pc, #216]	@ (800247c <MX_GPIO_Init+0x1a0>)
 80023a4:	f001 f846 	bl	8003434 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_RESET);
 80023a8:	2200      	movs	r2, #0
 80023aa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80023ae:	4834      	ldr	r0, [pc, #208]	@ (8002480 <MX_GPIO_Init+0x1a4>)
 80023b0:	f001 f840 	bl	8003434 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80023b4:	2200      	movs	r2, #0
 80023b6:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 80023ba:	4832      	ldr	r0, [pc, #200]	@ (8002484 <MX_GPIO_Init+0x1a8>)
 80023bc:	f001 f83a 	bl	8003434 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80023c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80023c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80023c6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80023ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023cc:	2300      	movs	r3, #0
 80023ce:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80023d0:	f107 031c 	add.w	r3, r7, #28
 80023d4:	4619      	mov	r1, r3
 80023d6:	4829      	ldr	r0, [pc, #164]	@ (800247c <MX_GPIO_Init+0x1a0>)
 80023d8:	f000 fd90 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 LD1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD1_Pin;
 80023dc:	2381      	movs	r3, #129	@ 0x81
 80023de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023e0:	2301      	movs	r3, #1
 80023e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e4:	2300      	movs	r3, #0
 80023e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e8:	2300      	movs	r3, #0
 80023ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023ec:	f107 031c 	add.w	r3, r7, #28
 80023f0:	4619      	mov	r1, r3
 80023f2:	4822      	ldr	r0, [pc, #136]	@ (800247c <MX_GPIO_Init+0x1a0>)
 80023f4:	f000 fd82 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80023f8:	2308      	movs	r3, #8
 80023fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80023fc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002400:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002402:	2300      	movs	r3, #0
 8002404:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002406:	f107 031c 	add.w	r3, r7, #28
 800240a:	4619      	mov	r1, r3
 800240c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002410:	f000 fd74 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pin : PF13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002414:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002418:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800241a:	2301      	movs	r3, #1
 800241c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241e:	2300      	movs	r3, #0
 8002420:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002422:	2300      	movs	r3, #0
 8002424:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002426:	f107 031c 	add.w	r3, r7, #28
 800242a:	4619      	mov	r1, r3
 800242c:	4814      	ldr	r0, [pc, #80]	@ (8002480 <MX_GPIO_Init+0x1a4>)
 800242e:	f000 fd65 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8002432:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8002436:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002438:	2301      	movs	r3, #1
 800243a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243c:	2300      	movs	r3, #0
 800243e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002440:	2300      	movs	r3, #0
 8002442:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002444:	f107 031c 	add.w	r3, r7, #28
 8002448:	4619      	mov	r1, r3
 800244a:	480e      	ldr	r0, [pc, #56]	@ (8002484 <MX_GPIO_Init+0x1a8>)
 800244c:	f000 fd56 	bl	8002efc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002450:	2200      	movs	r2, #0
 8002452:	2100      	movs	r1, #0
 8002454:	2009      	movs	r0, #9
 8002456:	f000 fcae 	bl	8002db6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800245a:	2009      	movs	r0, #9
 800245c:	f000 fcc7 	bl	8002dee <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002460:	2200      	movs	r2, #0
 8002462:	2100      	movs	r1, #0
 8002464:	2028      	movs	r0, #40	@ 0x28
 8002466:	f000 fca6 	bl	8002db6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800246a:	2028      	movs	r0, #40	@ 0x28
 800246c:	f000 fcbf 	bl	8002dee <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002470:	bf00      	nop
 8002472:	3730      	adds	r7, #48	@ 0x30
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	40021000 	.word	0x40021000
 800247c:	48000800 	.word	0x48000800
 8002480:	48001400 	.word	0x48001400
 8002484:	48000400 	.word	0x48000400

08002488 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch) {
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8002490:	1d39      	adds	r1, r7, #4
 8002492:	f04f 33ff 	mov.w	r3, #4294967295
 8002496:	2201      	movs	r2, #1
 8002498:	4803      	ldr	r0, [pc, #12]	@ (80024a8 <__io_putchar+0x20>)
 800249a:	f004 f873 	bl	8006584 <HAL_UART_Transmit>
	return(ch);
 800249e:	687b      	ldr	r3, [r7, #4]
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3708      	adds	r7, #8
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	20000230 	.word	0x20000230

080024ac <_write>:

int _write(int file, char *ptr, int len) {
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b086      	sub	sp, #24
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
	int DataIdx;
	HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
 80024b8:	2180      	movs	r1, #128	@ 0x80
 80024ba:	480c      	ldr	r0, [pc, #48]	@ (80024ec <_write+0x40>)
 80024bc:	f000 ffd2 	bl	8003464 <HAL_GPIO_TogglePin>
	for (DataIdx = 0; DataIdx < len; DataIdx++){
 80024c0:	2300      	movs	r3, #0
 80024c2:	617b      	str	r3, [r7, #20]
 80024c4:	e009      	b.n	80024da <_write+0x2e>

		__io_putchar(*ptr++);
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	1c5a      	adds	r2, r3, #1
 80024ca:	60ba      	str	r2, [r7, #8]
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7ff ffda 	bl	8002488 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++){
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	3301      	adds	r3, #1
 80024d8:	617b      	str	r3, [r7, #20]
 80024da:	697a      	ldr	r2, [r7, #20]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	429a      	cmp	r2, r3
 80024e0:	dbf1      	blt.n	80024c6 <_write+0x1a>
	}

}
 80024e2:	bf00      	nop
 80024e4:	4618      	mov	r0, r3
 80024e6:	3718      	adds	r7, #24
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	48000400 	.word	0x48000400

080024f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024f4:	b672      	cpsid	i
}
 80024f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024f8:	bf00      	nop
 80024fa:	e7fd      	b.n	80024f8 <Error_Handler+0x8>

080024fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002502:	4b0f      	ldr	r3, [pc, #60]	@ (8002540 <HAL_MspInit+0x44>)
 8002504:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002506:	4a0e      	ldr	r2, [pc, #56]	@ (8002540 <HAL_MspInit+0x44>)
 8002508:	f043 0301 	orr.w	r3, r3, #1
 800250c:	6613      	str	r3, [r2, #96]	@ 0x60
 800250e:	4b0c      	ldr	r3, [pc, #48]	@ (8002540 <HAL_MspInit+0x44>)
 8002510:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	607b      	str	r3, [r7, #4]
 8002518:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800251a:	4b09      	ldr	r3, [pc, #36]	@ (8002540 <HAL_MspInit+0x44>)
 800251c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800251e:	4a08      	ldr	r2, [pc, #32]	@ (8002540 <HAL_MspInit+0x44>)
 8002520:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002524:	6593      	str	r3, [r2, #88]	@ 0x58
 8002526:	4b06      	ldr	r3, [pc, #24]	@ (8002540 <HAL_MspInit+0x44>)
 8002528:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800252a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800252e:	603b      	str	r3, [r7, #0]
 8002530:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002532:	bf00      	nop
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	40021000 	.word	0x40021000

08002544 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b0ae      	sub	sp, #184	@ 0xb8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800254c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	605a      	str	r2, [r3, #4]
 8002556:	609a      	str	r2, [r3, #8]
 8002558:	60da      	str	r2, [r3, #12]
 800255a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800255c:	f107 0318 	add.w	r3, r7, #24
 8002560:	228c      	movs	r2, #140	@ 0x8c
 8002562:	2100      	movs	r1, #0
 8002564:	4618      	mov	r0, r3
 8002566:	f008 f869 	bl	800a63c <memset>
  if(huart->Instance==LPUART1)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a43      	ldr	r2, [pc, #268]	@ (800267c <HAL_UART_MspInit+0x138>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d13e      	bne.n	80025f2 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002574:	2320      	movs	r3, #32
 8002576:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002578:	2300      	movs	r3, #0
 800257a:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800257c:	f107 0318 	add.w	r3, r7, #24
 8002580:	4618      	mov	r0, r3
 8002582:	f001 fe5f 	bl	8004244 <HAL_RCCEx_PeriphCLKConfig>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800258c:	f7ff ffb0 	bl	80024f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002590:	4b3b      	ldr	r3, [pc, #236]	@ (8002680 <HAL_UART_MspInit+0x13c>)
 8002592:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002594:	4a3a      	ldr	r2, [pc, #232]	@ (8002680 <HAL_UART_MspInit+0x13c>)
 8002596:	f043 0301 	orr.w	r3, r3, #1
 800259a:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800259c:	4b38      	ldr	r3, [pc, #224]	@ (8002680 <HAL_UART_MspInit+0x13c>)
 800259e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025a0:	f003 0301 	and.w	r3, r3, #1
 80025a4:	617b      	str	r3, [r7, #20]
 80025a6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80025a8:	4b35      	ldr	r3, [pc, #212]	@ (8002680 <HAL_UART_MspInit+0x13c>)
 80025aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025ac:	4a34      	ldr	r2, [pc, #208]	@ (8002680 <HAL_UART_MspInit+0x13c>)
 80025ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80025b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025b4:	4b32      	ldr	r3, [pc, #200]	@ (8002680 <HAL_UART_MspInit+0x13c>)
 80025b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025bc:	613b      	str	r3, [r7, #16]
 80025be:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 80025c0:	f000 fff2 	bl	80035a8 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80025c4:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80025c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025cc:	2302      	movs	r3, #2
 80025ce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d2:	2300      	movs	r3, #0
 80025d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025d8:	2303      	movs	r3, #3
 80025da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80025de:	2308      	movs	r3, #8
 80025e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80025e4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80025e8:	4619      	mov	r1, r3
 80025ea:	4826      	ldr	r0, [pc, #152]	@ (8002684 <HAL_UART_MspInit+0x140>)
 80025ec:	f000 fc86 	bl	8002efc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80025f0:	e040      	b.n	8002674 <HAL_UART_MspInit+0x130>
  else if(huart->Instance==USART3)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a24      	ldr	r2, [pc, #144]	@ (8002688 <HAL_UART_MspInit+0x144>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d13b      	bne.n	8002674 <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80025fc:	2304      	movs	r3, #4
 80025fe:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002600:	2300      	movs	r3, #0
 8002602:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002604:	f107 0318 	add.w	r3, r7, #24
 8002608:	4618      	mov	r0, r3
 800260a:	f001 fe1b 	bl	8004244 <HAL_RCCEx_PeriphCLKConfig>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8002614:	f7ff ff6c 	bl	80024f0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002618:	4b19      	ldr	r3, [pc, #100]	@ (8002680 <HAL_UART_MspInit+0x13c>)
 800261a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800261c:	4a18      	ldr	r2, [pc, #96]	@ (8002680 <HAL_UART_MspInit+0x13c>)
 800261e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002622:	6593      	str	r3, [r2, #88]	@ 0x58
 8002624:	4b16      	ldr	r3, [pc, #88]	@ (8002680 <HAL_UART_MspInit+0x13c>)
 8002626:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002628:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800262c:	60fb      	str	r3, [r7, #12]
 800262e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002630:	4b13      	ldr	r3, [pc, #76]	@ (8002680 <HAL_UART_MspInit+0x13c>)
 8002632:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002634:	4a12      	ldr	r2, [pc, #72]	@ (8002680 <HAL_UART_MspInit+0x13c>)
 8002636:	f043 0308 	orr.w	r3, r3, #8
 800263a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800263c:	4b10      	ldr	r3, [pc, #64]	@ (8002680 <HAL_UART_MspInit+0x13c>)
 800263e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002640:	f003 0308 	and.w	r3, r3, #8
 8002644:	60bb      	str	r3, [r7, #8]
 8002646:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002648:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800264c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002650:	2302      	movs	r3, #2
 8002652:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002656:	2300      	movs	r3, #0
 8002658:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800265c:	2303      	movs	r3, #3
 800265e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002662:	2307      	movs	r3, #7
 8002664:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002668:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800266c:	4619      	mov	r1, r3
 800266e:	4807      	ldr	r0, [pc, #28]	@ (800268c <HAL_UART_MspInit+0x148>)
 8002670:	f000 fc44 	bl	8002efc <HAL_GPIO_Init>
}
 8002674:	bf00      	nop
 8002676:	37b8      	adds	r7, #184	@ 0xb8
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	40008000 	.word	0x40008000
 8002680:	40021000 	.word	0x40021000
 8002684:	48001800 	.word	0x48001800
 8002688:	40004800 	.word	0x40004800
 800268c:	48000c00 	.word	0x48000c00

08002690 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a13      	ldr	r2, [pc, #76]	@ (80026ec <HAL_TIM_PWM_MspInit+0x5c>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d10c      	bne.n	80026bc <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80026a2:	4b13      	ldr	r3, [pc, #76]	@ (80026f0 <HAL_TIM_PWM_MspInit+0x60>)
 80026a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026a6:	4a12      	ldr	r2, [pc, #72]	@ (80026f0 <HAL_TIM_PWM_MspInit+0x60>)
 80026a8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80026ac:	6613      	str	r3, [r2, #96]	@ 0x60
 80026ae:	4b10      	ldr	r3, [pc, #64]	@ (80026f0 <HAL_TIM_PWM_MspInit+0x60>)
 80026b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026b6:	60fb      	str	r3, [r7, #12]
 80026b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80026ba:	e010      	b.n	80026de <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM2)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026c4:	d10b      	bne.n	80026de <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80026c6:	4b0a      	ldr	r3, [pc, #40]	@ (80026f0 <HAL_TIM_PWM_MspInit+0x60>)
 80026c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026ca:	4a09      	ldr	r2, [pc, #36]	@ (80026f0 <HAL_TIM_PWM_MspInit+0x60>)
 80026cc:	f043 0301 	orr.w	r3, r3, #1
 80026d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80026d2:	4b07      	ldr	r3, [pc, #28]	@ (80026f0 <HAL_TIM_PWM_MspInit+0x60>)
 80026d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	60bb      	str	r3, [r7, #8]
 80026dc:	68bb      	ldr	r3, [r7, #8]
}
 80026de:	bf00      	nop
 80026e0:	3714      	adds	r7, #20
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	40012c00 	.word	0x40012c00
 80026f0:	40021000 	.word	0x40021000

080026f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b085      	sub	sp, #20
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a0a      	ldr	r2, [pc, #40]	@ (800272c <HAL_TIM_Base_MspInit+0x38>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d10b      	bne.n	800271e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002706:	4b0a      	ldr	r3, [pc, #40]	@ (8002730 <HAL_TIM_Base_MspInit+0x3c>)
 8002708:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800270a:	4a09      	ldr	r2, [pc, #36]	@ (8002730 <HAL_TIM_Base_MspInit+0x3c>)
 800270c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002710:	6613      	str	r3, [r2, #96]	@ 0x60
 8002712:	4b07      	ldr	r3, [pc, #28]	@ (8002730 <HAL_TIM_Base_MspInit+0x3c>)
 8002714:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002716:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800271a:	60fb      	str	r3, [r7, #12]
 800271c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM16_MspInit 1 */

  }

}
 800271e:	bf00      	nop
 8002720:	3714      	adds	r7, #20
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	40014400 	.word	0x40014400
 8002730:	40021000 	.word	0x40021000

08002734 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b08a      	sub	sp, #40	@ 0x28
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800273c:	f107 0314 	add.w	r3, r7, #20
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	605a      	str	r2, [r3, #4]
 8002746:	609a      	str	r2, [r3, #8]
 8002748:	60da      	str	r2, [r3, #12]
 800274a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a34      	ldr	r2, [pc, #208]	@ (8002824 <HAL_TIM_MspPostInit+0xf0>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d11d      	bne.n	8002792 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002756:	4b34      	ldr	r3, [pc, #208]	@ (8002828 <HAL_TIM_MspPostInit+0xf4>)
 8002758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800275a:	4a33      	ldr	r2, [pc, #204]	@ (8002828 <HAL_TIM_MspPostInit+0xf4>)
 800275c:	f043 0310 	orr.w	r3, r3, #16
 8002760:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002762:	4b31      	ldr	r3, [pc, #196]	@ (8002828 <HAL_TIM_MspPostInit+0xf4>)
 8002764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002766:	f003 0310 	and.w	r3, r3, #16
 800276a:	613b      	str	r3, [r7, #16]
 800276c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800276e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002772:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002774:	2302      	movs	r3, #2
 8002776:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002778:	2300      	movs	r3, #0
 800277a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800277c:	2300      	movs	r3, #0
 800277e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002780:	2301      	movs	r3, #1
 8002782:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002784:	f107 0314 	add.w	r3, r7, #20
 8002788:	4619      	mov	r1, r3
 800278a:	4828      	ldr	r0, [pc, #160]	@ (800282c <HAL_TIM_MspPostInit+0xf8>)
 800278c:	f000 fbb6 	bl	8002efc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8002790:	e043      	b.n	800281a <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM2)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800279a:	d11d      	bne.n	80027d8 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800279c:	4b22      	ldr	r3, [pc, #136]	@ (8002828 <HAL_TIM_MspPostInit+0xf4>)
 800279e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027a0:	4a21      	ldr	r2, [pc, #132]	@ (8002828 <HAL_TIM_MspPostInit+0xf4>)
 80027a2:	f043 0302 	orr.w	r3, r3, #2
 80027a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027a8:	4b1f      	ldr	r3, [pc, #124]	@ (8002828 <HAL_TIM_MspPostInit+0xf4>)
 80027aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	60fb      	str	r3, [r7, #12]
 80027b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80027b4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80027b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ba:	2302      	movs	r3, #2
 80027bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027be:	2300      	movs	r3, #0
 80027c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c2:	2300      	movs	r3, #0
 80027c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80027c6:	2301      	movs	r3, #1
 80027c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027ca:	f107 0314 	add.w	r3, r7, #20
 80027ce:	4619      	mov	r1, r3
 80027d0:	4817      	ldr	r0, [pc, #92]	@ (8002830 <HAL_TIM_MspPostInit+0xfc>)
 80027d2:	f000 fb93 	bl	8002efc <HAL_GPIO_Init>
}
 80027d6:	e020      	b.n	800281a <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM16)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a15      	ldr	r2, [pc, #84]	@ (8002834 <HAL_TIM_MspPostInit+0x100>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d11b      	bne.n	800281a <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80027e2:	4b11      	ldr	r3, [pc, #68]	@ (8002828 <HAL_TIM_MspPostInit+0xf4>)
 80027e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027e6:	4a10      	ldr	r2, [pc, #64]	@ (8002828 <HAL_TIM_MspPostInit+0xf4>)
 80027e8:	f043 0310 	orr.w	r3, r3, #16
 80027ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002828 <HAL_TIM_MspPostInit+0xf4>)
 80027f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027f2:	f003 0310 	and.w	r3, r3, #16
 80027f6:	60bb      	str	r3, [r7, #8]
 80027f8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80027fa:	2301      	movs	r3, #1
 80027fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027fe:	2302      	movs	r3, #2
 8002800:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002802:	2300      	movs	r3, #0
 8002804:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002806:	2300      	movs	r3, #0
 8002808:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 800280a:	230e      	movs	r3, #14
 800280c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800280e:	f107 0314 	add.w	r3, r7, #20
 8002812:	4619      	mov	r1, r3
 8002814:	4805      	ldr	r0, [pc, #20]	@ (800282c <HAL_TIM_MspPostInit+0xf8>)
 8002816:	f000 fb71 	bl	8002efc <HAL_GPIO_Init>
}
 800281a:	bf00      	nop
 800281c:	3728      	adds	r7, #40	@ 0x28
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	40012c00 	.word	0x40012c00
 8002828:	40021000 	.word	0x40021000
 800282c:	48001000 	.word	0x48001000
 8002830:	48000400 	.word	0x48000400
 8002834:	40014400 	.word	0x40014400

08002838 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800283c:	bf00      	nop
 800283e:	e7fd      	b.n	800283c <NMI_Handler+0x4>

08002840 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002844:	bf00      	nop
 8002846:	e7fd      	b.n	8002844 <HardFault_Handler+0x4>

08002848 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800284c:	bf00      	nop
 800284e:	e7fd      	b.n	800284c <MemManage_Handler+0x4>

08002850 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002854:	bf00      	nop
 8002856:	e7fd      	b.n	8002854 <BusFault_Handler+0x4>

08002858 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800285c:	bf00      	nop
 800285e:	e7fd      	b.n	800285c <UsageFault_Handler+0x4>

08002860 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002864:	bf00      	nop
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr

0800286e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800286e:	b480      	push	{r7}
 8002870:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002872:	bf00      	nop
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002880:	bf00      	nop
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr

0800288a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800288a:	b580      	push	{r7, lr}
 800288c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800288e:	f000 f94f 	bl	8002b30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002892:	bf00      	nop
 8002894:	bd80      	pop	{r7, pc}
	...

08002898 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_3);
 800289c:	4802      	ldr	r0, [pc, #8]	@ (80028a8 <EXTI3_IRQHandler+0x10>)
 800289e:	f000 fafd 	bl	8002e9c <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80028a2:	bf00      	nop
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	20000088 	.word	0x20000088

080028ac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 80028b0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80028b4:	f000 fdf0 	bl	8003498 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80028b8:	bf00      	nop
 80028ba:	bd80      	pop	{r7, pc}

080028bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  return 1;
 80028c0:	2301      	movs	r3, #1
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <_kill>:

int _kill(int pid, int sig)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80028d6:	f007 feff 	bl	800a6d8 <__errno>
 80028da:	4603      	mov	r3, r0
 80028dc:	2216      	movs	r2, #22
 80028de:	601a      	str	r2, [r3, #0]
  return -1;
 80028e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <_exit>:

void _exit (int status)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80028f4:	f04f 31ff 	mov.w	r1, #4294967295
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f7ff ffe7 	bl	80028cc <_kill>
  while (1) {}    /* Make sure we hang here */
 80028fe:	bf00      	nop
 8002900:	e7fd      	b.n	80028fe <_exit+0x12>

08002902 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002902:	b580      	push	{r7, lr}
 8002904:	b086      	sub	sp, #24
 8002906:	af00      	add	r7, sp, #0
 8002908:	60f8      	str	r0, [r7, #12]
 800290a:	60b9      	str	r1, [r7, #8]
 800290c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800290e:	2300      	movs	r3, #0
 8002910:	617b      	str	r3, [r7, #20]
 8002912:	e00a      	b.n	800292a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002914:	f3af 8000 	nop.w
 8002918:	4601      	mov	r1, r0
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	1c5a      	adds	r2, r3, #1
 800291e:	60ba      	str	r2, [r7, #8]
 8002920:	b2ca      	uxtb	r2, r1
 8002922:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	3301      	adds	r3, #1
 8002928:	617b      	str	r3, [r7, #20]
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	429a      	cmp	r2, r3
 8002930:	dbf0      	blt.n	8002914 <_read+0x12>
  }

  return len;
 8002932:	687b      	ldr	r3, [r7, #4]
}
 8002934:	4618      	mov	r0, r3
 8002936:	3718      	adds	r7, #24
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <_close>:
  }
  return len;
}

int _close(int file)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002944:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002948:	4618      	mov	r0, r3
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002964:	605a      	str	r2, [r3, #4]
  return 0;
 8002966:	2300      	movs	r3, #0
}
 8002968:	4618      	mov	r0, r3
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <_isatty>:

int _isatty(int file)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800297c:	2301      	movs	r3, #1
}
 800297e:	4618      	mov	r0, r3
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr

0800298a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800298a:	b480      	push	{r7}
 800298c:	b085      	sub	sp, #20
 800298e:	af00      	add	r7, sp, #0
 8002990:	60f8      	str	r0, [r7, #12]
 8002992:	60b9      	str	r1, [r7, #8]
 8002994:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002996:	2300      	movs	r3, #0
}
 8002998:	4618      	mov	r0, r3
 800299a:	3714      	adds	r7, #20
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029ac:	4a14      	ldr	r2, [pc, #80]	@ (8002a00 <_sbrk+0x5c>)
 80029ae:	4b15      	ldr	r3, [pc, #84]	@ (8002a04 <_sbrk+0x60>)
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029b8:	4b13      	ldr	r3, [pc, #76]	@ (8002a08 <_sbrk+0x64>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d102      	bne.n	80029c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029c0:	4b11      	ldr	r3, [pc, #68]	@ (8002a08 <_sbrk+0x64>)
 80029c2:	4a12      	ldr	r2, [pc, #72]	@ (8002a0c <_sbrk+0x68>)
 80029c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029c6:	4b10      	ldr	r3, [pc, #64]	@ (8002a08 <_sbrk+0x64>)
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4413      	add	r3, r2
 80029ce:	693a      	ldr	r2, [r7, #16]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d207      	bcs.n	80029e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029d4:	f007 fe80 	bl	800a6d8 <__errno>
 80029d8:	4603      	mov	r3, r0
 80029da:	220c      	movs	r2, #12
 80029dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029de:	f04f 33ff 	mov.w	r3, #4294967295
 80029e2:	e009      	b.n	80029f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029e4:	4b08      	ldr	r3, [pc, #32]	@ (8002a08 <_sbrk+0x64>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029ea:	4b07      	ldr	r3, [pc, #28]	@ (8002a08 <_sbrk+0x64>)
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4413      	add	r3, r2
 80029f2:	4a05      	ldr	r2, [pc, #20]	@ (8002a08 <_sbrk+0x64>)
 80029f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029f6:	68fb      	ldr	r3, [r7, #12]
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3718      	adds	r7, #24
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	20040000 	.word	0x20040000
 8002a04:	00000400 	.word	0x00000400
 8002a08:	20000424 	.word	0x20000424
 8002a0c:	20000b20 	.word	0x20000b20

08002a10 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002a14:	4b06      	ldr	r3, [pc, #24]	@ (8002a30 <SystemInit+0x20>)
 8002a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a1a:	4a05      	ldr	r2, [pc, #20]	@ (8002a30 <SystemInit+0x20>)
 8002a1c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002a20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002a24:	bf00      	nop
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	e000ed00 	.word	0xe000ed00

08002a34 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002a34:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002a6c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002a38:	f7ff ffea 	bl	8002a10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a3c:	480c      	ldr	r0, [pc, #48]	@ (8002a70 <LoopForever+0x6>)
  ldr r1, =_edata
 8002a3e:	490d      	ldr	r1, [pc, #52]	@ (8002a74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a40:	4a0d      	ldr	r2, [pc, #52]	@ (8002a78 <LoopForever+0xe>)
  movs r3, #0
 8002a42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a44:	e002      	b.n	8002a4c <LoopCopyDataInit>

08002a46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a4a:	3304      	adds	r3, #4

08002a4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a50:	d3f9      	bcc.n	8002a46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a52:	4a0a      	ldr	r2, [pc, #40]	@ (8002a7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a54:	4c0a      	ldr	r4, [pc, #40]	@ (8002a80 <LoopForever+0x16>)
  movs r3, #0
 8002a56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a58:	e001      	b.n	8002a5e <LoopFillZerobss>

08002a5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a5c:	3204      	adds	r2, #4

08002a5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a60:	d3fb      	bcc.n	8002a5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a62:	f007 fe3f 	bl	800a6e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002a66:	f7ff f9eb 	bl	8001e40 <main>

08002a6a <LoopForever>:

LoopForever:
    b LoopForever
 8002a6a:	e7fe      	b.n	8002a6a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002a6c:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8002a70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a74:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8002a78:	0800c5cc 	.word	0x0800c5cc
  ldr r2, =_sbss
 8002a7c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8002a80:	20000b20 	.word	0x20000b20

08002a84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002a84:	e7fe      	b.n	8002a84 <ADC1_2_IRQHandler>

08002a86 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b082      	sub	sp, #8
 8002a8a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a90:	2003      	movs	r0, #3
 8002a92:	f000 f985 	bl	8002da0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a96:	200f      	movs	r0, #15
 8002a98:	f000 f80e 	bl	8002ab8 <HAL_InitTick>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d002      	beq.n	8002aa8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	71fb      	strb	r3, [r7, #7]
 8002aa6:	e001      	b.n	8002aac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002aa8:	f7ff fd28 	bl	80024fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002aac:	79fb      	ldrb	r3, [r7, #7]
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
	...

08002ab8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002ac4:	4b17      	ldr	r3, [pc, #92]	@ (8002b24 <HAL_InitTick+0x6c>)
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d023      	beq.n	8002b14 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002acc:	4b16      	ldr	r3, [pc, #88]	@ (8002b28 <HAL_InitTick+0x70>)
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	4b14      	ldr	r3, [pc, #80]	@ (8002b24 <HAL_InitTick+0x6c>)
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ada:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f000 f99f 	bl	8002e26 <HAL_SYSTICK_Config>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d10f      	bne.n	8002b0e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2b0f      	cmp	r3, #15
 8002af2:	d809      	bhi.n	8002b08 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002af4:	2200      	movs	r2, #0
 8002af6:	6879      	ldr	r1, [r7, #4]
 8002af8:	f04f 30ff 	mov.w	r0, #4294967295
 8002afc:	f000 f95b 	bl	8002db6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002b00:	4a0a      	ldr	r2, [pc, #40]	@ (8002b2c <HAL_InitTick+0x74>)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6013      	str	r3, [r2, #0]
 8002b06:	e007      	b.n	8002b18 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	73fb      	strb	r3, [r7, #15]
 8002b0c:	e004      	b.n	8002b18 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	73fb      	strb	r3, [r7, #15]
 8002b12:	e001      	b.n	8002b18 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3710      	adds	r7, #16
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	2000000c 	.word	0x2000000c
 8002b28:	20000004 	.word	0x20000004
 8002b2c:	20000008 	.word	0x20000008

08002b30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002b34:	4b06      	ldr	r3, [pc, #24]	@ (8002b50 <HAL_IncTick+0x20>)
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	461a      	mov	r2, r3
 8002b3a:	4b06      	ldr	r3, [pc, #24]	@ (8002b54 <HAL_IncTick+0x24>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4413      	add	r3, r2
 8002b40:	4a04      	ldr	r2, [pc, #16]	@ (8002b54 <HAL_IncTick+0x24>)
 8002b42:	6013      	str	r3, [r2, #0]
}
 8002b44:	bf00      	nop
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	2000000c 	.word	0x2000000c
 8002b54:	20000428 	.word	0x20000428

08002b58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  return uwTick;
 8002b5c:	4b03      	ldr	r3, [pc, #12]	@ (8002b6c <HAL_GetTick+0x14>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	20000428 	.word	0x20000428

08002b70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b78:	f7ff ffee 	bl	8002b58 <HAL_GetTick>
 8002b7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b88:	d005      	beq.n	8002b96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002b8a:	4b0a      	ldr	r3, [pc, #40]	@ (8002bb4 <HAL_Delay+0x44>)
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	461a      	mov	r2, r3
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	4413      	add	r3, r2
 8002b94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b96:	bf00      	nop
 8002b98:	f7ff ffde 	bl	8002b58 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d8f7      	bhi.n	8002b98 <HAL_Delay+0x28>
  {
  }
}
 8002ba8:	bf00      	nop
 8002baa:	bf00      	nop
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	2000000c 	.word	0x2000000c

08002bb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b085      	sub	sp, #20
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f003 0307 	and.w	r3, r3, #7
 8002bc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bc8:	4b0c      	ldr	r3, [pc, #48]	@ (8002bfc <__NVIC_SetPriorityGrouping+0x44>)
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bce:	68ba      	ldr	r2, [r7, #8]
 8002bd0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002be0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002be4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002be8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bea:	4a04      	ldr	r2, [pc, #16]	@ (8002bfc <__NVIC_SetPriorityGrouping+0x44>)
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	60d3      	str	r3, [r2, #12]
}
 8002bf0:	bf00      	nop
 8002bf2:	3714      	adds	r7, #20
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr
 8002bfc:	e000ed00 	.word	0xe000ed00

08002c00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c04:	4b04      	ldr	r3, [pc, #16]	@ (8002c18 <__NVIC_GetPriorityGrouping+0x18>)
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	0a1b      	lsrs	r3, r3, #8
 8002c0a:	f003 0307 	and.w	r3, r3, #7
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr
 8002c18:	e000ed00 	.word	0xe000ed00

08002c1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	4603      	mov	r3, r0
 8002c24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	db0b      	blt.n	8002c46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c2e:	79fb      	ldrb	r3, [r7, #7]
 8002c30:	f003 021f 	and.w	r2, r3, #31
 8002c34:	4907      	ldr	r1, [pc, #28]	@ (8002c54 <__NVIC_EnableIRQ+0x38>)
 8002c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c3a:	095b      	lsrs	r3, r3, #5
 8002c3c:	2001      	movs	r0, #1
 8002c3e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c46:	bf00      	nop
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	e000e100 	.word	0xe000e100

08002c58 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	4603      	mov	r3, r0
 8002c60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	db12      	blt.n	8002c90 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c6a:	79fb      	ldrb	r3, [r7, #7]
 8002c6c:	f003 021f 	and.w	r2, r3, #31
 8002c70:	490a      	ldr	r1, [pc, #40]	@ (8002c9c <__NVIC_DisableIRQ+0x44>)
 8002c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c76:	095b      	lsrs	r3, r3, #5
 8002c78:	2001      	movs	r0, #1
 8002c7a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c7e:	3320      	adds	r3, #32
 8002c80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002c84:	f3bf 8f4f 	dsb	sy
}
 8002c88:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002c8a:	f3bf 8f6f 	isb	sy
}
 8002c8e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr
 8002c9c:	e000e100 	.word	0xe000e100

08002ca0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	6039      	str	r1, [r7, #0]
 8002caa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	db0a      	blt.n	8002cca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	b2da      	uxtb	r2, r3
 8002cb8:	490c      	ldr	r1, [pc, #48]	@ (8002cec <__NVIC_SetPriority+0x4c>)
 8002cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cbe:	0112      	lsls	r2, r2, #4
 8002cc0:	b2d2      	uxtb	r2, r2
 8002cc2:	440b      	add	r3, r1
 8002cc4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cc8:	e00a      	b.n	8002ce0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	b2da      	uxtb	r2, r3
 8002cce:	4908      	ldr	r1, [pc, #32]	@ (8002cf0 <__NVIC_SetPriority+0x50>)
 8002cd0:	79fb      	ldrb	r3, [r7, #7]
 8002cd2:	f003 030f 	and.w	r3, r3, #15
 8002cd6:	3b04      	subs	r3, #4
 8002cd8:	0112      	lsls	r2, r2, #4
 8002cda:	b2d2      	uxtb	r2, r2
 8002cdc:	440b      	add	r3, r1
 8002cde:	761a      	strb	r2, [r3, #24]
}
 8002ce0:	bf00      	nop
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr
 8002cec:	e000e100 	.word	0xe000e100
 8002cf0:	e000ed00 	.word	0xe000ed00

08002cf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b089      	sub	sp, #36	@ 0x24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f003 0307 	and.w	r3, r3, #7
 8002d06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	f1c3 0307 	rsb	r3, r3, #7
 8002d0e:	2b04      	cmp	r3, #4
 8002d10:	bf28      	it	cs
 8002d12:	2304      	movcs	r3, #4
 8002d14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	3304      	adds	r3, #4
 8002d1a:	2b06      	cmp	r3, #6
 8002d1c:	d902      	bls.n	8002d24 <NVIC_EncodePriority+0x30>
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	3b03      	subs	r3, #3
 8002d22:	e000      	b.n	8002d26 <NVIC_EncodePriority+0x32>
 8002d24:	2300      	movs	r3, #0
 8002d26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d28:	f04f 32ff 	mov.w	r2, #4294967295
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d32:	43da      	mvns	r2, r3
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	401a      	ands	r2, r3
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d3c:	f04f 31ff 	mov.w	r1, #4294967295
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	fa01 f303 	lsl.w	r3, r1, r3
 8002d46:	43d9      	mvns	r1, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d4c:	4313      	orrs	r3, r2
         );
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3724      	adds	r7, #36	@ 0x24
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
	...

08002d5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	3b01      	subs	r3, #1
 8002d68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d6c:	d301      	bcc.n	8002d72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e00f      	b.n	8002d92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d72:	4a0a      	ldr	r2, [pc, #40]	@ (8002d9c <SysTick_Config+0x40>)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	3b01      	subs	r3, #1
 8002d78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d7a:	210f      	movs	r1, #15
 8002d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d80:	f7ff ff8e 	bl	8002ca0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d84:	4b05      	ldr	r3, [pc, #20]	@ (8002d9c <SysTick_Config+0x40>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d8a:	4b04      	ldr	r3, [pc, #16]	@ (8002d9c <SysTick_Config+0x40>)
 8002d8c:	2207      	movs	r2, #7
 8002d8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	e000e010 	.word	0xe000e010

08002da0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f7ff ff05 	bl	8002bb8 <__NVIC_SetPriorityGrouping>
}
 8002dae:	bf00      	nop
 8002db0:	3708      	adds	r7, #8
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002db6:	b580      	push	{r7, lr}
 8002db8:	b086      	sub	sp, #24
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	60b9      	str	r1, [r7, #8]
 8002dc0:	607a      	str	r2, [r7, #4]
 8002dc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002dc8:	f7ff ff1a 	bl	8002c00 <__NVIC_GetPriorityGrouping>
 8002dcc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	68b9      	ldr	r1, [r7, #8]
 8002dd2:	6978      	ldr	r0, [r7, #20]
 8002dd4:	f7ff ff8e 	bl	8002cf4 <NVIC_EncodePriority>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dde:	4611      	mov	r1, r2
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7ff ff5d 	bl	8002ca0 <__NVIC_SetPriority>
}
 8002de6:	bf00      	nop
 8002de8:	3718      	adds	r7, #24
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b082      	sub	sp, #8
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	4603      	mov	r3, r0
 8002df6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7ff ff0d 	bl	8002c1c <__NVIC_EnableIRQ>
}
 8002e02:	bf00      	nop
 8002e04:	3708      	adds	r7, #8
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}

08002e0a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	b082      	sub	sp, #8
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	4603      	mov	r3, r0
 8002e12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7ff ff1d 	bl	8002c58 <__NVIC_DisableIRQ>
}
 8002e1e:	bf00      	nop
 8002e20:	3708      	adds	r7, #8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b082      	sub	sp, #8
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f7ff ff94 	bl	8002d5c <SysTick_Config>
 8002e34:	4603      	mov	r3, r0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8002e3e:	b480      	push	{r7}
 8002e40:	b087      	sub	sp, #28
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	60f8      	str	r0, [r7, #12]
 8002e46:	460b      	mov	r3, r1
 8002e48:	607a      	str	r2, [r7, #4]
 8002e4a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8002e50:	7afb      	ldrb	r3, [r7, #11]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d103      	bne.n	8002e5e <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	605a      	str	r2, [r3, #4]
      break;
 8002e5c:	e002      	b.n	8002e64 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	75fb      	strb	r3, [r7, #23]
      break;
 8002e62:	bf00      	nop
  }

  return status;
 8002e64:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	371c      	adds	r7, #28
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr

08002e72 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8002e72:	b480      	push	{r7}
 8002e74:	b083      	sub	sp, #12
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
 8002e7a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e003      	b.n	8002e8e <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	683a      	ldr	r2, [r7, #0]
 8002e8a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
  }
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	370c      	adds	r7, #12
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
	...

08002e9c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b086      	sub	sp, #24
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	0c1b      	lsrs	r3, r3, #16
 8002eaa:	f003 0301 	and.w	r3, r3, #1
 8002eae:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 031f 	and.w	r3, r3, #31
 8002eb8:	2201      	movs	r2, #1
 8002eba:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebe:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	015a      	lsls	r2, r3, #5
 8002ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8002ef8 <HAL_EXTI_IRQHandler+0x5c>)
 8002ec6:	4413      	add	r3, r2
 8002ec8:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	693a      	ldr	r2, [r7, #16]
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d009      	beq.n	8002eee <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	693a      	ldr	r2, [r7, #16]
 8002ede:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d002      	beq.n	8002eee <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	4798      	blx	r3
    }
  }
}
 8002eee:	bf00      	nop
 8002ef0:	3718      	adds	r7, #24
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	40010414 	.word	0x40010414

08002efc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b087      	sub	sp, #28
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f06:	2300      	movs	r3, #0
 8002f08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f0a:	e166      	b.n	80031da <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	2101      	movs	r1, #1
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	fa01 f303 	lsl.w	r3, r1, r3
 8002f18:	4013      	ands	r3, r2
 8002f1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	f000 8158 	beq.w	80031d4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f003 0303 	and.w	r3, r3, #3
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d005      	beq.n	8002f3c <HAL_GPIO_Init+0x40>
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f003 0303 	and.w	r3, r3, #3
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d130      	bne.n	8002f9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	2203      	movs	r2, #3
 8002f48:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4c:	43db      	mvns	r3, r3
 8002f4e:	693a      	ldr	r2, [r7, #16]
 8002f50:	4013      	ands	r3, r2
 8002f52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	68da      	ldr	r2, [r3, #12]
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f60:	693a      	ldr	r2, [r7, #16]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	693a      	ldr	r2, [r7, #16]
 8002f6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f72:	2201      	movs	r2, #1
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7a:	43db      	mvns	r3, r3
 8002f7c:	693a      	ldr	r2, [r7, #16]
 8002f7e:	4013      	ands	r3, r2
 8002f80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	091b      	lsrs	r3, r3, #4
 8002f88:	f003 0201 	and.w	r2, r3, #1
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f92:	693a      	ldr	r2, [r7, #16]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	693a      	ldr	r2, [r7, #16]
 8002f9c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f003 0303 	and.w	r3, r3, #3
 8002fa6:	2b03      	cmp	r3, #3
 8002fa8:	d017      	beq.n	8002fda <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	2203      	movs	r2, #3
 8002fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fba:	43db      	mvns	r3, r3
 8002fbc:	693a      	ldr	r2, [r7, #16]
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	689a      	ldr	r2, [r3, #8]
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	fa02 f303 	lsl.w	r3, r2, r3
 8002fce:	693a      	ldr	r2, [r7, #16]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	693a      	ldr	r2, [r7, #16]
 8002fd8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f003 0303 	and.w	r3, r3, #3
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d123      	bne.n	800302e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	08da      	lsrs	r2, r3, #3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	3208      	adds	r2, #8
 8002fee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ff2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	f003 0307 	and.w	r3, r3, #7
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	220f      	movs	r2, #15
 8002ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8003002:	43db      	mvns	r3, r3
 8003004:	693a      	ldr	r2, [r7, #16]
 8003006:	4013      	ands	r3, r2
 8003008:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	691a      	ldr	r2, [r3, #16]
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	f003 0307 	and.w	r3, r3, #7
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	fa02 f303 	lsl.w	r3, r2, r3
 800301a:	693a      	ldr	r2, [r7, #16]
 800301c:	4313      	orrs	r3, r2
 800301e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	08da      	lsrs	r2, r3, #3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	3208      	adds	r2, #8
 8003028:	6939      	ldr	r1, [r7, #16]
 800302a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	005b      	lsls	r3, r3, #1
 8003038:	2203      	movs	r2, #3
 800303a:	fa02 f303 	lsl.w	r3, r2, r3
 800303e:	43db      	mvns	r3, r3
 8003040:	693a      	ldr	r2, [r7, #16]
 8003042:	4013      	ands	r3, r2
 8003044:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f003 0203 	and.w	r2, r3, #3
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	fa02 f303 	lsl.w	r3, r2, r3
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	4313      	orrs	r3, r2
 800305a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	693a      	ldr	r2, [r7, #16]
 8003060:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800306a:	2b00      	cmp	r3, #0
 800306c:	f000 80b2 	beq.w	80031d4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003070:	4b61      	ldr	r3, [pc, #388]	@ (80031f8 <HAL_GPIO_Init+0x2fc>)
 8003072:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003074:	4a60      	ldr	r2, [pc, #384]	@ (80031f8 <HAL_GPIO_Init+0x2fc>)
 8003076:	f043 0301 	orr.w	r3, r3, #1
 800307a:	6613      	str	r3, [r2, #96]	@ 0x60
 800307c:	4b5e      	ldr	r3, [pc, #376]	@ (80031f8 <HAL_GPIO_Init+0x2fc>)
 800307e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003080:	f003 0301 	and.w	r3, r3, #1
 8003084:	60bb      	str	r3, [r7, #8]
 8003086:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003088:	4a5c      	ldr	r2, [pc, #368]	@ (80031fc <HAL_GPIO_Init+0x300>)
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	089b      	lsrs	r3, r3, #2
 800308e:	3302      	adds	r3, #2
 8003090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003094:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	f003 0303 	and.w	r3, r3, #3
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	220f      	movs	r2, #15
 80030a0:	fa02 f303 	lsl.w	r3, r2, r3
 80030a4:	43db      	mvns	r3, r3
 80030a6:	693a      	ldr	r2, [r7, #16]
 80030a8:	4013      	ands	r3, r2
 80030aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80030b2:	d02b      	beq.n	800310c <HAL_GPIO_Init+0x210>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	4a52      	ldr	r2, [pc, #328]	@ (8003200 <HAL_GPIO_Init+0x304>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d025      	beq.n	8003108 <HAL_GPIO_Init+0x20c>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	4a51      	ldr	r2, [pc, #324]	@ (8003204 <HAL_GPIO_Init+0x308>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d01f      	beq.n	8003104 <HAL_GPIO_Init+0x208>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	4a50      	ldr	r2, [pc, #320]	@ (8003208 <HAL_GPIO_Init+0x30c>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d019      	beq.n	8003100 <HAL_GPIO_Init+0x204>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4a4f      	ldr	r2, [pc, #316]	@ (800320c <HAL_GPIO_Init+0x310>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d013      	beq.n	80030fc <HAL_GPIO_Init+0x200>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4a4e      	ldr	r2, [pc, #312]	@ (8003210 <HAL_GPIO_Init+0x314>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d00d      	beq.n	80030f8 <HAL_GPIO_Init+0x1fc>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4a4d      	ldr	r2, [pc, #308]	@ (8003214 <HAL_GPIO_Init+0x318>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d007      	beq.n	80030f4 <HAL_GPIO_Init+0x1f8>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a4c      	ldr	r2, [pc, #304]	@ (8003218 <HAL_GPIO_Init+0x31c>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d101      	bne.n	80030f0 <HAL_GPIO_Init+0x1f4>
 80030ec:	2307      	movs	r3, #7
 80030ee:	e00e      	b.n	800310e <HAL_GPIO_Init+0x212>
 80030f0:	2308      	movs	r3, #8
 80030f2:	e00c      	b.n	800310e <HAL_GPIO_Init+0x212>
 80030f4:	2306      	movs	r3, #6
 80030f6:	e00a      	b.n	800310e <HAL_GPIO_Init+0x212>
 80030f8:	2305      	movs	r3, #5
 80030fa:	e008      	b.n	800310e <HAL_GPIO_Init+0x212>
 80030fc:	2304      	movs	r3, #4
 80030fe:	e006      	b.n	800310e <HAL_GPIO_Init+0x212>
 8003100:	2303      	movs	r3, #3
 8003102:	e004      	b.n	800310e <HAL_GPIO_Init+0x212>
 8003104:	2302      	movs	r3, #2
 8003106:	e002      	b.n	800310e <HAL_GPIO_Init+0x212>
 8003108:	2301      	movs	r3, #1
 800310a:	e000      	b.n	800310e <HAL_GPIO_Init+0x212>
 800310c:	2300      	movs	r3, #0
 800310e:	697a      	ldr	r2, [r7, #20]
 8003110:	f002 0203 	and.w	r2, r2, #3
 8003114:	0092      	lsls	r2, r2, #2
 8003116:	4093      	lsls	r3, r2
 8003118:	693a      	ldr	r2, [r7, #16]
 800311a:	4313      	orrs	r3, r2
 800311c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800311e:	4937      	ldr	r1, [pc, #220]	@ (80031fc <HAL_GPIO_Init+0x300>)
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	089b      	lsrs	r3, r3, #2
 8003124:	3302      	adds	r3, #2
 8003126:	693a      	ldr	r2, [r7, #16]
 8003128:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800312c:	4b3b      	ldr	r3, [pc, #236]	@ (800321c <HAL_GPIO_Init+0x320>)
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	43db      	mvns	r3, r3
 8003136:	693a      	ldr	r2, [r7, #16]
 8003138:	4013      	ands	r3, r2
 800313a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d003      	beq.n	8003150 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003148:	693a      	ldr	r2, [r7, #16]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	4313      	orrs	r3, r2
 800314e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003150:	4a32      	ldr	r2, [pc, #200]	@ (800321c <HAL_GPIO_Init+0x320>)
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003156:	4b31      	ldr	r3, [pc, #196]	@ (800321c <HAL_GPIO_Init+0x320>)
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	43db      	mvns	r3, r3
 8003160:	693a      	ldr	r2, [r7, #16]
 8003162:	4013      	ands	r3, r2
 8003164:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d003      	beq.n	800317a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003172:	693a      	ldr	r2, [r7, #16]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	4313      	orrs	r3, r2
 8003178:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800317a:	4a28      	ldr	r2, [pc, #160]	@ (800321c <HAL_GPIO_Init+0x320>)
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003180:	4b26      	ldr	r3, [pc, #152]	@ (800321c <HAL_GPIO_Init+0x320>)
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	43db      	mvns	r3, r3
 800318a:	693a      	ldr	r2, [r7, #16]
 800318c:	4013      	ands	r3, r2
 800318e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d003      	beq.n	80031a4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800319c:	693a      	ldr	r2, [r7, #16]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80031a4:	4a1d      	ldr	r2, [pc, #116]	@ (800321c <HAL_GPIO_Init+0x320>)
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80031aa:	4b1c      	ldr	r3, [pc, #112]	@ (800321c <HAL_GPIO_Init+0x320>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	43db      	mvns	r3, r3
 80031b4:	693a      	ldr	r2, [r7, #16]
 80031b6:	4013      	ands	r3, r2
 80031b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d003      	beq.n	80031ce <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80031c6:	693a      	ldr	r2, [r7, #16]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80031ce:	4a13      	ldr	r2, [pc, #76]	@ (800321c <HAL_GPIO_Init+0x320>)
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	3301      	adds	r3, #1
 80031d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	fa22 f303 	lsr.w	r3, r2, r3
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	f47f ae91 	bne.w	8002f0c <HAL_GPIO_Init+0x10>
  }
}
 80031ea:	bf00      	nop
 80031ec:	bf00      	nop
 80031ee:	371c      	adds	r7, #28
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr
 80031f8:	40021000 	.word	0x40021000
 80031fc:	40010000 	.word	0x40010000
 8003200:	48000400 	.word	0x48000400
 8003204:	48000800 	.word	0x48000800
 8003208:	48000c00 	.word	0x48000c00
 800320c:	48001000 	.word	0x48001000
 8003210:	48001400 	.word	0x48001400
 8003214:	48001800 	.word	0x48001800
 8003218:	48001c00 	.word	0x48001c00
 800321c:	40010400 	.word	0x40010400

08003220 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003220:	b480      	push	{r7}
 8003222:	b087      	sub	sp, #28
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800322a:	2300      	movs	r3, #0
 800322c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800322e:	e0c9      	b.n	80033c4 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003230:	2201      	movs	r2, #1
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	fa02 f303 	lsl.w	r3, r2, r3
 8003238:	683a      	ldr	r2, [r7, #0]
 800323a:	4013      	ands	r3, r2
 800323c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	2b00      	cmp	r3, #0
 8003242:	f000 80bc 	beq.w	80033be <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003246:	4a66      	ldr	r2, [pc, #408]	@ (80033e0 <HAL_GPIO_DeInit+0x1c0>)
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	089b      	lsrs	r3, r3, #2
 800324c:	3302      	adds	r3, #2
 800324e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003252:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	f003 0303 	and.w	r3, r3, #3
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	220f      	movs	r2, #15
 800325e:	fa02 f303 	lsl.w	r3, r2, r3
 8003262:	68fa      	ldr	r2, [r7, #12]
 8003264:	4013      	ands	r3, r2
 8003266:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800326e:	d02b      	beq.n	80032c8 <HAL_GPIO_DeInit+0xa8>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a5c      	ldr	r2, [pc, #368]	@ (80033e4 <HAL_GPIO_DeInit+0x1c4>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d025      	beq.n	80032c4 <HAL_GPIO_DeInit+0xa4>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a5b      	ldr	r2, [pc, #364]	@ (80033e8 <HAL_GPIO_DeInit+0x1c8>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d01f      	beq.n	80032c0 <HAL_GPIO_DeInit+0xa0>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4a5a      	ldr	r2, [pc, #360]	@ (80033ec <HAL_GPIO_DeInit+0x1cc>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d019      	beq.n	80032bc <HAL_GPIO_DeInit+0x9c>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a59      	ldr	r2, [pc, #356]	@ (80033f0 <HAL_GPIO_DeInit+0x1d0>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d013      	beq.n	80032b8 <HAL_GPIO_DeInit+0x98>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4a58      	ldr	r2, [pc, #352]	@ (80033f4 <HAL_GPIO_DeInit+0x1d4>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d00d      	beq.n	80032b4 <HAL_GPIO_DeInit+0x94>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4a57      	ldr	r2, [pc, #348]	@ (80033f8 <HAL_GPIO_DeInit+0x1d8>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d007      	beq.n	80032b0 <HAL_GPIO_DeInit+0x90>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4a56      	ldr	r2, [pc, #344]	@ (80033fc <HAL_GPIO_DeInit+0x1dc>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d101      	bne.n	80032ac <HAL_GPIO_DeInit+0x8c>
 80032a8:	2307      	movs	r3, #7
 80032aa:	e00e      	b.n	80032ca <HAL_GPIO_DeInit+0xaa>
 80032ac:	2308      	movs	r3, #8
 80032ae:	e00c      	b.n	80032ca <HAL_GPIO_DeInit+0xaa>
 80032b0:	2306      	movs	r3, #6
 80032b2:	e00a      	b.n	80032ca <HAL_GPIO_DeInit+0xaa>
 80032b4:	2305      	movs	r3, #5
 80032b6:	e008      	b.n	80032ca <HAL_GPIO_DeInit+0xaa>
 80032b8:	2304      	movs	r3, #4
 80032ba:	e006      	b.n	80032ca <HAL_GPIO_DeInit+0xaa>
 80032bc:	2303      	movs	r3, #3
 80032be:	e004      	b.n	80032ca <HAL_GPIO_DeInit+0xaa>
 80032c0:	2302      	movs	r3, #2
 80032c2:	e002      	b.n	80032ca <HAL_GPIO_DeInit+0xaa>
 80032c4:	2301      	movs	r3, #1
 80032c6:	e000      	b.n	80032ca <HAL_GPIO_DeInit+0xaa>
 80032c8:	2300      	movs	r3, #0
 80032ca:	697a      	ldr	r2, [r7, #20]
 80032cc:	f002 0203 	and.w	r2, r2, #3
 80032d0:	0092      	lsls	r2, r2, #2
 80032d2:	4093      	lsls	r3, r2
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d132      	bne.n	8003340 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80032da:	4b49      	ldr	r3, [pc, #292]	@ (8003400 <HAL_GPIO_DeInit+0x1e0>)
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	43db      	mvns	r3, r3
 80032e2:	4947      	ldr	r1, [pc, #284]	@ (8003400 <HAL_GPIO_DeInit+0x1e0>)
 80032e4:	4013      	ands	r3, r2
 80032e6:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80032e8:	4b45      	ldr	r3, [pc, #276]	@ (8003400 <HAL_GPIO_DeInit+0x1e0>)
 80032ea:	685a      	ldr	r2, [r3, #4]
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	43db      	mvns	r3, r3
 80032f0:	4943      	ldr	r1, [pc, #268]	@ (8003400 <HAL_GPIO_DeInit+0x1e0>)
 80032f2:	4013      	ands	r3, r2
 80032f4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80032f6:	4b42      	ldr	r3, [pc, #264]	@ (8003400 <HAL_GPIO_DeInit+0x1e0>)
 80032f8:	68da      	ldr	r2, [r3, #12]
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	43db      	mvns	r3, r3
 80032fe:	4940      	ldr	r1, [pc, #256]	@ (8003400 <HAL_GPIO_DeInit+0x1e0>)
 8003300:	4013      	ands	r3, r2
 8003302:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8003304:	4b3e      	ldr	r3, [pc, #248]	@ (8003400 <HAL_GPIO_DeInit+0x1e0>)
 8003306:	689a      	ldr	r2, [r3, #8]
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	43db      	mvns	r3, r3
 800330c:	493c      	ldr	r1, [pc, #240]	@ (8003400 <HAL_GPIO_DeInit+0x1e0>)
 800330e:	4013      	ands	r3, r2
 8003310:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	f003 0303 	and.w	r3, r3, #3
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	220f      	movs	r2, #15
 800331c:	fa02 f303 	lsl.w	r3, r2, r3
 8003320:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003322:	4a2f      	ldr	r2, [pc, #188]	@ (80033e0 <HAL_GPIO_DeInit+0x1c0>)
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	089b      	lsrs	r3, r3, #2
 8003328:	3302      	adds	r3, #2
 800332a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	43da      	mvns	r2, r3
 8003332:	482b      	ldr	r0, [pc, #172]	@ (80033e0 <HAL_GPIO_DeInit+0x1c0>)
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	089b      	lsrs	r3, r3, #2
 8003338:	400a      	ands	r2, r1
 800333a:	3302      	adds	r3, #2
 800333c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	005b      	lsls	r3, r3, #1
 8003348:	2103      	movs	r1, #3
 800334a:	fa01 f303 	lsl.w	r3, r1, r3
 800334e:	431a      	orrs	r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	08da      	lsrs	r2, r3, #3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	3208      	adds	r2, #8
 800335c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	f003 0307 	and.w	r3, r3, #7
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	220f      	movs	r2, #15
 800336a:	fa02 f303 	lsl.w	r3, r2, r3
 800336e:	43db      	mvns	r3, r3
 8003370:	697a      	ldr	r2, [r7, #20]
 8003372:	08d2      	lsrs	r2, r2, #3
 8003374:	4019      	ands	r1, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	3208      	adds	r2, #8
 800337a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	689a      	ldr	r2, [r3, #8]
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	005b      	lsls	r3, r3, #1
 8003386:	2103      	movs	r1, #3
 8003388:	fa01 f303 	lsl.w	r3, r1, r3
 800338c:	43db      	mvns	r3, r3
 800338e:	401a      	ands	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685a      	ldr	r2, [r3, #4]
 8003398:	2101      	movs	r1, #1
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	fa01 f303 	lsl.w	r3, r1, r3
 80033a0:	43db      	mvns	r3, r3
 80033a2:	401a      	ands	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	68da      	ldr	r2, [r3, #12]
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	005b      	lsls	r3, r3, #1
 80033b0:	2103      	movs	r1, #3
 80033b2:	fa01 f303 	lsl.w	r3, r1, r3
 80033b6:	43db      	mvns	r3, r3
 80033b8:	401a      	ands	r2, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	3301      	adds	r3, #1
 80033c2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80033c4:	683a      	ldr	r2, [r7, #0]
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	fa22 f303 	lsr.w	r3, r2, r3
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	f47f af2f 	bne.w	8003230 <HAL_GPIO_DeInit+0x10>
  }
}
 80033d2:	bf00      	nop
 80033d4:	bf00      	nop
 80033d6:	371c      	adds	r7, #28
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr
 80033e0:	40010000 	.word	0x40010000
 80033e4:	48000400 	.word	0x48000400
 80033e8:	48000800 	.word	0x48000800
 80033ec:	48000c00 	.word	0x48000c00
 80033f0:	48001000 	.word	0x48001000
 80033f4:	48001400 	.word	0x48001400
 80033f8:	48001800 	.word	0x48001800
 80033fc:	48001c00 	.word	0x48001c00
 8003400:	40010400 	.word	0x40010400

08003404 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003404:	b480      	push	{r7}
 8003406:	b085      	sub	sp, #20
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	460b      	mov	r3, r1
 800340e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	691a      	ldr	r2, [r3, #16]
 8003414:	887b      	ldrh	r3, [r7, #2]
 8003416:	4013      	ands	r3, r2
 8003418:	2b00      	cmp	r3, #0
 800341a:	d002      	beq.n	8003422 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800341c:	2301      	movs	r3, #1
 800341e:	73fb      	strb	r3, [r7, #15]
 8003420:	e001      	b.n	8003426 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003422:	2300      	movs	r3, #0
 8003424:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003426:	7bfb      	ldrb	r3, [r7, #15]
}
 8003428:	4618      	mov	r0, r3
 800342a:	3714      	adds	r7, #20
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	460b      	mov	r3, r1
 800343e:	807b      	strh	r3, [r7, #2]
 8003440:	4613      	mov	r3, r2
 8003442:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003444:	787b      	ldrb	r3, [r7, #1]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d003      	beq.n	8003452 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800344a:	887a      	ldrh	r2, [r7, #2]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003450:	e002      	b.n	8003458 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003452:	887a      	ldrh	r2, [r7, #2]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003458:	bf00      	nop
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003464:	b480      	push	{r7}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	460b      	mov	r3, r1
 800346e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	695b      	ldr	r3, [r3, #20]
 8003474:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003476:	887a      	ldrh	r2, [r7, #2]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	4013      	ands	r3, r2
 800347c:	041a      	lsls	r2, r3, #16
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	43d9      	mvns	r1, r3
 8003482:	887b      	ldrh	r3, [r7, #2]
 8003484:	400b      	ands	r3, r1
 8003486:	431a      	orrs	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	619a      	str	r2, [r3, #24]
}
 800348c:	bf00      	nop
 800348e:	3714      	adds	r7, #20
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	4603      	mov	r3, r0
 80034a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80034a2:	4b08      	ldr	r3, [pc, #32]	@ (80034c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034a4:	695a      	ldr	r2, [r3, #20]
 80034a6:	88fb      	ldrh	r3, [r7, #6]
 80034a8:	4013      	ands	r3, r2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d006      	beq.n	80034bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80034ae:	4a05      	ldr	r2, [pc, #20]	@ (80034c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034b0:	88fb      	ldrh	r3, [r7, #6]
 80034b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80034b4:	88fb      	ldrh	r3, [r7, #6]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f000 f806 	bl	80034c8 <HAL_GPIO_EXTI_Callback>
  }
}
 80034bc:	bf00      	nop
 80034be:	3708      	adds	r7, #8
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	40010400 	.word	0x40010400

080034c8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	4603      	mov	r3, r0
 80034d0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80034d2:	bf00      	nop
 80034d4:	370c      	adds	r7, #12
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
	...

080034e0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80034e0:	b480      	push	{r7}
 80034e2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80034e4:	4b04      	ldr	r3, [pc, #16]	@ (80034f8 <HAL_PWREx_GetVoltageRange+0x18>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	40007000 	.word	0x40007000

080034fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b085      	sub	sp, #20
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800350a:	d130      	bne.n	800356e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800350c:	4b23      	ldr	r3, [pc, #140]	@ (800359c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003514:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003518:	d038      	beq.n	800358c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800351a:	4b20      	ldr	r3, [pc, #128]	@ (800359c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003522:	4a1e      	ldr	r2, [pc, #120]	@ (800359c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003524:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003528:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800352a:	4b1d      	ldr	r3, [pc, #116]	@ (80035a0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2232      	movs	r2, #50	@ 0x32
 8003530:	fb02 f303 	mul.w	r3, r2, r3
 8003534:	4a1b      	ldr	r2, [pc, #108]	@ (80035a4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003536:	fba2 2303 	umull	r2, r3, r2, r3
 800353a:	0c9b      	lsrs	r3, r3, #18
 800353c:	3301      	adds	r3, #1
 800353e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003540:	e002      	b.n	8003548 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	3b01      	subs	r3, #1
 8003546:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003548:	4b14      	ldr	r3, [pc, #80]	@ (800359c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800354a:	695b      	ldr	r3, [r3, #20]
 800354c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003550:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003554:	d102      	bne.n	800355c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d1f2      	bne.n	8003542 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800355c:	4b0f      	ldr	r3, [pc, #60]	@ (800359c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800355e:	695b      	ldr	r3, [r3, #20]
 8003560:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003564:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003568:	d110      	bne.n	800358c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e00f      	b.n	800358e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800356e:	4b0b      	ldr	r3, [pc, #44]	@ (800359c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003576:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800357a:	d007      	beq.n	800358c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800357c:	4b07      	ldr	r3, [pc, #28]	@ (800359c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003584:	4a05      	ldr	r2, [pc, #20]	@ (800359c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003586:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800358a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3714      	adds	r7, #20
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop
 800359c:	40007000 	.word	0x40007000
 80035a0:	20000004 	.word	0x20000004
 80035a4:	431bde83 	.word	0x431bde83

080035a8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80035a8:	b480      	push	{r7}
 80035aa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80035ac:	4b05      	ldr	r3, [pc, #20]	@ (80035c4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	4a04      	ldr	r2, [pc, #16]	@ (80035c4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80035b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80035b6:	6053      	str	r3, [r2, #4]
}
 80035b8:	bf00      	nop
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	40007000 	.word	0x40007000

080035c8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b088      	sub	sp, #32
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d102      	bne.n	80035dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	f000 bc08 	b.w	8003dec <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035dc:	4b96      	ldr	r3, [pc, #600]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	f003 030c 	and.w	r3, r3, #12
 80035e4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035e6:	4b94      	ldr	r3, [pc, #592]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	f003 0303 	and.w	r3, r3, #3
 80035ee:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0310 	and.w	r3, r3, #16
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	f000 80e4 	beq.w	80037c6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d007      	beq.n	8003614 <HAL_RCC_OscConfig+0x4c>
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	2b0c      	cmp	r3, #12
 8003608:	f040 808b 	bne.w	8003722 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	2b01      	cmp	r3, #1
 8003610:	f040 8087 	bne.w	8003722 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003614:	4b88      	ldr	r3, [pc, #544]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0302 	and.w	r3, r3, #2
 800361c:	2b00      	cmp	r3, #0
 800361e:	d005      	beq.n	800362c <HAL_RCC_OscConfig+0x64>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	699b      	ldr	r3, [r3, #24]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d101      	bne.n	800362c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e3df      	b.n	8003dec <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a1a      	ldr	r2, [r3, #32]
 8003630:	4b81      	ldr	r3, [pc, #516]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0308 	and.w	r3, r3, #8
 8003638:	2b00      	cmp	r3, #0
 800363a:	d004      	beq.n	8003646 <HAL_RCC_OscConfig+0x7e>
 800363c:	4b7e      	ldr	r3, [pc, #504]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003644:	e005      	b.n	8003652 <HAL_RCC_OscConfig+0x8a>
 8003646:	4b7c      	ldr	r3, [pc, #496]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 8003648:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800364c:	091b      	lsrs	r3, r3, #4
 800364e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003652:	4293      	cmp	r3, r2
 8003654:	d223      	bcs.n	800369e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a1b      	ldr	r3, [r3, #32]
 800365a:	4618      	mov	r0, r3
 800365c:	f000 fd92 	bl	8004184 <RCC_SetFlashLatencyFromMSIRange>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d001      	beq.n	800366a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e3c0      	b.n	8003dec <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800366a:	4b73      	ldr	r3, [pc, #460]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a72      	ldr	r2, [pc, #456]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 8003670:	f043 0308 	orr.w	r3, r3, #8
 8003674:	6013      	str	r3, [r2, #0]
 8003676:	4b70      	ldr	r3, [pc, #448]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a1b      	ldr	r3, [r3, #32]
 8003682:	496d      	ldr	r1, [pc, #436]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 8003684:	4313      	orrs	r3, r2
 8003686:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003688:	4b6b      	ldr	r3, [pc, #428]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	69db      	ldr	r3, [r3, #28]
 8003694:	021b      	lsls	r3, r3, #8
 8003696:	4968      	ldr	r1, [pc, #416]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 8003698:	4313      	orrs	r3, r2
 800369a:	604b      	str	r3, [r1, #4]
 800369c:	e025      	b.n	80036ea <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800369e:	4b66      	ldr	r3, [pc, #408]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a65      	ldr	r2, [pc, #404]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 80036a4:	f043 0308 	orr.w	r3, r3, #8
 80036a8:	6013      	str	r3, [r2, #0]
 80036aa:	4b63      	ldr	r3, [pc, #396]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	4960      	ldr	r1, [pc, #384]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036bc:	4b5e      	ldr	r3, [pc, #376]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	69db      	ldr	r3, [r3, #28]
 80036c8:	021b      	lsls	r3, r3, #8
 80036ca:	495b      	ldr	r1, [pc, #364]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d109      	bne.n	80036ea <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a1b      	ldr	r3, [r3, #32]
 80036da:	4618      	mov	r0, r3
 80036dc:	f000 fd52 	bl	8004184 <RCC_SetFlashLatencyFromMSIRange>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e380      	b.n	8003dec <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80036ea:	f000 fc87 	bl	8003ffc <HAL_RCC_GetSysClockFreq>
 80036ee:	4602      	mov	r2, r0
 80036f0:	4b51      	ldr	r3, [pc, #324]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	091b      	lsrs	r3, r3, #4
 80036f6:	f003 030f 	and.w	r3, r3, #15
 80036fa:	4950      	ldr	r1, [pc, #320]	@ (800383c <HAL_RCC_OscConfig+0x274>)
 80036fc:	5ccb      	ldrb	r3, [r1, r3]
 80036fe:	f003 031f 	and.w	r3, r3, #31
 8003702:	fa22 f303 	lsr.w	r3, r2, r3
 8003706:	4a4e      	ldr	r2, [pc, #312]	@ (8003840 <HAL_RCC_OscConfig+0x278>)
 8003708:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800370a:	4b4e      	ldr	r3, [pc, #312]	@ (8003844 <HAL_RCC_OscConfig+0x27c>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4618      	mov	r0, r3
 8003710:	f7ff f9d2 	bl	8002ab8 <HAL_InitTick>
 8003714:	4603      	mov	r3, r0
 8003716:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003718:	7bfb      	ldrb	r3, [r7, #15]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d052      	beq.n	80037c4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800371e:	7bfb      	ldrb	r3, [r7, #15]
 8003720:	e364      	b.n	8003dec <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d032      	beq.n	8003790 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800372a:	4b43      	ldr	r3, [pc, #268]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a42      	ldr	r2, [pc, #264]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 8003730:	f043 0301 	orr.w	r3, r3, #1
 8003734:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003736:	f7ff fa0f 	bl	8002b58 <HAL_GetTick>
 800373a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800373c:	e008      	b.n	8003750 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800373e:	f7ff fa0b 	bl	8002b58 <HAL_GetTick>
 8003742:	4602      	mov	r2, r0
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	2b02      	cmp	r3, #2
 800374a:	d901      	bls.n	8003750 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e34d      	b.n	8003dec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003750:	4b39      	ldr	r3, [pc, #228]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0302 	and.w	r3, r3, #2
 8003758:	2b00      	cmp	r3, #0
 800375a:	d0f0      	beq.n	800373e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800375c:	4b36      	ldr	r3, [pc, #216]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a35      	ldr	r2, [pc, #212]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 8003762:	f043 0308 	orr.w	r3, r3, #8
 8003766:	6013      	str	r3, [r2, #0]
 8003768:	4b33      	ldr	r3, [pc, #204]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a1b      	ldr	r3, [r3, #32]
 8003774:	4930      	ldr	r1, [pc, #192]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 8003776:	4313      	orrs	r3, r2
 8003778:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800377a:	4b2f      	ldr	r3, [pc, #188]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	69db      	ldr	r3, [r3, #28]
 8003786:	021b      	lsls	r3, r3, #8
 8003788:	492b      	ldr	r1, [pc, #172]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 800378a:	4313      	orrs	r3, r2
 800378c:	604b      	str	r3, [r1, #4]
 800378e:	e01a      	b.n	80037c6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003790:	4b29      	ldr	r3, [pc, #164]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a28      	ldr	r2, [pc, #160]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 8003796:	f023 0301 	bic.w	r3, r3, #1
 800379a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800379c:	f7ff f9dc 	bl	8002b58 <HAL_GetTick>
 80037a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80037a2:	e008      	b.n	80037b6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80037a4:	f7ff f9d8 	bl	8002b58 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d901      	bls.n	80037b6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e31a      	b.n	8003dec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80037b6:	4b20      	ldr	r3, [pc, #128]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0302 	and.w	r3, r3, #2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d1f0      	bne.n	80037a4 <HAL_RCC_OscConfig+0x1dc>
 80037c2:	e000      	b.n	80037c6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80037c4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d073      	beq.n	80038ba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	2b08      	cmp	r3, #8
 80037d6:	d005      	beq.n	80037e4 <HAL_RCC_OscConfig+0x21c>
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	2b0c      	cmp	r3, #12
 80037dc:	d10e      	bne.n	80037fc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	2b03      	cmp	r3, #3
 80037e2:	d10b      	bne.n	80037fc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037e4:	4b14      	ldr	r3, [pc, #80]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d063      	beq.n	80038b8 <HAL_RCC_OscConfig+0x2f0>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d15f      	bne.n	80038b8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e2f7      	b.n	8003dec <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003804:	d106      	bne.n	8003814 <HAL_RCC_OscConfig+0x24c>
 8003806:	4b0c      	ldr	r3, [pc, #48]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a0b      	ldr	r2, [pc, #44]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 800380c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003810:	6013      	str	r3, [r2, #0]
 8003812:	e025      	b.n	8003860 <HAL_RCC_OscConfig+0x298>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800381c:	d114      	bne.n	8003848 <HAL_RCC_OscConfig+0x280>
 800381e:	4b06      	ldr	r3, [pc, #24]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a05      	ldr	r2, [pc, #20]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 8003824:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003828:	6013      	str	r3, [r2, #0]
 800382a:	4b03      	ldr	r3, [pc, #12]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a02      	ldr	r2, [pc, #8]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 8003830:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003834:	6013      	str	r3, [r2, #0]
 8003836:	e013      	b.n	8003860 <HAL_RCC_OscConfig+0x298>
 8003838:	40021000 	.word	0x40021000
 800383c:	0800c2b4 	.word	0x0800c2b4
 8003840:	20000004 	.word	0x20000004
 8003844:	20000008 	.word	0x20000008
 8003848:	4ba0      	ldr	r3, [pc, #640]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a9f      	ldr	r2, [pc, #636]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 800384e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003852:	6013      	str	r3, [r2, #0]
 8003854:	4b9d      	ldr	r3, [pc, #628]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a9c      	ldr	r2, [pc, #624]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 800385a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800385e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d013      	beq.n	8003890 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003868:	f7ff f976 	bl	8002b58 <HAL_GetTick>
 800386c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800386e:	e008      	b.n	8003882 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003870:	f7ff f972 	bl	8002b58 <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	2b64      	cmp	r3, #100	@ 0x64
 800387c:	d901      	bls.n	8003882 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e2b4      	b.n	8003dec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003882:	4b92      	ldr	r3, [pc, #584]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d0f0      	beq.n	8003870 <HAL_RCC_OscConfig+0x2a8>
 800388e:	e014      	b.n	80038ba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003890:	f7ff f962 	bl	8002b58 <HAL_GetTick>
 8003894:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003896:	e008      	b.n	80038aa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003898:	f7ff f95e 	bl	8002b58 <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	2b64      	cmp	r3, #100	@ 0x64
 80038a4:	d901      	bls.n	80038aa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e2a0      	b.n	8003dec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038aa:	4b88      	ldr	r3, [pc, #544]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1f0      	bne.n	8003898 <HAL_RCC_OscConfig+0x2d0>
 80038b6:	e000      	b.n	80038ba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d060      	beq.n	8003988 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	2b04      	cmp	r3, #4
 80038ca:	d005      	beq.n	80038d8 <HAL_RCC_OscConfig+0x310>
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	2b0c      	cmp	r3, #12
 80038d0:	d119      	bne.n	8003906 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d116      	bne.n	8003906 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038d8:	4b7c      	ldr	r3, [pc, #496]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d005      	beq.n	80038f0 <HAL_RCC_OscConfig+0x328>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d101      	bne.n	80038f0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e27d      	b.n	8003dec <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038f0:	4b76      	ldr	r3, [pc, #472]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	061b      	lsls	r3, r3, #24
 80038fe:	4973      	ldr	r1, [pc, #460]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 8003900:	4313      	orrs	r3, r2
 8003902:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003904:	e040      	b.n	8003988 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d023      	beq.n	8003956 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800390e:	4b6f      	ldr	r3, [pc, #444]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a6e      	ldr	r2, [pc, #440]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 8003914:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003918:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800391a:	f7ff f91d 	bl	8002b58 <HAL_GetTick>
 800391e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003920:	e008      	b.n	8003934 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003922:	f7ff f919 	bl	8002b58 <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	2b02      	cmp	r3, #2
 800392e:	d901      	bls.n	8003934 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	e25b      	b.n	8003dec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003934:	4b65      	ldr	r3, [pc, #404]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800393c:	2b00      	cmp	r3, #0
 800393e:	d0f0      	beq.n	8003922 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003940:	4b62      	ldr	r3, [pc, #392]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	691b      	ldr	r3, [r3, #16]
 800394c:	061b      	lsls	r3, r3, #24
 800394e:	495f      	ldr	r1, [pc, #380]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 8003950:	4313      	orrs	r3, r2
 8003952:	604b      	str	r3, [r1, #4]
 8003954:	e018      	b.n	8003988 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003956:	4b5d      	ldr	r3, [pc, #372]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a5c      	ldr	r2, [pc, #368]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 800395c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003960:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003962:	f7ff f8f9 	bl	8002b58 <HAL_GetTick>
 8003966:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003968:	e008      	b.n	800397c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800396a:	f7ff f8f5 	bl	8002b58 <HAL_GetTick>
 800396e:	4602      	mov	r2, r0
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	2b02      	cmp	r3, #2
 8003976:	d901      	bls.n	800397c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	e237      	b.n	8003dec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800397c:	4b53      	ldr	r3, [pc, #332]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003984:	2b00      	cmp	r3, #0
 8003986:	d1f0      	bne.n	800396a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0308 	and.w	r3, r3, #8
 8003990:	2b00      	cmp	r3, #0
 8003992:	d03c      	beq.n	8003a0e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	695b      	ldr	r3, [r3, #20]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d01c      	beq.n	80039d6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800399c:	4b4b      	ldr	r3, [pc, #300]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 800399e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039a2:	4a4a      	ldr	r2, [pc, #296]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 80039a4:	f043 0301 	orr.w	r3, r3, #1
 80039a8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ac:	f7ff f8d4 	bl	8002b58 <HAL_GetTick>
 80039b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039b2:	e008      	b.n	80039c6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039b4:	f7ff f8d0 	bl	8002b58 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e212      	b.n	8003dec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039c6:	4b41      	ldr	r3, [pc, #260]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 80039c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039cc:	f003 0302 	and.w	r3, r3, #2
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d0ef      	beq.n	80039b4 <HAL_RCC_OscConfig+0x3ec>
 80039d4:	e01b      	b.n	8003a0e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039d6:	4b3d      	ldr	r3, [pc, #244]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 80039d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039dc:	4a3b      	ldr	r2, [pc, #236]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 80039de:	f023 0301 	bic.w	r3, r3, #1
 80039e2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039e6:	f7ff f8b7 	bl	8002b58 <HAL_GetTick>
 80039ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039ec:	e008      	b.n	8003a00 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039ee:	f7ff f8b3 	bl	8002b58 <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d901      	bls.n	8003a00 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	e1f5      	b.n	8003dec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a00:	4b32      	ldr	r3, [pc, #200]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 8003a02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1ef      	bne.n	80039ee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0304 	and.w	r3, r3, #4
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	f000 80a6 	beq.w	8003b68 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003a20:	4b2a      	ldr	r3, [pc, #168]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 8003a22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d10d      	bne.n	8003a48 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a2c:	4b27      	ldr	r3, [pc, #156]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 8003a2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a30:	4a26      	ldr	r2, [pc, #152]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 8003a32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a36:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a38:	4b24      	ldr	r3, [pc, #144]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 8003a3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a40:	60bb      	str	r3, [r7, #8]
 8003a42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a44:	2301      	movs	r3, #1
 8003a46:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a48:	4b21      	ldr	r3, [pc, #132]	@ (8003ad0 <HAL_RCC_OscConfig+0x508>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d118      	bne.n	8003a86 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a54:	4b1e      	ldr	r3, [pc, #120]	@ (8003ad0 <HAL_RCC_OscConfig+0x508>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a1d      	ldr	r2, [pc, #116]	@ (8003ad0 <HAL_RCC_OscConfig+0x508>)
 8003a5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a5e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a60:	f7ff f87a 	bl	8002b58 <HAL_GetTick>
 8003a64:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a66:	e008      	b.n	8003a7a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a68:	f7ff f876 	bl	8002b58 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e1b8      	b.n	8003dec <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a7a:	4b15      	ldr	r3, [pc, #84]	@ (8003ad0 <HAL_RCC_OscConfig+0x508>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d0f0      	beq.n	8003a68 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d108      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x4d8>
 8003a8e:	4b0f      	ldr	r3, [pc, #60]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 8003a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a94:	4a0d      	ldr	r2, [pc, #52]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 8003a96:	f043 0301 	orr.w	r3, r3, #1
 8003a9a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a9e:	e029      	b.n	8003af4 <HAL_RCC_OscConfig+0x52c>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	2b05      	cmp	r3, #5
 8003aa6:	d115      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x50c>
 8003aa8:	4b08      	ldr	r3, [pc, #32]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 8003aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aae:	4a07      	ldr	r2, [pc, #28]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 8003ab0:	f043 0304 	orr.w	r3, r3, #4
 8003ab4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003ab8:	4b04      	ldr	r3, [pc, #16]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 8003aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003abe:	4a03      	ldr	r2, [pc, #12]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 8003ac0:	f043 0301 	orr.w	r3, r3, #1
 8003ac4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003ac8:	e014      	b.n	8003af4 <HAL_RCC_OscConfig+0x52c>
 8003aca:	bf00      	nop
 8003acc:	40021000 	.word	0x40021000
 8003ad0:	40007000 	.word	0x40007000
 8003ad4:	4b9d      	ldr	r3, [pc, #628]	@ (8003d4c <HAL_RCC_OscConfig+0x784>)
 8003ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ada:	4a9c      	ldr	r2, [pc, #624]	@ (8003d4c <HAL_RCC_OscConfig+0x784>)
 8003adc:	f023 0301 	bic.w	r3, r3, #1
 8003ae0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003ae4:	4b99      	ldr	r3, [pc, #612]	@ (8003d4c <HAL_RCC_OscConfig+0x784>)
 8003ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aea:	4a98      	ldr	r2, [pc, #608]	@ (8003d4c <HAL_RCC_OscConfig+0x784>)
 8003aec:	f023 0304 	bic.w	r3, r3, #4
 8003af0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d016      	beq.n	8003b2a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003afc:	f7ff f82c 	bl	8002b58 <HAL_GetTick>
 8003b00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b02:	e00a      	b.n	8003b1a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b04:	f7ff f828 	bl	8002b58 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d901      	bls.n	8003b1a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e168      	b.n	8003dec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b1a:	4b8c      	ldr	r3, [pc, #560]	@ (8003d4c <HAL_RCC_OscConfig+0x784>)
 8003b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b20:	f003 0302 	and.w	r3, r3, #2
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d0ed      	beq.n	8003b04 <HAL_RCC_OscConfig+0x53c>
 8003b28:	e015      	b.n	8003b56 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b2a:	f7ff f815 	bl	8002b58 <HAL_GetTick>
 8003b2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b30:	e00a      	b.n	8003b48 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b32:	f7ff f811 	bl	8002b58 <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d901      	bls.n	8003b48 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e151      	b.n	8003dec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b48:	4b80      	ldr	r3, [pc, #512]	@ (8003d4c <HAL_RCC_OscConfig+0x784>)
 8003b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1ed      	bne.n	8003b32 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b56:	7ffb      	ldrb	r3, [r7, #31]
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d105      	bne.n	8003b68 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b5c:	4b7b      	ldr	r3, [pc, #492]	@ (8003d4c <HAL_RCC_OscConfig+0x784>)
 8003b5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b60:	4a7a      	ldr	r2, [pc, #488]	@ (8003d4c <HAL_RCC_OscConfig+0x784>)
 8003b62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b66:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0320 	and.w	r3, r3, #32
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d03c      	beq.n	8003bee <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d01c      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b7c:	4b73      	ldr	r3, [pc, #460]	@ (8003d4c <HAL_RCC_OscConfig+0x784>)
 8003b7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b82:	4a72      	ldr	r2, [pc, #456]	@ (8003d4c <HAL_RCC_OscConfig+0x784>)
 8003b84:	f043 0301 	orr.w	r3, r3, #1
 8003b88:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b8c:	f7fe ffe4 	bl	8002b58 <HAL_GetTick>
 8003b90:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b92:	e008      	b.n	8003ba6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b94:	f7fe ffe0 	bl	8002b58 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e122      	b.n	8003dec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003ba6:	4b69      	ldr	r3, [pc, #420]	@ (8003d4c <HAL_RCC_OscConfig+0x784>)
 8003ba8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003bac:	f003 0302 	and.w	r3, r3, #2
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d0ef      	beq.n	8003b94 <HAL_RCC_OscConfig+0x5cc>
 8003bb4:	e01b      	b.n	8003bee <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003bb6:	4b65      	ldr	r3, [pc, #404]	@ (8003d4c <HAL_RCC_OscConfig+0x784>)
 8003bb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003bbc:	4a63      	ldr	r2, [pc, #396]	@ (8003d4c <HAL_RCC_OscConfig+0x784>)
 8003bbe:	f023 0301 	bic.w	r3, r3, #1
 8003bc2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bc6:	f7fe ffc7 	bl	8002b58 <HAL_GetTick>
 8003bca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003bcc:	e008      	b.n	8003be0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003bce:	f7fe ffc3 	bl	8002b58 <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d901      	bls.n	8003be0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e105      	b.n	8003dec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003be0:	4b5a      	ldr	r3, [pc, #360]	@ (8003d4c <HAL_RCC_OscConfig+0x784>)
 8003be2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003be6:	f003 0302 	and.w	r3, r3, #2
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d1ef      	bne.n	8003bce <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	f000 80f9 	beq.w	8003dea <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	f040 80cf 	bne.w	8003da0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003c02:	4b52      	ldr	r3, [pc, #328]	@ (8003d4c <HAL_RCC_OscConfig+0x784>)
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	f003 0203 	and.w	r2, r3, #3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d12c      	bne.n	8003c70 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c20:	3b01      	subs	r3, #1
 8003c22:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d123      	bne.n	8003c70 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c32:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d11b      	bne.n	8003c70 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c42:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d113      	bne.n	8003c70 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c52:	085b      	lsrs	r3, r3, #1
 8003c54:	3b01      	subs	r3, #1
 8003c56:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d109      	bne.n	8003c70 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c66:	085b      	lsrs	r3, r3, #1
 8003c68:	3b01      	subs	r3, #1
 8003c6a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d071      	beq.n	8003d54 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	2b0c      	cmp	r3, #12
 8003c74:	d068      	beq.n	8003d48 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003c76:	4b35      	ldr	r3, [pc, #212]	@ (8003d4c <HAL_RCC_OscConfig+0x784>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d105      	bne.n	8003c8e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003c82:	4b32      	ldr	r3, [pc, #200]	@ (8003d4c <HAL_RCC_OscConfig+0x784>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d001      	beq.n	8003c92 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e0ac      	b.n	8003dec <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003c92:	4b2e      	ldr	r3, [pc, #184]	@ (8003d4c <HAL_RCC_OscConfig+0x784>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a2d      	ldr	r2, [pc, #180]	@ (8003d4c <HAL_RCC_OscConfig+0x784>)
 8003c98:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c9c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c9e:	f7fe ff5b 	bl	8002b58 <HAL_GetTick>
 8003ca2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ca4:	e008      	b.n	8003cb8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ca6:	f7fe ff57 	bl	8002b58 <HAL_GetTick>
 8003caa:	4602      	mov	r2, r0
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d901      	bls.n	8003cb8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e099      	b.n	8003dec <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cb8:	4b24      	ldr	r3, [pc, #144]	@ (8003d4c <HAL_RCC_OscConfig+0x784>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d1f0      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cc4:	4b21      	ldr	r3, [pc, #132]	@ (8003d4c <HAL_RCC_OscConfig+0x784>)
 8003cc6:	68da      	ldr	r2, [r3, #12]
 8003cc8:	4b21      	ldr	r3, [pc, #132]	@ (8003d50 <HAL_RCC_OscConfig+0x788>)
 8003cca:	4013      	ands	r3, r2
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003cd4:	3a01      	subs	r2, #1
 8003cd6:	0112      	lsls	r2, r2, #4
 8003cd8:	4311      	orrs	r1, r2
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003cde:	0212      	lsls	r2, r2, #8
 8003ce0:	4311      	orrs	r1, r2
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003ce6:	0852      	lsrs	r2, r2, #1
 8003ce8:	3a01      	subs	r2, #1
 8003cea:	0552      	lsls	r2, r2, #21
 8003cec:	4311      	orrs	r1, r2
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003cf2:	0852      	lsrs	r2, r2, #1
 8003cf4:	3a01      	subs	r2, #1
 8003cf6:	0652      	lsls	r2, r2, #25
 8003cf8:	4311      	orrs	r1, r2
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003cfe:	06d2      	lsls	r2, r2, #27
 8003d00:	430a      	orrs	r2, r1
 8003d02:	4912      	ldr	r1, [pc, #72]	@ (8003d4c <HAL_RCC_OscConfig+0x784>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003d08:	4b10      	ldr	r3, [pc, #64]	@ (8003d4c <HAL_RCC_OscConfig+0x784>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a0f      	ldr	r2, [pc, #60]	@ (8003d4c <HAL_RCC_OscConfig+0x784>)
 8003d0e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d12:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d14:	4b0d      	ldr	r3, [pc, #52]	@ (8003d4c <HAL_RCC_OscConfig+0x784>)
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	4a0c      	ldr	r2, [pc, #48]	@ (8003d4c <HAL_RCC_OscConfig+0x784>)
 8003d1a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d1e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003d20:	f7fe ff1a 	bl	8002b58 <HAL_GetTick>
 8003d24:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d26:	e008      	b.n	8003d3a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d28:	f7fe ff16 	bl	8002b58 <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d901      	bls.n	8003d3a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e058      	b.n	8003dec <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d3a:	4b04      	ldr	r3, [pc, #16]	@ (8003d4c <HAL_RCC_OscConfig+0x784>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d0f0      	beq.n	8003d28 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d46:	e050      	b.n	8003dea <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e04f      	b.n	8003dec <HAL_RCC_OscConfig+0x824>
 8003d4c:	40021000 	.word	0x40021000
 8003d50:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d54:	4b27      	ldr	r3, [pc, #156]	@ (8003df4 <HAL_RCC_OscConfig+0x82c>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d144      	bne.n	8003dea <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003d60:	4b24      	ldr	r3, [pc, #144]	@ (8003df4 <HAL_RCC_OscConfig+0x82c>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a23      	ldr	r2, [pc, #140]	@ (8003df4 <HAL_RCC_OscConfig+0x82c>)
 8003d66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d6a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d6c:	4b21      	ldr	r3, [pc, #132]	@ (8003df4 <HAL_RCC_OscConfig+0x82c>)
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	4a20      	ldr	r2, [pc, #128]	@ (8003df4 <HAL_RCC_OscConfig+0x82c>)
 8003d72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d76:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003d78:	f7fe feee 	bl	8002b58 <HAL_GetTick>
 8003d7c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d7e:	e008      	b.n	8003d92 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d80:	f7fe feea 	bl	8002b58 <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d901      	bls.n	8003d92 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e02c      	b.n	8003dec <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d92:	4b18      	ldr	r3, [pc, #96]	@ (8003df4 <HAL_RCC_OscConfig+0x82c>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d0f0      	beq.n	8003d80 <HAL_RCC_OscConfig+0x7b8>
 8003d9e:	e024      	b.n	8003dea <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	2b0c      	cmp	r3, #12
 8003da4:	d01f      	beq.n	8003de6 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003da6:	4b13      	ldr	r3, [pc, #76]	@ (8003df4 <HAL_RCC_OscConfig+0x82c>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a12      	ldr	r2, [pc, #72]	@ (8003df4 <HAL_RCC_OscConfig+0x82c>)
 8003dac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003db0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db2:	f7fe fed1 	bl	8002b58 <HAL_GetTick>
 8003db6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003db8:	e008      	b.n	8003dcc <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dba:	f7fe fecd 	bl	8002b58 <HAL_GetTick>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d901      	bls.n	8003dcc <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e00f      	b.n	8003dec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dcc:	4b09      	ldr	r3, [pc, #36]	@ (8003df4 <HAL_RCC_OscConfig+0x82c>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d1f0      	bne.n	8003dba <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003dd8:	4b06      	ldr	r3, [pc, #24]	@ (8003df4 <HAL_RCC_OscConfig+0x82c>)
 8003dda:	68da      	ldr	r2, [r3, #12]
 8003ddc:	4905      	ldr	r1, [pc, #20]	@ (8003df4 <HAL_RCC_OscConfig+0x82c>)
 8003dde:	4b06      	ldr	r3, [pc, #24]	@ (8003df8 <HAL_RCC_OscConfig+0x830>)
 8003de0:	4013      	ands	r3, r2
 8003de2:	60cb      	str	r3, [r1, #12]
 8003de4:	e001      	b.n	8003dea <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e000      	b.n	8003dec <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003dea:	2300      	movs	r3, #0
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3720      	adds	r7, #32
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	40021000 	.word	0x40021000
 8003df8:	feeefffc 	.word	0xfeeefffc

08003dfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d101      	bne.n	8003e10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e0e7      	b.n	8003fe0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e10:	4b75      	ldr	r3, [pc, #468]	@ (8003fe8 <HAL_RCC_ClockConfig+0x1ec>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0307 	and.w	r3, r3, #7
 8003e18:	683a      	ldr	r2, [r7, #0]
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d910      	bls.n	8003e40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e1e:	4b72      	ldr	r3, [pc, #456]	@ (8003fe8 <HAL_RCC_ClockConfig+0x1ec>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f023 0207 	bic.w	r2, r3, #7
 8003e26:	4970      	ldr	r1, [pc, #448]	@ (8003fe8 <HAL_RCC_ClockConfig+0x1ec>)
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e2e:	4b6e      	ldr	r3, [pc, #440]	@ (8003fe8 <HAL_RCC_ClockConfig+0x1ec>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0307 	and.w	r3, r3, #7
 8003e36:	683a      	ldr	r2, [r7, #0]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d001      	beq.n	8003e40 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e0cf      	b.n	8003fe0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0302 	and.w	r3, r3, #2
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d010      	beq.n	8003e6e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	689a      	ldr	r2, [r3, #8]
 8003e50:	4b66      	ldr	r3, [pc, #408]	@ (8003fec <HAL_RCC_ClockConfig+0x1f0>)
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d908      	bls.n	8003e6e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e5c:	4b63      	ldr	r3, [pc, #396]	@ (8003fec <HAL_RCC_ClockConfig+0x1f0>)
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	4960      	ldr	r1, [pc, #384]	@ (8003fec <HAL_RCC_ClockConfig+0x1f0>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d04c      	beq.n	8003f14 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	2b03      	cmp	r3, #3
 8003e80:	d107      	bne.n	8003e92 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e82:	4b5a      	ldr	r3, [pc, #360]	@ (8003fec <HAL_RCC_ClockConfig+0x1f0>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d121      	bne.n	8003ed2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e0a6      	b.n	8003fe0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d107      	bne.n	8003eaa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e9a:	4b54      	ldr	r3, [pc, #336]	@ (8003fec <HAL_RCC_ClockConfig+0x1f0>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d115      	bne.n	8003ed2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e09a      	b.n	8003fe0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d107      	bne.n	8003ec2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003eb2:	4b4e      	ldr	r3, [pc, #312]	@ (8003fec <HAL_RCC_ClockConfig+0x1f0>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0302 	and.w	r3, r3, #2
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d109      	bne.n	8003ed2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e08e      	b.n	8003fe0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ec2:	4b4a      	ldr	r3, [pc, #296]	@ (8003fec <HAL_RCC_ClockConfig+0x1f0>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d101      	bne.n	8003ed2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e086      	b.n	8003fe0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ed2:	4b46      	ldr	r3, [pc, #280]	@ (8003fec <HAL_RCC_ClockConfig+0x1f0>)
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f023 0203 	bic.w	r2, r3, #3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	4943      	ldr	r1, [pc, #268]	@ (8003fec <HAL_RCC_ClockConfig+0x1f0>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ee4:	f7fe fe38 	bl	8002b58 <HAL_GetTick>
 8003ee8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eea:	e00a      	b.n	8003f02 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003eec:	f7fe fe34 	bl	8002b58 <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d901      	bls.n	8003f02 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e06e      	b.n	8003fe0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f02:	4b3a      	ldr	r3, [pc, #232]	@ (8003fec <HAL_RCC_ClockConfig+0x1f0>)
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	f003 020c 	and.w	r2, r3, #12
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d1eb      	bne.n	8003eec <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0302 	and.w	r3, r3, #2
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d010      	beq.n	8003f42 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	689a      	ldr	r2, [r3, #8]
 8003f24:	4b31      	ldr	r3, [pc, #196]	@ (8003fec <HAL_RCC_ClockConfig+0x1f0>)
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d208      	bcs.n	8003f42 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f30:	4b2e      	ldr	r3, [pc, #184]	@ (8003fec <HAL_RCC_ClockConfig+0x1f0>)
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	492b      	ldr	r1, [pc, #172]	@ (8003fec <HAL_RCC_ClockConfig+0x1f0>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f42:	4b29      	ldr	r3, [pc, #164]	@ (8003fe8 <HAL_RCC_ClockConfig+0x1ec>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0307 	and.w	r3, r3, #7
 8003f4a:	683a      	ldr	r2, [r7, #0]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d210      	bcs.n	8003f72 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f50:	4b25      	ldr	r3, [pc, #148]	@ (8003fe8 <HAL_RCC_ClockConfig+0x1ec>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f023 0207 	bic.w	r2, r3, #7
 8003f58:	4923      	ldr	r1, [pc, #140]	@ (8003fe8 <HAL_RCC_ClockConfig+0x1ec>)
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f60:	4b21      	ldr	r3, [pc, #132]	@ (8003fe8 <HAL_RCC_ClockConfig+0x1ec>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0307 	and.w	r3, r3, #7
 8003f68:	683a      	ldr	r2, [r7, #0]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d001      	beq.n	8003f72 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e036      	b.n	8003fe0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0304 	and.w	r3, r3, #4
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d008      	beq.n	8003f90 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f7e:	4b1b      	ldr	r3, [pc, #108]	@ (8003fec <HAL_RCC_ClockConfig+0x1f0>)
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	4918      	ldr	r1, [pc, #96]	@ (8003fec <HAL_RCC_ClockConfig+0x1f0>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0308 	and.w	r3, r3, #8
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d009      	beq.n	8003fb0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f9c:	4b13      	ldr	r3, [pc, #76]	@ (8003fec <HAL_RCC_ClockConfig+0x1f0>)
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	00db      	lsls	r3, r3, #3
 8003faa:	4910      	ldr	r1, [pc, #64]	@ (8003fec <HAL_RCC_ClockConfig+0x1f0>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003fb0:	f000 f824 	bl	8003ffc <HAL_RCC_GetSysClockFreq>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	4b0d      	ldr	r3, [pc, #52]	@ (8003fec <HAL_RCC_ClockConfig+0x1f0>)
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	091b      	lsrs	r3, r3, #4
 8003fbc:	f003 030f 	and.w	r3, r3, #15
 8003fc0:	490b      	ldr	r1, [pc, #44]	@ (8003ff0 <HAL_RCC_ClockConfig+0x1f4>)
 8003fc2:	5ccb      	ldrb	r3, [r1, r3]
 8003fc4:	f003 031f 	and.w	r3, r3, #31
 8003fc8:	fa22 f303 	lsr.w	r3, r2, r3
 8003fcc:	4a09      	ldr	r2, [pc, #36]	@ (8003ff4 <HAL_RCC_ClockConfig+0x1f8>)
 8003fce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003fd0:	4b09      	ldr	r3, [pc, #36]	@ (8003ff8 <HAL_RCC_ClockConfig+0x1fc>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f7fe fd6f 	bl	8002ab8 <HAL_InitTick>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	72fb      	strb	r3, [r7, #11]

  return status;
 8003fde:	7afb      	ldrb	r3, [r7, #11]
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3710      	adds	r7, #16
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	40022000 	.word	0x40022000
 8003fec:	40021000 	.word	0x40021000
 8003ff0:	0800c2b4 	.word	0x0800c2b4
 8003ff4:	20000004 	.word	0x20000004
 8003ff8:	20000008 	.word	0x20000008

08003ffc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b089      	sub	sp, #36	@ 0x24
 8004000:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004002:	2300      	movs	r3, #0
 8004004:	61fb      	str	r3, [r7, #28]
 8004006:	2300      	movs	r3, #0
 8004008:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800400a:	4b3e      	ldr	r3, [pc, #248]	@ (8004104 <HAL_RCC_GetSysClockFreq+0x108>)
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	f003 030c 	and.w	r3, r3, #12
 8004012:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004014:	4b3b      	ldr	r3, [pc, #236]	@ (8004104 <HAL_RCC_GetSysClockFreq+0x108>)
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	f003 0303 	and.w	r3, r3, #3
 800401c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d005      	beq.n	8004030 <HAL_RCC_GetSysClockFreq+0x34>
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	2b0c      	cmp	r3, #12
 8004028:	d121      	bne.n	800406e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2b01      	cmp	r3, #1
 800402e:	d11e      	bne.n	800406e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004030:	4b34      	ldr	r3, [pc, #208]	@ (8004104 <HAL_RCC_GetSysClockFreq+0x108>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0308 	and.w	r3, r3, #8
 8004038:	2b00      	cmp	r3, #0
 800403a:	d107      	bne.n	800404c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800403c:	4b31      	ldr	r3, [pc, #196]	@ (8004104 <HAL_RCC_GetSysClockFreq+0x108>)
 800403e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004042:	0a1b      	lsrs	r3, r3, #8
 8004044:	f003 030f 	and.w	r3, r3, #15
 8004048:	61fb      	str	r3, [r7, #28]
 800404a:	e005      	b.n	8004058 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800404c:	4b2d      	ldr	r3, [pc, #180]	@ (8004104 <HAL_RCC_GetSysClockFreq+0x108>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	091b      	lsrs	r3, r3, #4
 8004052:	f003 030f 	and.w	r3, r3, #15
 8004056:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004058:	4a2b      	ldr	r2, [pc, #172]	@ (8004108 <HAL_RCC_GetSysClockFreq+0x10c>)
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004060:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d10d      	bne.n	8004084 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800406c:	e00a      	b.n	8004084 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	2b04      	cmp	r3, #4
 8004072:	d102      	bne.n	800407a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004074:	4b25      	ldr	r3, [pc, #148]	@ (800410c <HAL_RCC_GetSysClockFreq+0x110>)
 8004076:	61bb      	str	r3, [r7, #24]
 8004078:	e004      	b.n	8004084 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	2b08      	cmp	r3, #8
 800407e:	d101      	bne.n	8004084 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004080:	4b23      	ldr	r3, [pc, #140]	@ (8004110 <HAL_RCC_GetSysClockFreq+0x114>)
 8004082:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	2b0c      	cmp	r3, #12
 8004088:	d134      	bne.n	80040f4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800408a:	4b1e      	ldr	r3, [pc, #120]	@ (8004104 <HAL_RCC_GetSysClockFreq+0x108>)
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	f003 0303 	and.w	r3, r3, #3
 8004092:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	2b02      	cmp	r3, #2
 8004098:	d003      	beq.n	80040a2 <HAL_RCC_GetSysClockFreq+0xa6>
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	2b03      	cmp	r3, #3
 800409e:	d003      	beq.n	80040a8 <HAL_RCC_GetSysClockFreq+0xac>
 80040a0:	e005      	b.n	80040ae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80040a2:	4b1a      	ldr	r3, [pc, #104]	@ (800410c <HAL_RCC_GetSysClockFreq+0x110>)
 80040a4:	617b      	str	r3, [r7, #20]
      break;
 80040a6:	e005      	b.n	80040b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80040a8:	4b19      	ldr	r3, [pc, #100]	@ (8004110 <HAL_RCC_GetSysClockFreq+0x114>)
 80040aa:	617b      	str	r3, [r7, #20]
      break;
 80040ac:	e002      	b.n	80040b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	617b      	str	r3, [r7, #20]
      break;
 80040b2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80040b4:	4b13      	ldr	r3, [pc, #76]	@ (8004104 <HAL_RCC_GetSysClockFreq+0x108>)
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	091b      	lsrs	r3, r3, #4
 80040ba:	f003 0307 	and.w	r3, r3, #7
 80040be:	3301      	adds	r3, #1
 80040c0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80040c2:	4b10      	ldr	r3, [pc, #64]	@ (8004104 <HAL_RCC_GetSysClockFreq+0x108>)
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	0a1b      	lsrs	r3, r3, #8
 80040c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040cc:	697a      	ldr	r2, [r7, #20]
 80040ce:	fb03 f202 	mul.w	r2, r3, r2
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040d8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80040da:	4b0a      	ldr	r3, [pc, #40]	@ (8004104 <HAL_RCC_GetSysClockFreq+0x108>)
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	0e5b      	lsrs	r3, r3, #25
 80040e0:	f003 0303 	and.w	r3, r3, #3
 80040e4:	3301      	adds	r3, #1
 80040e6:	005b      	lsls	r3, r3, #1
 80040e8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80040ea:	697a      	ldr	r2, [r7, #20]
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80040f2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80040f4:	69bb      	ldr	r3, [r7, #24]
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3724      	adds	r7, #36	@ 0x24
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	40021000 	.word	0x40021000
 8004108:	0800c2cc 	.word	0x0800c2cc
 800410c:	00f42400 	.word	0x00f42400
 8004110:	007a1200 	.word	0x007a1200

08004114 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004114:	b480      	push	{r7}
 8004116:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004118:	4b03      	ldr	r3, [pc, #12]	@ (8004128 <HAL_RCC_GetHCLKFreq+0x14>)
 800411a:	681b      	ldr	r3, [r3, #0]
}
 800411c:	4618      	mov	r0, r3
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	20000004 	.word	0x20000004

0800412c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004130:	f7ff fff0 	bl	8004114 <HAL_RCC_GetHCLKFreq>
 8004134:	4602      	mov	r2, r0
 8004136:	4b06      	ldr	r3, [pc, #24]	@ (8004150 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	0a1b      	lsrs	r3, r3, #8
 800413c:	f003 0307 	and.w	r3, r3, #7
 8004140:	4904      	ldr	r1, [pc, #16]	@ (8004154 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004142:	5ccb      	ldrb	r3, [r1, r3]
 8004144:	f003 031f 	and.w	r3, r3, #31
 8004148:	fa22 f303 	lsr.w	r3, r2, r3
}
 800414c:	4618      	mov	r0, r3
 800414e:	bd80      	pop	{r7, pc}
 8004150:	40021000 	.word	0x40021000
 8004154:	0800c2c4 	.word	0x0800c2c4

08004158 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800415c:	f7ff ffda 	bl	8004114 <HAL_RCC_GetHCLKFreq>
 8004160:	4602      	mov	r2, r0
 8004162:	4b06      	ldr	r3, [pc, #24]	@ (800417c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	0adb      	lsrs	r3, r3, #11
 8004168:	f003 0307 	and.w	r3, r3, #7
 800416c:	4904      	ldr	r1, [pc, #16]	@ (8004180 <HAL_RCC_GetPCLK2Freq+0x28>)
 800416e:	5ccb      	ldrb	r3, [r1, r3]
 8004170:	f003 031f 	and.w	r3, r3, #31
 8004174:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004178:	4618      	mov	r0, r3
 800417a:	bd80      	pop	{r7, pc}
 800417c:	40021000 	.word	0x40021000
 8004180:	0800c2c4 	.word	0x0800c2c4

08004184 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b086      	sub	sp, #24
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800418c:	2300      	movs	r3, #0
 800418e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004190:	4b2a      	ldr	r3, [pc, #168]	@ (800423c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004192:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004194:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d003      	beq.n	80041a4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800419c:	f7ff f9a0 	bl	80034e0 <HAL_PWREx_GetVoltageRange>
 80041a0:	6178      	str	r0, [r7, #20]
 80041a2:	e014      	b.n	80041ce <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80041a4:	4b25      	ldr	r3, [pc, #148]	@ (800423c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041a8:	4a24      	ldr	r2, [pc, #144]	@ (800423c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80041b0:	4b22      	ldr	r3, [pc, #136]	@ (800423c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041b8:	60fb      	str	r3, [r7, #12]
 80041ba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80041bc:	f7ff f990 	bl	80034e0 <HAL_PWREx_GetVoltageRange>
 80041c0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80041c2:	4b1e      	ldr	r3, [pc, #120]	@ (800423c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041c6:	4a1d      	ldr	r2, [pc, #116]	@ (800423c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041cc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041d4:	d10b      	bne.n	80041ee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2b80      	cmp	r3, #128	@ 0x80
 80041da:	d919      	bls.n	8004210 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2ba0      	cmp	r3, #160	@ 0xa0
 80041e0:	d902      	bls.n	80041e8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80041e2:	2302      	movs	r3, #2
 80041e4:	613b      	str	r3, [r7, #16]
 80041e6:	e013      	b.n	8004210 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80041e8:	2301      	movs	r3, #1
 80041ea:	613b      	str	r3, [r7, #16]
 80041ec:	e010      	b.n	8004210 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2b80      	cmp	r3, #128	@ 0x80
 80041f2:	d902      	bls.n	80041fa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80041f4:	2303      	movs	r3, #3
 80041f6:	613b      	str	r3, [r7, #16]
 80041f8:	e00a      	b.n	8004210 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2b80      	cmp	r3, #128	@ 0x80
 80041fe:	d102      	bne.n	8004206 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004200:	2302      	movs	r3, #2
 8004202:	613b      	str	r3, [r7, #16]
 8004204:	e004      	b.n	8004210 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2b70      	cmp	r3, #112	@ 0x70
 800420a:	d101      	bne.n	8004210 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800420c:	2301      	movs	r3, #1
 800420e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004210:	4b0b      	ldr	r3, [pc, #44]	@ (8004240 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f023 0207 	bic.w	r2, r3, #7
 8004218:	4909      	ldr	r1, [pc, #36]	@ (8004240 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	4313      	orrs	r3, r2
 800421e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004220:	4b07      	ldr	r3, [pc, #28]	@ (8004240 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0307 	and.w	r3, r3, #7
 8004228:	693a      	ldr	r2, [r7, #16]
 800422a:	429a      	cmp	r2, r3
 800422c:	d001      	beq.n	8004232 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e000      	b.n	8004234 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004232:	2300      	movs	r3, #0
}
 8004234:	4618      	mov	r0, r3
 8004236:	3718      	adds	r7, #24
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}
 800423c:	40021000 	.word	0x40021000
 8004240:	40022000 	.word	0x40022000

08004244 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b086      	sub	sp, #24
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800424c:	2300      	movs	r3, #0
 800424e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004250:	2300      	movs	r3, #0
 8004252:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800425c:	2b00      	cmp	r3, #0
 800425e:	d041      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004264:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004268:	d02a      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800426a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800426e:	d824      	bhi.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004270:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004274:	d008      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004276:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800427a:	d81e      	bhi.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x76>
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00a      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004280:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004284:	d010      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004286:	e018      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004288:	4b86      	ldr	r3, [pc, #536]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	4a85      	ldr	r2, [pc, #532]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800428e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004292:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004294:	e015      	b.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	3304      	adds	r3, #4
 800429a:	2100      	movs	r1, #0
 800429c:	4618      	mov	r0, r3
 800429e:	f000 facd 	bl	800483c <RCCEx_PLLSAI1_Config>
 80042a2:	4603      	mov	r3, r0
 80042a4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80042a6:	e00c      	b.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	3320      	adds	r3, #32
 80042ac:	2100      	movs	r1, #0
 80042ae:	4618      	mov	r0, r3
 80042b0:	f000 fbb6 	bl	8004a20 <RCCEx_PLLSAI2_Config>
 80042b4:	4603      	mov	r3, r0
 80042b6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80042b8:	e003      	b.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	74fb      	strb	r3, [r7, #19]
      break;
 80042be:	e000      	b.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80042c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042c2:	7cfb      	ldrb	r3, [r7, #19]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d10b      	bne.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80042c8:	4b76      	ldr	r3, [pc, #472]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042ce:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80042d6:	4973      	ldr	r1, [pc, #460]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80042de:	e001      	b.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042e0:	7cfb      	ldrb	r3, [r7, #19]
 80042e2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d041      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042f4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80042f8:	d02a      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80042fa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80042fe:	d824      	bhi.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004300:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004304:	d008      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004306:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800430a:	d81e      	bhi.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00a      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004310:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004314:	d010      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004316:	e018      	b.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004318:	4b62      	ldr	r3, [pc, #392]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	4a61      	ldr	r2, [pc, #388]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800431e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004322:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004324:	e015      	b.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	3304      	adds	r3, #4
 800432a:	2100      	movs	r1, #0
 800432c:	4618      	mov	r0, r3
 800432e:	f000 fa85 	bl	800483c <RCCEx_PLLSAI1_Config>
 8004332:	4603      	mov	r3, r0
 8004334:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004336:	e00c      	b.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	3320      	adds	r3, #32
 800433c:	2100      	movs	r1, #0
 800433e:	4618      	mov	r0, r3
 8004340:	f000 fb6e 	bl	8004a20 <RCCEx_PLLSAI2_Config>
 8004344:	4603      	mov	r3, r0
 8004346:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004348:	e003      	b.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	74fb      	strb	r3, [r7, #19]
      break;
 800434e:	e000      	b.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004350:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004352:	7cfb      	ldrb	r3, [r7, #19]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d10b      	bne.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004358:	4b52      	ldr	r3, [pc, #328]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800435a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800435e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004366:	494f      	ldr	r1, [pc, #316]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004368:	4313      	orrs	r3, r2
 800436a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800436e:	e001      	b.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004370:	7cfb      	ldrb	r3, [r7, #19]
 8004372:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800437c:	2b00      	cmp	r3, #0
 800437e:	f000 80a0 	beq.w	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004382:	2300      	movs	r3, #0
 8004384:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004386:	4b47      	ldr	r3, [pc, #284]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004388:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800438a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d101      	bne.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004392:	2301      	movs	r3, #1
 8004394:	e000      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004396:	2300      	movs	r3, #0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d00d      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800439c:	4b41      	ldr	r3, [pc, #260]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800439e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043a0:	4a40      	ldr	r2, [pc, #256]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80043a8:	4b3e      	ldr	r3, [pc, #248]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043b0:	60bb      	str	r3, [r7, #8]
 80043b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043b4:	2301      	movs	r3, #1
 80043b6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043b8:	4b3b      	ldr	r3, [pc, #236]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a3a      	ldr	r2, [pc, #232]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80043be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043c4:	f7fe fbc8 	bl	8002b58 <HAL_GetTick>
 80043c8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80043ca:	e009      	b.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043cc:	f7fe fbc4 	bl	8002b58 <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d902      	bls.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	74fb      	strb	r3, [r7, #19]
        break;
 80043de:	e005      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80043e0:	4b31      	ldr	r3, [pc, #196]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d0ef      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80043ec:	7cfb      	ldrb	r3, [r7, #19]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d15c      	bne.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80043f2:	4b2c      	ldr	r3, [pc, #176]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043fc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d01f      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800440a:	697a      	ldr	r2, [r7, #20]
 800440c:	429a      	cmp	r2, r3
 800440e:	d019      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004410:	4b24      	ldr	r3, [pc, #144]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004412:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004416:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800441a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800441c:	4b21      	ldr	r3, [pc, #132]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800441e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004422:	4a20      	ldr	r2, [pc, #128]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004424:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004428:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800442c:	4b1d      	ldr	r3, [pc, #116]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800442e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004432:	4a1c      	ldr	r2, [pc, #112]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004434:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004438:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800443c:	4a19      	ldr	r2, [pc, #100]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	2b00      	cmp	r3, #0
 800444c:	d016      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800444e:	f7fe fb83 	bl	8002b58 <HAL_GetTick>
 8004452:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004454:	e00b      	b.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004456:	f7fe fb7f 	bl	8002b58 <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004464:	4293      	cmp	r3, r2
 8004466:	d902      	bls.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	74fb      	strb	r3, [r7, #19]
            break;
 800446c:	e006      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800446e:	4b0d      	ldr	r3, [pc, #52]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004470:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004474:	f003 0302 	and.w	r3, r3, #2
 8004478:	2b00      	cmp	r3, #0
 800447a:	d0ec      	beq.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800447c:	7cfb      	ldrb	r3, [r7, #19]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d10c      	bne.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004482:	4b08      	ldr	r3, [pc, #32]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004484:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004488:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004492:	4904      	ldr	r1, [pc, #16]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004494:	4313      	orrs	r3, r2
 8004496:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800449a:	e009      	b.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800449c:	7cfb      	ldrb	r3, [r7, #19]
 800449e:	74bb      	strb	r3, [r7, #18]
 80044a0:	e006      	b.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80044a2:	bf00      	nop
 80044a4:	40021000 	.word	0x40021000
 80044a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ac:	7cfb      	ldrb	r3, [r7, #19]
 80044ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044b0:	7c7b      	ldrb	r3, [r7, #17]
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d105      	bne.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044b6:	4ba6      	ldr	r3, [pc, #664]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80044b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044ba:	4aa5      	ldr	r2, [pc, #660]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80044bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044c0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0301 	and.w	r3, r3, #1
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00a      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044ce:	4ba0      	ldr	r3, [pc, #640]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80044d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044d4:	f023 0203 	bic.w	r2, r3, #3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044dc:	499c      	ldr	r1, [pc, #624]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0302 	and.w	r3, r3, #2
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d00a      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80044f0:	4b97      	ldr	r3, [pc, #604]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80044f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044f6:	f023 020c 	bic.w	r2, r3, #12
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044fe:	4994      	ldr	r1, [pc, #592]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004500:	4313      	orrs	r3, r2
 8004502:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0304 	and.w	r3, r3, #4
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00a      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004512:	4b8f      	ldr	r3, [pc, #572]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004514:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004518:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004520:	498b      	ldr	r1, [pc, #556]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004522:	4313      	orrs	r3, r2
 8004524:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0308 	and.w	r3, r3, #8
 8004530:	2b00      	cmp	r3, #0
 8004532:	d00a      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004534:	4b86      	ldr	r3, [pc, #536]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004536:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800453a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004542:	4983      	ldr	r1, [pc, #524]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004544:	4313      	orrs	r3, r2
 8004546:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0310 	and.w	r3, r3, #16
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00a      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004556:	4b7e      	ldr	r3, [pc, #504]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004558:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800455c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004564:	497a      	ldr	r1, [pc, #488]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004566:	4313      	orrs	r3, r2
 8004568:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0320 	and.w	r3, r3, #32
 8004574:	2b00      	cmp	r3, #0
 8004576:	d00a      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004578:	4b75      	ldr	r3, [pc, #468]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800457a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800457e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004586:	4972      	ldr	r1, [pc, #456]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004588:	4313      	orrs	r3, r2
 800458a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004596:	2b00      	cmp	r3, #0
 8004598:	d00a      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800459a:	4b6d      	ldr	r3, [pc, #436]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800459c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045a0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045a8:	4969      	ldr	r1, [pc, #420]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d00a      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80045bc:	4b64      	ldr	r3, [pc, #400]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80045be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045c2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80045ca:	4961      	ldr	r1, [pc, #388]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80045cc:	4313      	orrs	r3, r2
 80045ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d00a      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045de:	4b5c      	ldr	r3, [pc, #368]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80045e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045e4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045ec:	4958      	ldr	r1, [pc, #352]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d00a      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004600:	4b53      	ldr	r3, [pc, #332]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004602:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004606:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800460e:	4950      	ldr	r1, [pc, #320]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004610:	4313      	orrs	r3, r2
 8004612:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800461e:	2b00      	cmp	r3, #0
 8004620:	d00a      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004622:	4b4b      	ldr	r3, [pc, #300]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004624:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004628:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004630:	4947      	ldr	r1, [pc, #284]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004632:	4313      	orrs	r3, r2
 8004634:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004640:	2b00      	cmp	r3, #0
 8004642:	d00a      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004644:	4b42      	ldr	r3, [pc, #264]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004646:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800464a:	f023 0203 	bic.w	r2, r3, #3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004652:	493f      	ldr	r1, [pc, #252]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004654:	4313      	orrs	r3, r2
 8004656:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d028      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004666:	4b3a      	ldr	r3, [pc, #232]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004668:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800466c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004674:	4936      	ldr	r1, [pc, #216]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004676:	4313      	orrs	r3, r2
 8004678:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004680:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004684:	d106      	bne.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004686:	4b32      	ldr	r3, [pc, #200]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	4a31      	ldr	r2, [pc, #196]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800468c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004690:	60d3      	str	r3, [r2, #12]
 8004692:	e011      	b.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004698:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800469c:	d10c      	bne.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	3304      	adds	r3, #4
 80046a2:	2101      	movs	r1, #1
 80046a4:	4618      	mov	r0, r3
 80046a6:	f000 f8c9 	bl	800483c <RCCEx_PLLSAI1_Config>
 80046aa:	4603      	mov	r3, r0
 80046ac:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80046ae:	7cfb      	ldrb	r3, [r7, #19]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d001      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 80046b4:	7cfb      	ldrb	r3, [r7, #19]
 80046b6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d028      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80046c4:	4b22      	ldr	r3, [pc, #136]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80046c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046ca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046d2:	491f      	ldr	r1, [pc, #124]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80046d4:	4313      	orrs	r3, r2
 80046d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80046e2:	d106      	bne.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046e4:	4b1a      	ldr	r3, [pc, #104]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	4a19      	ldr	r2, [pc, #100]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80046ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80046ee:	60d3      	str	r3, [r2, #12]
 80046f0:	e011      	b.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046f6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80046fa:	d10c      	bne.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	3304      	adds	r3, #4
 8004700:	2101      	movs	r1, #1
 8004702:	4618      	mov	r0, r3
 8004704:	f000 f89a 	bl	800483c <RCCEx_PLLSAI1_Config>
 8004708:	4603      	mov	r3, r0
 800470a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800470c:	7cfb      	ldrb	r3, [r7, #19]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d001      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8004712:	7cfb      	ldrb	r3, [r7, #19]
 8004714:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d02a      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004722:	4b0b      	ldr	r3, [pc, #44]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004724:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004728:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004730:	4907      	ldr	r1, [pc, #28]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004732:	4313      	orrs	r3, r2
 8004734:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800473c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004740:	d108      	bne.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004742:	4b03      	ldr	r3, [pc, #12]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	4a02      	ldr	r2, [pc, #8]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004748:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800474c:	60d3      	str	r3, [r2, #12]
 800474e:	e013      	b.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8004750:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004758:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800475c:	d10c      	bne.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	3304      	adds	r3, #4
 8004762:	2101      	movs	r1, #1
 8004764:	4618      	mov	r0, r3
 8004766:	f000 f869 	bl	800483c <RCCEx_PLLSAI1_Config>
 800476a:	4603      	mov	r3, r0
 800476c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800476e:	7cfb      	ldrb	r3, [r7, #19]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d001      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8004774:	7cfb      	ldrb	r3, [r7, #19]
 8004776:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d02f      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004784:	4b2c      	ldr	r3, [pc, #176]	@ (8004838 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004786:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800478a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004792:	4929      	ldr	r1, [pc, #164]	@ (8004838 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004794:	4313      	orrs	r3, r2
 8004796:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800479e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80047a2:	d10d      	bne.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	3304      	adds	r3, #4
 80047a8:	2102      	movs	r1, #2
 80047aa:	4618      	mov	r0, r3
 80047ac:	f000 f846 	bl	800483c <RCCEx_PLLSAI1_Config>
 80047b0:	4603      	mov	r3, r0
 80047b2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047b4:	7cfb      	ldrb	r3, [r7, #19]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d014      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80047ba:	7cfb      	ldrb	r3, [r7, #19]
 80047bc:	74bb      	strb	r3, [r7, #18]
 80047be:	e011      	b.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80047c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80047c8:	d10c      	bne.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	3320      	adds	r3, #32
 80047ce:	2102      	movs	r1, #2
 80047d0:	4618      	mov	r0, r3
 80047d2:	f000 f925 	bl	8004a20 <RCCEx_PLLSAI2_Config>
 80047d6:	4603      	mov	r3, r0
 80047d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047da:	7cfb      	ldrb	r3, [r7, #19]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d001      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80047e0:	7cfb      	ldrb	r3, [r7, #19]
 80047e2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d00b      	beq.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80047f0:	4b11      	ldr	r3, [pc, #68]	@ (8004838 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80047f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047f6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004800:	490d      	ldr	r1, [pc, #52]	@ (8004838 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004802:	4313      	orrs	r3, r2
 8004804:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004810:	2b00      	cmp	r3, #0
 8004812:	d00b      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004814:	4b08      	ldr	r3, [pc, #32]	@ (8004838 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004816:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800481a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004824:	4904      	ldr	r1, [pc, #16]	@ (8004838 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004826:	4313      	orrs	r3, r2
 8004828:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800482c:	7cbb      	ldrb	r3, [r7, #18]
}
 800482e:	4618      	mov	r0, r3
 8004830:	3718      	adds	r7, #24
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	40021000 	.word	0x40021000

0800483c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004846:	2300      	movs	r3, #0
 8004848:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800484a:	4b74      	ldr	r3, [pc, #464]	@ (8004a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	f003 0303 	and.w	r3, r3, #3
 8004852:	2b00      	cmp	r3, #0
 8004854:	d018      	beq.n	8004888 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004856:	4b71      	ldr	r3, [pc, #452]	@ (8004a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	f003 0203 	and.w	r2, r3, #3
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	429a      	cmp	r2, r3
 8004864:	d10d      	bne.n	8004882 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
       ||
 800486a:	2b00      	cmp	r3, #0
 800486c:	d009      	beq.n	8004882 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800486e:	4b6b      	ldr	r3, [pc, #428]	@ (8004a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	091b      	lsrs	r3, r3, #4
 8004874:	f003 0307 	and.w	r3, r3, #7
 8004878:	1c5a      	adds	r2, r3, #1
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
       ||
 800487e:	429a      	cmp	r2, r3
 8004880:	d047      	beq.n	8004912 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	73fb      	strb	r3, [r7, #15]
 8004886:	e044      	b.n	8004912 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2b03      	cmp	r3, #3
 800488e:	d018      	beq.n	80048c2 <RCCEx_PLLSAI1_Config+0x86>
 8004890:	2b03      	cmp	r3, #3
 8004892:	d825      	bhi.n	80048e0 <RCCEx_PLLSAI1_Config+0xa4>
 8004894:	2b01      	cmp	r3, #1
 8004896:	d002      	beq.n	800489e <RCCEx_PLLSAI1_Config+0x62>
 8004898:	2b02      	cmp	r3, #2
 800489a:	d009      	beq.n	80048b0 <RCCEx_PLLSAI1_Config+0x74>
 800489c:	e020      	b.n	80048e0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800489e:	4b5f      	ldr	r3, [pc, #380]	@ (8004a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0302 	and.w	r3, r3, #2
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d11d      	bne.n	80048e6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048ae:	e01a      	b.n	80048e6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80048b0:	4b5a      	ldr	r3, [pc, #360]	@ (8004a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d116      	bne.n	80048ea <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048c0:	e013      	b.n	80048ea <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80048c2:	4b56      	ldr	r3, [pc, #344]	@ (8004a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d10f      	bne.n	80048ee <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80048ce:	4b53      	ldr	r3, [pc, #332]	@ (8004a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d109      	bne.n	80048ee <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80048de:	e006      	b.n	80048ee <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	73fb      	strb	r3, [r7, #15]
      break;
 80048e4:	e004      	b.n	80048f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80048e6:	bf00      	nop
 80048e8:	e002      	b.n	80048f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80048ea:	bf00      	nop
 80048ec:	e000      	b.n	80048f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80048ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80048f0:	7bfb      	ldrb	r3, [r7, #15]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d10d      	bne.n	8004912 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80048f6:	4b49      	ldr	r3, [pc, #292]	@ (8004a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6819      	ldr	r1, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	3b01      	subs	r3, #1
 8004908:	011b      	lsls	r3, r3, #4
 800490a:	430b      	orrs	r3, r1
 800490c:	4943      	ldr	r1, [pc, #268]	@ (8004a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 800490e:	4313      	orrs	r3, r2
 8004910:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004912:	7bfb      	ldrb	r3, [r7, #15]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d17c      	bne.n	8004a12 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004918:	4b40      	ldr	r3, [pc, #256]	@ (8004a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a3f      	ldr	r2, [pc, #252]	@ (8004a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 800491e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004922:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004924:	f7fe f918 	bl	8002b58 <HAL_GetTick>
 8004928:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800492a:	e009      	b.n	8004940 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800492c:	f7fe f914 	bl	8002b58 <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	2b02      	cmp	r3, #2
 8004938:	d902      	bls.n	8004940 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	73fb      	strb	r3, [r7, #15]
        break;
 800493e:	e005      	b.n	800494c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004940:	4b36      	ldr	r3, [pc, #216]	@ (8004a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004948:	2b00      	cmp	r3, #0
 800494a:	d1ef      	bne.n	800492c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800494c:	7bfb      	ldrb	r3, [r7, #15]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d15f      	bne.n	8004a12 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d110      	bne.n	800497a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004958:	4b30      	ldr	r3, [pc, #192]	@ (8004a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004960:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	6892      	ldr	r2, [r2, #8]
 8004968:	0211      	lsls	r1, r2, #8
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	68d2      	ldr	r2, [r2, #12]
 800496e:	06d2      	lsls	r2, r2, #27
 8004970:	430a      	orrs	r2, r1
 8004972:	492a      	ldr	r1, [pc, #168]	@ (8004a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004974:	4313      	orrs	r3, r2
 8004976:	610b      	str	r3, [r1, #16]
 8004978:	e027      	b.n	80049ca <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	2b01      	cmp	r3, #1
 800497e:	d112      	bne.n	80049a6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004980:	4b26      	ldr	r3, [pc, #152]	@ (8004a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004982:	691b      	ldr	r3, [r3, #16]
 8004984:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004988:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	6892      	ldr	r2, [r2, #8]
 8004990:	0211      	lsls	r1, r2, #8
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	6912      	ldr	r2, [r2, #16]
 8004996:	0852      	lsrs	r2, r2, #1
 8004998:	3a01      	subs	r2, #1
 800499a:	0552      	lsls	r2, r2, #21
 800499c:	430a      	orrs	r2, r1
 800499e:	491f      	ldr	r1, [pc, #124]	@ (8004a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 80049a0:	4313      	orrs	r3, r2
 80049a2:	610b      	str	r3, [r1, #16]
 80049a4:	e011      	b.n	80049ca <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049a6:	4b1d      	ldr	r3, [pc, #116]	@ (8004a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 80049a8:	691b      	ldr	r3, [r3, #16]
 80049aa:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80049ae:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	6892      	ldr	r2, [r2, #8]
 80049b6:	0211      	lsls	r1, r2, #8
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	6952      	ldr	r2, [r2, #20]
 80049bc:	0852      	lsrs	r2, r2, #1
 80049be:	3a01      	subs	r2, #1
 80049c0:	0652      	lsls	r2, r2, #25
 80049c2:	430a      	orrs	r2, r1
 80049c4:	4915      	ldr	r1, [pc, #84]	@ (8004a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 80049c6:	4313      	orrs	r3, r2
 80049c8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80049ca:	4b14      	ldr	r3, [pc, #80]	@ (8004a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a13      	ldr	r2, [pc, #76]	@ (8004a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 80049d0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80049d4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049d6:	f7fe f8bf 	bl	8002b58 <HAL_GetTick>
 80049da:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80049dc:	e009      	b.n	80049f2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80049de:	f7fe f8bb 	bl	8002b58 <HAL_GetTick>
 80049e2:	4602      	mov	r2, r0
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	d902      	bls.n	80049f2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80049ec:	2303      	movs	r3, #3
 80049ee:	73fb      	strb	r3, [r7, #15]
          break;
 80049f0:	e005      	b.n	80049fe <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80049f2:	4b0a      	ldr	r3, [pc, #40]	@ (8004a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d0ef      	beq.n	80049de <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80049fe:	7bfb      	ldrb	r3, [r7, #15]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d106      	bne.n	8004a12 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004a04:	4b05      	ldr	r3, [pc, #20]	@ (8004a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a06:	691a      	ldr	r2, [r3, #16]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	699b      	ldr	r3, [r3, #24]
 8004a0c:	4903      	ldr	r1, [pc, #12]	@ (8004a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3710      	adds	r7, #16
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	40021000 	.word	0x40021000

08004a20 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a2e:	4b69      	ldr	r3, [pc, #420]	@ (8004bd4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	f003 0303 	and.w	r3, r3, #3
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d018      	beq.n	8004a6c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004a3a:	4b66      	ldr	r3, [pc, #408]	@ (8004bd4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	f003 0203 	and.w	r2, r3, #3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d10d      	bne.n	8004a66 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
       ||
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d009      	beq.n	8004a66 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004a52:	4b60      	ldr	r3, [pc, #384]	@ (8004bd4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	091b      	lsrs	r3, r3, #4
 8004a58:	f003 0307 	and.w	r3, r3, #7
 8004a5c:	1c5a      	adds	r2, r3, #1
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	685b      	ldr	r3, [r3, #4]
       ||
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d047      	beq.n	8004af6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	73fb      	strb	r3, [r7, #15]
 8004a6a:	e044      	b.n	8004af6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2b03      	cmp	r3, #3
 8004a72:	d018      	beq.n	8004aa6 <RCCEx_PLLSAI2_Config+0x86>
 8004a74:	2b03      	cmp	r3, #3
 8004a76:	d825      	bhi.n	8004ac4 <RCCEx_PLLSAI2_Config+0xa4>
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d002      	beq.n	8004a82 <RCCEx_PLLSAI2_Config+0x62>
 8004a7c:	2b02      	cmp	r3, #2
 8004a7e:	d009      	beq.n	8004a94 <RCCEx_PLLSAI2_Config+0x74>
 8004a80:	e020      	b.n	8004ac4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a82:	4b54      	ldr	r3, [pc, #336]	@ (8004bd4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0302 	and.w	r3, r3, #2
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d11d      	bne.n	8004aca <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a92:	e01a      	b.n	8004aca <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a94:	4b4f      	ldr	r3, [pc, #316]	@ (8004bd4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d116      	bne.n	8004ace <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004aa4:	e013      	b.n	8004ace <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004aa6:	4b4b      	ldr	r3, [pc, #300]	@ (8004bd4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d10f      	bne.n	8004ad2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004ab2:	4b48      	ldr	r3, [pc, #288]	@ (8004bd4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d109      	bne.n	8004ad2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004ac2:	e006      	b.n	8004ad2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ac8:	e004      	b.n	8004ad4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004aca:	bf00      	nop
 8004acc:	e002      	b.n	8004ad4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004ace:	bf00      	nop
 8004ad0:	e000      	b.n	8004ad4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004ad2:	bf00      	nop
    }

    if(status == HAL_OK)
 8004ad4:	7bfb      	ldrb	r3, [r7, #15]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d10d      	bne.n	8004af6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004ada:	4b3e      	ldr	r3, [pc, #248]	@ (8004bd4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6819      	ldr	r1, [r3, #0]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	3b01      	subs	r3, #1
 8004aec:	011b      	lsls	r3, r3, #4
 8004aee:	430b      	orrs	r3, r1
 8004af0:	4938      	ldr	r1, [pc, #224]	@ (8004bd4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004af6:	7bfb      	ldrb	r3, [r7, #15]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d166      	bne.n	8004bca <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004afc:	4b35      	ldr	r3, [pc, #212]	@ (8004bd4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a34      	ldr	r2, [pc, #208]	@ (8004bd4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004b02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b08:	f7fe f826 	bl	8002b58 <HAL_GetTick>
 8004b0c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004b0e:	e009      	b.n	8004b24 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b10:	f7fe f822 	bl	8002b58 <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d902      	bls.n	8004b24 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	73fb      	strb	r3, [r7, #15]
        break;
 8004b22:	e005      	b.n	8004b30 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004b24:	4b2b      	ldr	r3, [pc, #172]	@ (8004bd4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d1ef      	bne.n	8004b10 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004b30:	7bfb      	ldrb	r3, [r7, #15]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d149      	bne.n	8004bca <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d110      	bne.n	8004b5e <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b3c:	4b25      	ldr	r3, [pc, #148]	@ (8004bd4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004b3e:	695b      	ldr	r3, [r3, #20]
 8004b40:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004b44:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	6892      	ldr	r2, [r2, #8]
 8004b4c:	0211      	lsls	r1, r2, #8
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	68d2      	ldr	r2, [r2, #12]
 8004b52:	06d2      	lsls	r2, r2, #27
 8004b54:	430a      	orrs	r2, r1
 8004b56:	491f      	ldr	r1, [pc, #124]	@ (8004bd4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	614b      	str	r3, [r1, #20]
 8004b5c:	e011      	b.n	8004b82 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b5e:	4b1d      	ldr	r3, [pc, #116]	@ (8004bd4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004b60:	695b      	ldr	r3, [r3, #20]
 8004b62:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004b66:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	6892      	ldr	r2, [r2, #8]
 8004b6e:	0211      	lsls	r1, r2, #8
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	6912      	ldr	r2, [r2, #16]
 8004b74:	0852      	lsrs	r2, r2, #1
 8004b76:	3a01      	subs	r2, #1
 8004b78:	0652      	lsls	r2, r2, #25
 8004b7a:	430a      	orrs	r2, r1
 8004b7c:	4915      	ldr	r1, [pc, #84]	@ (8004bd4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004b82:	4b14      	ldr	r3, [pc, #80]	@ (8004bd4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a13      	ldr	r2, [pc, #76]	@ (8004bd4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004b88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b8c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b8e:	f7fd ffe3 	bl	8002b58 <HAL_GetTick>
 8004b92:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b94:	e009      	b.n	8004baa <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b96:	f7fd ffdf 	bl	8002b58 <HAL_GetTick>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d902      	bls.n	8004baa <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	73fb      	strb	r3, [r7, #15]
          break;
 8004ba8:	e005      	b.n	8004bb6 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004baa:	4b0a      	ldr	r3, [pc, #40]	@ (8004bd4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d0ef      	beq.n	8004b96 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8004bb6:	7bfb      	ldrb	r3, [r7, #15]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d106      	bne.n	8004bca <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004bbc:	4b05      	ldr	r3, [pc, #20]	@ (8004bd4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004bbe:	695a      	ldr	r2, [r3, #20]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	695b      	ldr	r3, [r3, #20]
 8004bc4:	4903      	ldr	r1, [pc, #12]	@ (8004bd4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3710      	adds	r7, #16
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	40021000 	.word	0x40021000

08004bd8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d101      	bne.n	8004bea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e095      	b.n	8004d16 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d108      	bne.n	8004c04 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004bfa:	d009      	beq.n	8004c10 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	61da      	str	r2, [r3, #28]
 8004c02:	e005      	b.n	8004c10 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d106      	bne.n	8004c30 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 f877 	bl	8004d1e <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2202      	movs	r2, #2
 8004c34:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c46:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004c50:	d902      	bls.n	8004c58 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004c52:	2300      	movs	r3, #0
 8004c54:	60fb      	str	r3, [r7, #12]
 8004c56:	e002      	b.n	8004c5e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004c58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004c5c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004c66:	d007      	beq.n	8004c78 <HAL_SPI_Init+0xa0>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004c70:	d002      	beq.n	8004c78 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004c88:	431a      	orrs	r2, r3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	f003 0302 	and.w	r3, r3, #2
 8004c92:	431a      	orrs	r2, r3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	695b      	ldr	r3, [r3, #20]
 8004c98:	f003 0301 	and.w	r3, r3, #1
 8004c9c:	431a      	orrs	r2, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	699b      	ldr	r3, [r3, #24]
 8004ca2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ca6:	431a      	orrs	r2, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	69db      	ldr	r3, [r3, #28]
 8004cac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004cb0:	431a      	orrs	r2, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a1b      	ldr	r3, [r3, #32]
 8004cb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cba:	ea42 0103 	orr.w	r1, r2, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cc2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	699b      	ldr	r3, [r3, #24]
 8004cd2:	0c1b      	lsrs	r3, r3, #16
 8004cd4:	f003 0204 	and.w	r2, r3, #4
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cdc:	f003 0310 	and.w	r3, r3, #16
 8004ce0:	431a      	orrs	r2, r3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ce6:	f003 0308 	and.w	r3, r3, #8
 8004cea:	431a      	orrs	r2, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004cf4:	ea42 0103 	orr.w	r1, r2, r3
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	430a      	orrs	r2, r1
 8004d04:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3710      	adds	r7, #16
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}

08004d1e <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8004d1e:	b480      	push	{r7}
 8004d20:	b083      	sub	sp, #12
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8004d26:	bf00      	nop
 8004d28:	370c      	adds	r7, #12
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr

08004d32 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004d32:	b580      	push	{r7, lr}
 8004d34:	b08a      	sub	sp, #40	@ 0x28
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	60f8      	str	r0, [r7, #12]
 8004d3a:	60b9      	str	r1, [r7, #8]
 8004d3c:	607a      	str	r2, [r7, #4]
 8004d3e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004d40:	2301      	movs	r3, #1
 8004d42:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d44:	f7fd ff08 	bl	8002b58 <HAL_GetTick>
 8004d48:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004d50:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004d58:	887b      	ldrh	r3, [r7, #2]
 8004d5a:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8004d5c:	887b      	ldrh	r3, [r7, #2]
 8004d5e:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004d60:	7ffb      	ldrb	r3, [r7, #31]
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d00c      	beq.n	8004d80 <HAL_SPI_TransmitReceive+0x4e>
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d6c:	d106      	bne.n	8004d7c <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d102      	bne.n	8004d7c <HAL_SPI_TransmitReceive+0x4a>
 8004d76:	7ffb      	ldrb	r3, [r7, #31]
 8004d78:	2b04      	cmp	r3, #4
 8004d7a:	d001      	beq.n	8004d80 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004d7c:	2302      	movs	r3, #2
 8004d7e:	e1f3      	b.n	8005168 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d005      	beq.n	8004d92 <HAL_SPI_TransmitReceive+0x60>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d002      	beq.n	8004d92 <HAL_SPI_TransmitReceive+0x60>
 8004d8c:	887b      	ldrh	r3, [r7, #2]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d101      	bne.n	8004d96 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e1e8      	b.n	8005168 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d101      	bne.n	8004da4 <HAL_SPI_TransmitReceive+0x72>
 8004da0:	2302      	movs	r3, #2
 8004da2:	e1e1      	b.n	8005168 <HAL_SPI_TransmitReceive+0x436>
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	2b04      	cmp	r3, #4
 8004db6:	d003      	beq.n	8004dc0 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2205      	movs	r2, #5
 8004dbc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	687a      	ldr	r2, [r7, #4]
 8004dca:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	887a      	ldrh	r2, [r7, #2]
 8004dd0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	887a      	ldrh	r2, [r7, #2]
 8004dd8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	68ba      	ldr	r2, [r7, #8]
 8004de0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	887a      	ldrh	r2, [r7, #2]
 8004de6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	887a      	ldrh	r2, [r7, #2]
 8004dec:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2200      	movs	r2, #0
 8004df2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2200      	movs	r2, #0
 8004df8:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004e02:	d802      	bhi.n	8004e0a <HAL_SPI_TransmitReceive+0xd8>
 8004e04:	8abb      	ldrh	r3, [r7, #20]
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d908      	bls.n	8004e1c <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	685a      	ldr	r2, [r3, #4]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004e18:	605a      	str	r2, [r3, #4]
 8004e1a:	e007      	b.n	8004e2c <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	685a      	ldr	r2, [r3, #4]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004e2a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e36:	2b40      	cmp	r3, #64	@ 0x40
 8004e38:	d007      	beq.n	8004e4a <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e48:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004e52:	f240 8083 	bls.w	8004f5c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d002      	beq.n	8004e64 <HAL_SPI_TransmitReceive+0x132>
 8004e5e:	8afb      	ldrh	r3, [r7, #22]
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d16f      	bne.n	8004f44 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e68:	881a      	ldrh	r2, [r3, #0]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e74:	1c9a      	adds	r2, r3, #2
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	3b01      	subs	r3, #1
 8004e82:	b29a      	uxth	r2, r3
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e88:	e05c      	b.n	8004f44 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	f003 0302 	and.w	r3, r3, #2
 8004e94:	2b02      	cmp	r3, #2
 8004e96:	d11b      	bne.n	8004ed0 <HAL_SPI_TransmitReceive+0x19e>
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d016      	beq.n	8004ed0 <HAL_SPI_TransmitReceive+0x19e>
 8004ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d113      	bne.n	8004ed0 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eac:	881a      	ldrh	r2, [r3, #0]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eb8:	1c9a      	adds	r2, r3, #2
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	3b01      	subs	r3, #1
 8004ec6:	b29a      	uxth	r2, r3
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	f003 0301 	and.w	r3, r3, #1
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d11c      	bne.n	8004f18 <HAL_SPI_TransmitReceive+0x1e6>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d016      	beq.n	8004f18 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	68da      	ldr	r2, [r3, #12]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ef4:	b292      	uxth	r2, r2
 8004ef6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004efc:	1c9a      	adds	r2, r3, #2
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	b29a      	uxth	r2, r3
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f14:	2301      	movs	r3, #1
 8004f16:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004f18:	f7fd fe1e 	bl	8002b58 <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	6a3b      	ldr	r3, [r7, #32]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d80d      	bhi.n	8004f44 <HAL_SPI_TransmitReceive+0x212>
 8004f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f2e:	d009      	beq.n	8004f44 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8004f40:	2303      	movs	r3, #3
 8004f42:	e111      	b.n	8005168 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d19d      	bne.n	8004e8a <HAL_SPI_TransmitReceive+0x158>
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d197      	bne.n	8004e8a <HAL_SPI_TransmitReceive+0x158>
 8004f5a:	e0e5      	b.n	8005128 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d003      	beq.n	8004f6c <HAL_SPI_TransmitReceive+0x23a>
 8004f64:	8afb      	ldrh	r3, [r7, #22]
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	f040 80d1 	bne.w	800510e <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d912      	bls.n	8004f9c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f7a:	881a      	ldrh	r2, [r3, #0]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f86:	1c9a      	adds	r2, r3, #2
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	3b02      	subs	r3, #2
 8004f94:	b29a      	uxth	r2, r3
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004f9a:	e0b8      	b.n	800510e <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	330c      	adds	r3, #12
 8004fa6:	7812      	ldrb	r2, [r2, #0]
 8004fa8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fae:	1c5a      	adds	r2, r3, #1
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	3b01      	subs	r3, #1
 8004fbc:	b29a      	uxth	r2, r3
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fc2:	e0a4      	b.n	800510e <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	f003 0302 	and.w	r3, r3, #2
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d134      	bne.n	800503c <HAL_SPI_TransmitReceive+0x30a>
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d02f      	beq.n	800503c <HAL_SPI_TransmitReceive+0x30a>
 8004fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d12c      	bne.n	800503c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d912      	bls.n	8005012 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ff0:	881a      	ldrh	r2, [r3, #0]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ffc:	1c9a      	adds	r2, r3, #2
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005006:	b29b      	uxth	r3, r3
 8005008:	3b02      	subs	r3, #2
 800500a:	b29a      	uxth	r2, r3
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005010:	e012      	b.n	8005038 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	330c      	adds	r3, #12
 800501c:	7812      	ldrb	r2, [r2, #0]
 800501e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005024:	1c5a      	adds	r2, r3, #1
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800502e:	b29b      	uxth	r3, r3
 8005030:	3b01      	subs	r3, #1
 8005032:	b29a      	uxth	r2, r3
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005038:	2300      	movs	r3, #0
 800503a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	f003 0301 	and.w	r3, r3, #1
 8005046:	2b01      	cmp	r3, #1
 8005048:	d148      	bne.n	80050dc <HAL_SPI_TransmitReceive+0x3aa>
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005050:	b29b      	uxth	r3, r3
 8005052:	2b00      	cmp	r3, #0
 8005054:	d042      	beq.n	80050dc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800505c:	b29b      	uxth	r3, r3
 800505e:	2b01      	cmp	r3, #1
 8005060:	d923      	bls.n	80050aa <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68da      	ldr	r2, [r3, #12]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800506c:	b292      	uxth	r2, r2
 800506e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005074:	1c9a      	adds	r2, r3, #2
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005080:	b29b      	uxth	r3, r3
 8005082:	3b02      	subs	r3, #2
 8005084:	b29a      	uxth	r2, r3
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005092:	b29b      	uxth	r3, r3
 8005094:	2b01      	cmp	r3, #1
 8005096:	d81f      	bhi.n	80050d8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	685a      	ldr	r2, [r3, #4]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80050a6:	605a      	str	r2, [r3, #4]
 80050a8:	e016      	b.n	80050d8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f103 020c 	add.w	r2, r3, #12
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050b6:	7812      	ldrb	r2, [r2, #0]
 80050b8:	b2d2      	uxtb	r2, r2
 80050ba:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050c0:	1c5a      	adds	r2, r3, #1
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	3b01      	subs	r3, #1
 80050d0:	b29a      	uxth	r2, r3
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80050d8:	2301      	movs	r3, #1
 80050da:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80050dc:	f7fd fd3c 	bl	8002b58 <HAL_GetTick>
 80050e0:	4602      	mov	r2, r0
 80050e2:	6a3b      	ldr	r3, [r7, #32]
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d803      	bhi.n	80050f4 <HAL_SPI_TransmitReceive+0x3c2>
 80050ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050f2:	d102      	bne.n	80050fa <HAL_SPI_TransmitReceive+0x3c8>
 80050f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d109      	bne.n	800510e <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2201      	movs	r2, #1
 80050fe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2200      	movs	r2, #0
 8005106:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	e02c      	b.n	8005168 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005112:	b29b      	uxth	r3, r3
 8005114:	2b00      	cmp	r3, #0
 8005116:	f47f af55 	bne.w	8004fc4 <HAL_SPI_TransmitReceive+0x292>
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005120:	b29b      	uxth	r3, r3
 8005122:	2b00      	cmp	r3, #0
 8005124:	f47f af4e 	bne.w	8004fc4 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005128:	6a3a      	ldr	r2, [r7, #32]
 800512a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800512c:	68f8      	ldr	r0, [r7, #12]
 800512e:	f000 f94b 	bl	80053c8 <SPI_EndRxTxTransaction>
 8005132:	4603      	mov	r3, r0
 8005134:	2b00      	cmp	r3, #0
 8005136:	d008      	beq.n	800514a <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2220      	movs	r2, #32
 800513c:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2200      	movs	r2, #0
 8005142:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e00e      	b.n	8005168 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2201      	movs	r2, #1
 800514e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2200      	movs	r2, #0
 8005156:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800515e:	2b00      	cmp	r3, #0
 8005160:	d001      	beq.n	8005166 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e000      	b.n	8005168 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8005166:	2300      	movs	r3, #0
  }
}
 8005168:	4618      	mov	r0, r3
 800516a:	3728      	adds	r7, #40	@ 0x28
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}

08005170 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800517e:	b2db      	uxtb	r3, r3
}
 8005180:	4618      	mov	r0, r3
 8005182:	370c      	adds	r7, #12
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b088      	sub	sp, #32
 8005190:	af00      	add	r7, sp, #0
 8005192:	60f8      	str	r0, [r7, #12]
 8005194:	60b9      	str	r1, [r7, #8]
 8005196:	603b      	str	r3, [r7, #0]
 8005198:	4613      	mov	r3, r2
 800519a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800519c:	f7fd fcdc 	bl	8002b58 <HAL_GetTick>
 80051a0:	4602      	mov	r2, r0
 80051a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051a4:	1a9b      	subs	r3, r3, r2
 80051a6:	683a      	ldr	r2, [r7, #0]
 80051a8:	4413      	add	r3, r2
 80051aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80051ac:	f7fd fcd4 	bl	8002b58 <HAL_GetTick>
 80051b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80051b2:	4b39      	ldr	r3, [pc, #228]	@ (8005298 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	015b      	lsls	r3, r3, #5
 80051b8:	0d1b      	lsrs	r3, r3, #20
 80051ba:	69fa      	ldr	r2, [r7, #28]
 80051bc:	fb02 f303 	mul.w	r3, r2, r3
 80051c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051c2:	e054      	b.n	800526e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ca:	d050      	beq.n	800526e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80051cc:	f7fd fcc4 	bl	8002b58 <HAL_GetTick>
 80051d0:	4602      	mov	r2, r0
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	69fa      	ldr	r2, [r7, #28]
 80051d8:	429a      	cmp	r2, r3
 80051da:	d902      	bls.n	80051e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d13d      	bne.n	800525e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	685a      	ldr	r2, [r3, #4]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80051f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80051fa:	d111      	bne.n	8005220 <SPI_WaitFlagStateUntilTimeout+0x94>
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005204:	d004      	beq.n	8005210 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800520e:	d107      	bne.n	8005220 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800521e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005224:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005228:	d10f      	bne.n	800524a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005238:	601a      	str	r2, [r3, #0]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005248:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2201      	movs	r2, #1
 800524e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2200      	movs	r2, #0
 8005256:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800525a:	2303      	movs	r3, #3
 800525c:	e017      	b.n	800528e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d101      	bne.n	8005268 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005264:	2300      	movs	r3, #0
 8005266:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	3b01      	subs	r3, #1
 800526c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	689a      	ldr	r2, [r3, #8]
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	4013      	ands	r3, r2
 8005278:	68ba      	ldr	r2, [r7, #8]
 800527a:	429a      	cmp	r2, r3
 800527c:	bf0c      	ite	eq
 800527e:	2301      	moveq	r3, #1
 8005280:	2300      	movne	r3, #0
 8005282:	b2db      	uxtb	r3, r3
 8005284:	461a      	mov	r2, r3
 8005286:	79fb      	ldrb	r3, [r7, #7]
 8005288:	429a      	cmp	r2, r3
 800528a:	d19b      	bne.n	80051c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800528c:	2300      	movs	r3, #0
}
 800528e:	4618      	mov	r0, r3
 8005290:	3720      	adds	r7, #32
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	20000004 	.word	0x20000004

0800529c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b08a      	sub	sp, #40	@ 0x28
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	60b9      	str	r1, [r7, #8]
 80052a6:	607a      	str	r2, [r7, #4]
 80052a8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80052aa:	2300      	movs	r3, #0
 80052ac:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80052ae:	f7fd fc53 	bl	8002b58 <HAL_GetTick>
 80052b2:	4602      	mov	r2, r0
 80052b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052b6:	1a9b      	subs	r3, r3, r2
 80052b8:	683a      	ldr	r2, [r7, #0]
 80052ba:	4413      	add	r3, r2
 80052bc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80052be:	f7fd fc4b 	bl	8002b58 <HAL_GetTick>
 80052c2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	330c      	adds	r3, #12
 80052ca:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80052cc:	4b3d      	ldr	r3, [pc, #244]	@ (80053c4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	4613      	mov	r3, r2
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	4413      	add	r3, r2
 80052d6:	00da      	lsls	r2, r3, #3
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	0d1b      	lsrs	r3, r3, #20
 80052dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052de:	fb02 f303 	mul.w	r3, r2, r3
 80052e2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80052e4:	e060      	b.n	80053a8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80052ec:	d107      	bne.n	80052fe <SPI_WaitFifoStateUntilTimeout+0x62>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d104      	bne.n	80052fe <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80052f4:	69fb      	ldr	r3, [r7, #28]
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80052fc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005304:	d050      	beq.n	80053a8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005306:	f7fd fc27 	bl	8002b58 <HAL_GetTick>
 800530a:	4602      	mov	r2, r0
 800530c:	6a3b      	ldr	r3, [r7, #32]
 800530e:	1ad3      	subs	r3, r2, r3
 8005310:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005312:	429a      	cmp	r2, r3
 8005314:	d902      	bls.n	800531c <SPI_WaitFifoStateUntilTimeout+0x80>
 8005316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005318:	2b00      	cmp	r3, #0
 800531a:	d13d      	bne.n	8005398 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	685a      	ldr	r2, [r3, #4]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800532a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005334:	d111      	bne.n	800535a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800533e:	d004      	beq.n	800534a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005348:	d107      	bne.n	800535a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005358:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800535e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005362:	d10f      	bne.n	8005384 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005372:	601a      	str	r2, [r3, #0]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005382:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2200      	movs	r2, #0
 8005390:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005394:	2303      	movs	r3, #3
 8005396:	e010      	b.n	80053ba <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d101      	bne.n	80053a2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800539e:	2300      	movs	r3, #0
 80053a0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	3b01      	subs	r3, #1
 80053a6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	689a      	ldr	r2, [r3, #8]
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	4013      	ands	r3, r2
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d196      	bne.n	80052e6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80053b8:	2300      	movs	r3, #0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3728      	adds	r7, #40	@ 0x28
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	20000004 	.word	0x20000004

080053c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b086      	sub	sp, #24
 80053cc:	af02      	add	r7, sp, #8
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	9300      	str	r3, [sp, #0]
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	2200      	movs	r2, #0
 80053dc:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80053e0:	68f8      	ldr	r0, [r7, #12]
 80053e2:	f7ff ff5b 	bl	800529c <SPI_WaitFifoStateUntilTimeout>
 80053e6:	4603      	mov	r3, r0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d007      	beq.n	80053fc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053f0:	f043 0220 	orr.w	r2, r3, #32
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80053f8:	2303      	movs	r3, #3
 80053fa:	e027      	b.n	800544c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	9300      	str	r3, [sp, #0]
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	2200      	movs	r2, #0
 8005404:	2180      	movs	r1, #128	@ 0x80
 8005406:	68f8      	ldr	r0, [r7, #12]
 8005408:	f7ff fec0 	bl	800518c <SPI_WaitFlagStateUntilTimeout>
 800540c:	4603      	mov	r3, r0
 800540e:	2b00      	cmp	r3, #0
 8005410:	d007      	beq.n	8005422 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005416:	f043 0220 	orr.w	r2, r3, #32
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800541e:	2303      	movs	r3, #3
 8005420:	e014      	b.n	800544c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	9300      	str	r3, [sp, #0]
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	2200      	movs	r2, #0
 800542a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800542e:	68f8      	ldr	r0, [r7, #12]
 8005430:	f7ff ff34 	bl	800529c <SPI_WaitFifoStateUntilTimeout>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d007      	beq.n	800544a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800543e:	f043 0220 	orr.w	r2, r3, #32
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005446:	2303      	movs	r3, #3
 8005448:	e000      	b.n	800544c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800544a:	2300      	movs	r3, #0
}
 800544c:	4618      	mov	r0, r3
 800544e:	3710      	adds	r7, #16
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}

08005454 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b082      	sub	sp, #8
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d101      	bne.n	8005466 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e049      	b.n	80054fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800546c:	b2db      	uxtb	r3, r3
 800546e:	2b00      	cmp	r3, #0
 8005470:	d106      	bne.n	8005480 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f7fd f93a 	bl	80026f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2202      	movs	r2, #2
 8005484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	3304      	adds	r3, #4
 8005490:	4619      	mov	r1, r3
 8005492:	4610      	mov	r0, r2
 8005494:	f000 fb80 	bl	8005b98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2201      	movs	r2, #1
 80054d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3708      	adds	r7, #8
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
	...

08005504 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005504:	b480      	push	{r7}
 8005506:	b085      	sub	sp, #20
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005512:	b2db      	uxtb	r3, r3
 8005514:	2b01      	cmp	r3, #1
 8005516:	d001      	beq.n	800551c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	e047      	b.n	80055ac <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2202      	movs	r2, #2
 8005520:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a23      	ldr	r2, [pc, #140]	@ (80055b8 <HAL_TIM_Base_Start+0xb4>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d01d      	beq.n	800556a <HAL_TIM_Base_Start+0x66>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005536:	d018      	beq.n	800556a <HAL_TIM_Base_Start+0x66>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a1f      	ldr	r2, [pc, #124]	@ (80055bc <HAL_TIM_Base_Start+0xb8>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d013      	beq.n	800556a <HAL_TIM_Base_Start+0x66>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a1e      	ldr	r2, [pc, #120]	@ (80055c0 <HAL_TIM_Base_Start+0xbc>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d00e      	beq.n	800556a <HAL_TIM_Base_Start+0x66>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a1c      	ldr	r2, [pc, #112]	@ (80055c4 <HAL_TIM_Base_Start+0xc0>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d009      	beq.n	800556a <HAL_TIM_Base_Start+0x66>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a1b      	ldr	r2, [pc, #108]	@ (80055c8 <HAL_TIM_Base_Start+0xc4>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d004      	beq.n	800556a <HAL_TIM_Base_Start+0x66>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a19      	ldr	r2, [pc, #100]	@ (80055cc <HAL_TIM_Base_Start+0xc8>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d115      	bne.n	8005596 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	689a      	ldr	r2, [r3, #8]
 8005570:	4b17      	ldr	r3, [pc, #92]	@ (80055d0 <HAL_TIM_Base_Start+0xcc>)
 8005572:	4013      	ands	r3, r2
 8005574:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2b06      	cmp	r3, #6
 800557a:	d015      	beq.n	80055a8 <HAL_TIM_Base_Start+0xa4>
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005582:	d011      	beq.n	80055a8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f042 0201 	orr.w	r2, r2, #1
 8005592:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005594:	e008      	b.n	80055a8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f042 0201 	orr.w	r2, r2, #1
 80055a4:	601a      	str	r2, [r3, #0]
 80055a6:	e000      	b.n	80055aa <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055a8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80055aa:	2300      	movs	r3, #0
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3714      	adds	r7, #20
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr
 80055b8:	40012c00 	.word	0x40012c00
 80055bc:	40000400 	.word	0x40000400
 80055c0:	40000800 	.word	0x40000800
 80055c4:	40000c00 	.word	0x40000c00
 80055c8:	40013400 	.word	0x40013400
 80055cc:	40014000 	.word	0x40014000
 80055d0:	00010007 	.word	0x00010007

080055d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b085      	sub	sp, #20
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d001      	beq.n	80055ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	e04f      	b.n	800568c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2202      	movs	r2, #2
 80055f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	68da      	ldr	r2, [r3, #12]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f042 0201 	orr.w	r2, r2, #1
 8005602:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a23      	ldr	r2, [pc, #140]	@ (8005698 <HAL_TIM_Base_Start_IT+0xc4>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d01d      	beq.n	800564a <HAL_TIM_Base_Start_IT+0x76>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005616:	d018      	beq.n	800564a <HAL_TIM_Base_Start_IT+0x76>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a1f      	ldr	r2, [pc, #124]	@ (800569c <HAL_TIM_Base_Start_IT+0xc8>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d013      	beq.n	800564a <HAL_TIM_Base_Start_IT+0x76>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a1e      	ldr	r2, [pc, #120]	@ (80056a0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d00e      	beq.n	800564a <HAL_TIM_Base_Start_IT+0x76>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a1c      	ldr	r2, [pc, #112]	@ (80056a4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d009      	beq.n	800564a <HAL_TIM_Base_Start_IT+0x76>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a1b      	ldr	r2, [pc, #108]	@ (80056a8 <HAL_TIM_Base_Start_IT+0xd4>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d004      	beq.n	800564a <HAL_TIM_Base_Start_IT+0x76>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a19      	ldr	r2, [pc, #100]	@ (80056ac <HAL_TIM_Base_Start_IT+0xd8>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d115      	bne.n	8005676 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	689a      	ldr	r2, [r3, #8]
 8005650:	4b17      	ldr	r3, [pc, #92]	@ (80056b0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005652:	4013      	ands	r3, r2
 8005654:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2b06      	cmp	r3, #6
 800565a:	d015      	beq.n	8005688 <HAL_TIM_Base_Start_IT+0xb4>
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005662:	d011      	beq.n	8005688 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f042 0201 	orr.w	r2, r2, #1
 8005672:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005674:	e008      	b.n	8005688 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f042 0201 	orr.w	r2, r2, #1
 8005684:	601a      	str	r2, [r3, #0]
 8005686:	e000      	b.n	800568a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005688:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800568a:	2300      	movs	r3, #0
}
 800568c:	4618      	mov	r0, r3
 800568e:	3714      	adds	r7, #20
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr
 8005698:	40012c00 	.word	0x40012c00
 800569c:	40000400 	.word	0x40000400
 80056a0:	40000800 	.word	0x40000800
 80056a4:	40000c00 	.word	0x40000c00
 80056a8:	40013400 	.word	0x40013400
 80056ac:	40014000 	.word	0x40014000
 80056b0:	00010007 	.word	0x00010007

080056b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b082      	sub	sp, #8
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d101      	bne.n	80056c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	e049      	b.n	800575a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d106      	bne.n	80056e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f7fc ffd8 	bl	8002690 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2202      	movs	r2, #2
 80056e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	3304      	adds	r3, #4
 80056f0:	4619      	mov	r1, r3
 80056f2:	4610      	mov	r0, r2
 80056f4:	f000 fa50 	bl	8005b98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	3708      	adds	r7, #8
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
	...

08005764 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b084      	sub	sp, #16
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d109      	bne.n	8005788 <HAL_TIM_PWM_Start+0x24>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800577a:	b2db      	uxtb	r3, r3
 800577c:	2b01      	cmp	r3, #1
 800577e:	bf14      	ite	ne
 8005780:	2301      	movne	r3, #1
 8005782:	2300      	moveq	r3, #0
 8005784:	b2db      	uxtb	r3, r3
 8005786:	e03c      	b.n	8005802 <HAL_TIM_PWM_Start+0x9e>
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	2b04      	cmp	r3, #4
 800578c:	d109      	bne.n	80057a2 <HAL_TIM_PWM_Start+0x3e>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005794:	b2db      	uxtb	r3, r3
 8005796:	2b01      	cmp	r3, #1
 8005798:	bf14      	ite	ne
 800579a:	2301      	movne	r3, #1
 800579c:	2300      	moveq	r3, #0
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	e02f      	b.n	8005802 <HAL_TIM_PWM_Start+0x9e>
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	2b08      	cmp	r3, #8
 80057a6:	d109      	bne.n	80057bc <HAL_TIM_PWM_Start+0x58>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	bf14      	ite	ne
 80057b4:	2301      	movne	r3, #1
 80057b6:	2300      	moveq	r3, #0
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	e022      	b.n	8005802 <HAL_TIM_PWM_Start+0x9e>
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	2b0c      	cmp	r3, #12
 80057c0:	d109      	bne.n	80057d6 <HAL_TIM_PWM_Start+0x72>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	bf14      	ite	ne
 80057ce:	2301      	movne	r3, #1
 80057d0:	2300      	moveq	r3, #0
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	e015      	b.n	8005802 <HAL_TIM_PWM_Start+0x9e>
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	2b10      	cmp	r3, #16
 80057da:	d109      	bne.n	80057f0 <HAL_TIM_PWM_Start+0x8c>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80057e2:	b2db      	uxtb	r3, r3
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	bf14      	ite	ne
 80057e8:	2301      	movne	r3, #1
 80057ea:	2300      	moveq	r3, #0
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	e008      	b.n	8005802 <HAL_TIM_PWM_Start+0x9e>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	bf14      	ite	ne
 80057fc:	2301      	movne	r3, #1
 80057fe:	2300      	moveq	r3, #0
 8005800:	b2db      	uxtb	r3, r3
 8005802:	2b00      	cmp	r3, #0
 8005804:	d001      	beq.n	800580a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	e09c      	b.n	8005944 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d104      	bne.n	800581a <HAL_TIM_PWM_Start+0xb6>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2202      	movs	r2, #2
 8005814:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005818:	e023      	b.n	8005862 <HAL_TIM_PWM_Start+0xfe>
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	2b04      	cmp	r3, #4
 800581e:	d104      	bne.n	800582a <HAL_TIM_PWM_Start+0xc6>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2202      	movs	r2, #2
 8005824:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005828:	e01b      	b.n	8005862 <HAL_TIM_PWM_Start+0xfe>
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	2b08      	cmp	r3, #8
 800582e:	d104      	bne.n	800583a <HAL_TIM_PWM_Start+0xd6>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2202      	movs	r2, #2
 8005834:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005838:	e013      	b.n	8005862 <HAL_TIM_PWM_Start+0xfe>
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	2b0c      	cmp	r3, #12
 800583e:	d104      	bne.n	800584a <HAL_TIM_PWM_Start+0xe6>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2202      	movs	r2, #2
 8005844:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005848:	e00b      	b.n	8005862 <HAL_TIM_PWM_Start+0xfe>
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	2b10      	cmp	r3, #16
 800584e:	d104      	bne.n	800585a <HAL_TIM_PWM_Start+0xf6>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2202      	movs	r2, #2
 8005854:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005858:	e003      	b.n	8005862 <HAL_TIM_PWM_Start+0xfe>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2202      	movs	r2, #2
 800585e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	2201      	movs	r2, #1
 8005868:	6839      	ldr	r1, [r7, #0]
 800586a:	4618      	mov	r0, r3
 800586c:	f000 fd10 	bl	8006290 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a35      	ldr	r2, [pc, #212]	@ (800594c <HAL_TIM_PWM_Start+0x1e8>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d013      	beq.n	80058a2 <HAL_TIM_PWM_Start+0x13e>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a34      	ldr	r2, [pc, #208]	@ (8005950 <HAL_TIM_PWM_Start+0x1ec>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d00e      	beq.n	80058a2 <HAL_TIM_PWM_Start+0x13e>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a32      	ldr	r2, [pc, #200]	@ (8005954 <HAL_TIM_PWM_Start+0x1f0>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d009      	beq.n	80058a2 <HAL_TIM_PWM_Start+0x13e>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a31      	ldr	r2, [pc, #196]	@ (8005958 <HAL_TIM_PWM_Start+0x1f4>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d004      	beq.n	80058a2 <HAL_TIM_PWM_Start+0x13e>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a2f      	ldr	r2, [pc, #188]	@ (800595c <HAL_TIM_PWM_Start+0x1f8>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d101      	bne.n	80058a6 <HAL_TIM_PWM_Start+0x142>
 80058a2:	2301      	movs	r3, #1
 80058a4:	e000      	b.n	80058a8 <HAL_TIM_PWM_Start+0x144>
 80058a6:	2300      	movs	r3, #0
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d007      	beq.n	80058bc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80058ba:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a22      	ldr	r2, [pc, #136]	@ (800594c <HAL_TIM_PWM_Start+0x1e8>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d01d      	beq.n	8005902 <HAL_TIM_PWM_Start+0x19e>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058ce:	d018      	beq.n	8005902 <HAL_TIM_PWM_Start+0x19e>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a22      	ldr	r2, [pc, #136]	@ (8005960 <HAL_TIM_PWM_Start+0x1fc>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d013      	beq.n	8005902 <HAL_TIM_PWM_Start+0x19e>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a21      	ldr	r2, [pc, #132]	@ (8005964 <HAL_TIM_PWM_Start+0x200>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d00e      	beq.n	8005902 <HAL_TIM_PWM_Start+0x19e>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a1f      	ldr	r2, [pc, #124]	@ (8005968 <HAL_TIM_PWM_Start+0x204>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d009      	beq.n	8005902 <HAL_TIM_PWM_Start+0x19e>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a17      	ldr	r2, [pc, #92]	@ (8005950 <HAL_TIM_PWM_Start+0x1ec>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d004      	beq.n	8005902 <HAL_TIM_PWM_Start+0x19e>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a15      	ldr	r2, [pc, #84]	@ (8005954 <HAL_TIM_PWM_Start+0x1f0>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d115      	bne.n	800592e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	689a      	ldr	r2, [r3, #8]
 8005908:	4b18      	ldr	r3, [pc, #96]	@ (800596c <HAL_TIM_PWM_Start+0x208>)
 800590a:	4013      	ands	r3, r2
 800590c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2b06      	cmp	r3, #6
 8005912:	d015      	beq.n	8005940 <HAL_TIM_PWM_Start+0x1dc>
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800591a:	d011      	beq.n	8005940 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f042 0201 	orr.w	r2, r2, #1
 800592a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800592c:	e008      	b.n	8005940 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f042 0201 	orr.w	r2, r2, #1
 800593c:	601a      	str	r2, [r3, #0]
 800593e:	e000      	b.n	8005942 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005940:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005942:	2300      	movs	r3, #0
}
 8005944:	4618      	mov	r0, r3
 8005946:	3710      	adds	r7, #16
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}
 800594c:	40012c00 	.word	0x40012c00
 8005950:	40013400 	.word	0x40013400
 8005954:	40014000 	.word	0x40014000
 8005958:	40014400 	.word	0x40014400
 800595c:	40014800 	.word	0x40014800
 8005960:	40000400 	.word	0x40000400
 8005964:	40000800 	.word	0x40000800
 8005968:	40000c00 	.word	0x40000c00
 800596c:	00010007 	.word	0x00010007

08005970 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b086      	sub	sp, #24
 8005974:	af00      	add	r7, sp, #0
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	60b9      	str	r1, [r7, #8]
 800597a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800597c:	2300      	movs	r3, #0
 800597e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005986:	2b01      	cmp	r3, #1
 8005988:	d101      	bne.n	800598e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800598a:	2302      	movs	r3, #2
 800598c:	e0ff      	b.n	8005b8e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2201      	movs	r2, #1
 8005992:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2b14      	cmp	r3, #20
 800599a:	f200 80f0 	bhi.w	8005b7e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800599e:	a201      	add	r2, pc, #4	@ (adr r2, 80059a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80059a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059a4:	080059f9 	.word	0x080059f9
 80059a8:	08005b7f 	.word	0x08005b7f
 80059ac:	08005b7f 	.word	0x08005b7f
 80059b0:	08005b7f 	.word	0x08005b7f
 80059b4:	08005a39 	.word	0x08005a39
 80059b8:	08005b7f 	.word	0x08005b7f
 80059bc:	08005b7f 	.word	0x08005b7f
 80059c0:	08005b7f 	.word	0x08005b7f
 80059c4:	08005a7b 	.word	0x08005a7b
 80059c8:	08005b7f 	.word	0x08005b7f
 80059cc:	08005b7f 	.word	0x08005b7f
 80059d0:	08005b7f 	.word	0x08005b7f
 80059d4:	08005abb 	.word	0x08005abb
 80059d8:	08005b7f 	.word	0x08005b7f
 80059dc:	08005b7f 	.word	0x08005b7f
 80059e0:	08005b7f 	.word	0x08005b7f
 80059e4:	08005afd 	.word	0x08005afd
 80059e8:	08005b7f 	.word	0x08005b7f
 80059ec:	08005b7f 	.word	0x08005b7f
 80059f0:	08005b7f 	.word	0x08005b7f
 80059f4:	08005b3d 	.word	0x08005b3d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	68b9      	ldr	r1, [r7, #8]
 80059fe:	4618      	mov	r0, r3
 8005a00:	f000 f970 	bl	8005ce4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	699a      	ldr	r2, [r3, #24]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f042 0208 	orr.w	r2, r2, #8
 8005a12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	699a      	ldr	r2, [r3, #24]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f022 0204 	bic.w	r2, r2, #4
 8005a22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	6999      	ldr	r1, [r3, #24]
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	691a      	ldr	r2, [r3, #16]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	430a      	orrs	r2, r1
 8005a34:	619a      	str	r2, [r3, #24]
      break;
 8005a36:	e0a5      	b.n	8005b84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68b9      	ldr	r1, [r7, #8]
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f000 f9e0 	bl	8005e04 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	699a      	ldr	r2, [r3, #24]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	699a      	ldr	r2, [r3, #24]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	6999      	ldr	r1, [r3, #24]
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	021a      	lsls	r2, r3, #8
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	430a      	orrs	r2, r1
 8005a76:	619a      	str	r2, [r3, #24]
      break;
 8005a78:	e084      	b.n	8005b84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	68b9      	ldr	r1, [r7, #8]
 8005a80:	4618      	mov	r0, r3
 8005a82:	f000 fa49 	bl	8005f18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	69da      	ldr	r2, [r3, #28]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f042 0208 	orr.w	r2, r2, #8
 8005a94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	69da      	ldr	r2, [r3, #28]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f022 0204 	bic.w	r2, r2, #4
 8005aa4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	69d9      	ldr	r1, [r3, #28]
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	691a      	ldr	r2, [r3, #16]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	430a      	orrs	r2, r1
 8005ab6:	61da      	str	r2, [r3, #28]
      break;
 8005ab8:	e064      	b.n	8005b84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	68b9      	ldr	r1, [r7, #8]
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f000 fab1 	bl	8006028 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	69da      	ldr	r2, [r3, #28]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ad4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	69da      	ldr	r2, [r3, #28]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ae4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	69d9      	ldr	r1, [r3, #28]
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	691b      	ldr	r3, [r3, #16]
 8005af0:	021a      	lsls	r2, r3, #8
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	430a      	orrs	r2, r1
 8005af8:	61da      	str	r2, [r3, #28]
      break;
 8005afa:	e043      	b.n	8005b84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	68b9      	ldr	r1, [r7, #8]
 8005b02:	4618      	mov	r0, r3
 8005b04:	f000 fafa 	bl	80060fc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f042 0208 	orr.w	r2, r2, #8
 8005b16:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f022 0204 	bic.w	r2, r2, #4
 8005b26:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	691a      	ldr	r2, [r3, #16]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	430a      	orrs	r2, r1
 8005b38:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005b3a:	e023      	b.n	8005b84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	68b9      	ldr	r1, [r7, #8]
 8005b42:	4618      	mov	r0, r3
 8005b44:	f000 fb3e 	bl	80061c4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b56:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b66:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	691b      	ldr	r3, [r3, #16]
 8005b72:	021a      	lsls	r2, r3, #8
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	430a      	orrs	r2, r1
 8005b7a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005b7c:	e002      	b.n	8005b84 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	75fb      	strb	r3, [r7, #23]
      break;
 8005b82:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2200      	movs	r2, #0
 8005b88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005b8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3718      	adds	r7, #24
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	bf00      	nop

08005b98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b085      	sub	sp, #20
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	4a46      	ldr	r2, [pc, #280]	@ (8005cc4 <TIM_Base_SetConfig+0x12c>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d013      	beq.n	8005bd8 <TIM_Base_SetConfig+0x40>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bb6:	d00f      	beq.n	8005bd8 <TIM_Base_SetConfig+0x40>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	4a43      	ldr	r2, [pc, #268]	@ (8005cc8 <TIM_Base_SetConfig+0x130>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d00b      	beq.n	8005bd8 <TIM_Base_SetConfig+0x40>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	4a42      	ldr	r2, [pc, #264]	@ (8005ccc <TIM_Base_SetConfig+0x134>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d007      	beq.n	8005bd8 <TIM_Base_SetConfig+0x40>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	4a41      	ldr	r2, [pc, #260]	@ (8005cd0 <TIM_Base_SetConfig+0x138>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d003      	beq.n	8005bd8 <TIM_Base_SetConfig+0x40>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	4a40      	ldr	r2, [pc, #256]	@ (8005cd4 <TIM_Base_SetConfig+0x13c>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d108      	bne.n	8005bea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	68fa      	ldr	r2, [r7, #12]
 8005be6:	4313      	orrs	r3, r2
 8005be8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4a35      	ldr	r2, [pc, #212]	@ (8005cc4 <TIM_Base_SetConfig+0x12c>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d01f      	beq.n	8005c32 <TIM_Base_SetConfig+0x9a>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bf8:	d01b      	beq.n	8005c32 <TIM_Base_SetConfig+0x9a>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4a32      	ldr	r2, [pc, #200]	@ (8005cc8 <TIM_Base_SetConfig+0x130>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d017      	beq.n	8005c32 <TIM_Base_SetConfig+0x9a>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	4a31      	ldr	r2, [pc, #196]	@ (8005ccc <TIM_Base_SetConfig+0x134>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d013      	beq.n	8005c32 <TIM_Base_SetConfig+0x9a>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4a30      	ldr	r2, [pc, #192]	@ (8005cd0 <TIM_Base_SetConfig+0x138>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d00f      	beq.n	8005c32 <TIM_Base_SetConfig+0x9a>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4a2f      	ldr	r2, [pc, #188]	@ (8005cd4 <TIM_Base_SetConfig+0x13c>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d00b      	beq.n	8005c32 <TIM_Base_SetConfig+0x9a>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	4a2e      	ldr	r2, [pc, #184]	@ (8005cd8 <TIM_Base_SetConfig+0x140>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d007      	beq.n	8005c32 <TIM_Base_SetConfig+0x9a>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4a2d      	ldr	r2, [pc, #180]	@ (8005cdc <TIM_Base_SetConfig+0x144>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d003      	beq.n	8005c32 <TIM_Base_SetConfig+0x9a>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a2c      	ldr	r2, [pc, #176]	@ (8005ce0 <TIM_Base_SetConfig+0x148>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d108      	bne.n	8005c44 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	68fa      	ldr	r2, [r7, #12]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	695b      	ldr	r3, [r3, #20]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	68fa      	ldr	r2, [r7, #12]
 8005c56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	689a      	ldr	r2, [r3, #8]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	4a16      	ldr	r2, [pc, #88]	@ (8005cc4 <TIM_Base_SetConfig+0x12c>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d00f      	beq.n	8005c90 <TIM_Base_SetConfig+0xf8>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	4a18      	ldr	r2, [pc, #96]	@ (8005cd4 <TIM_Base_SetConfig+0x13c>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d00b      	beq.n	8005c90 <TIM_Base_SetConfig+0xf8>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	4a17      	ldr	r2, [pc, #92]	@ (8005cd8 <TIM_Base_SetConfig+0x140>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d007      	beq.n	8005c90 <TIM_Base_SetConfig+0xf8>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	4a16      	ldr	r2, [pc, #88]	@ (8005cdc <TIM_Base_SetConfig+0x144>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d003      	beq.n	8005c90 <TIM_Base_SetConfig+0xf8>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4a15      	ldr	r2, [pc, #84]	@ (8005ce0 <TIM_Base_SetConfig+0x148>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d103      	bne.n	8005c98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	691a      	ldr	r2, [r3, #16]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	f003 0301 	and.w	r3, r3, #1
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d105      	bne.n	8005cb6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	691b      	ldr	r3, [r3, #16]
 8005cae:	f023 0201 	bic.w	r2, r3, #1
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	611a      	str	r2, [r3, #16]
  }
}
 8005cb6:	bf00      	nop
 8005cb8:	3714      	adds	r7, #20
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr
 8005cc2:	bf00      	nop
 8005cc4:	40012c00 	.word	0x40012c00
 8005cc8:	40000400 	.word	0x40000400
 8005ccc:	40000800 	.word	0x40000800
 8005cd0:	40000c00 	.word	0x40000c00
 8005cd4:	40013400 	.word	0x40013400
 8005cd8:	40014000 	.word	0x40014000
 8005cdc:	40014400 	.word	0x40014400
 8005ce0:	40014800 	.word	0x40014800

08005ce4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b087      	sub	sp, #28
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a1b      	ldr	r3, [r3, #32]
 8005cf2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6a1b      	ldr	r3, [r3, #32]
 8005cf8:	f023 0201 	bic.w	r2, r3, #1
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	699b      	ldr	r3, [r3, #24]
 8005d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f023 0303 	bic.w	r3, r3, #3
 8005d1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	68fa      	ldr	r2, [r7, #12]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	f023 0302 	bic.w	r3, r3, #2
 8005d30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	697a      	ldr	r2, [r7, #20]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	4a2c      	ldr	r2, [pc, #176]	@ (8005df0 <TIM_OC1_SetConfig+0x10c>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d00f      	beq.n	8005d64 <TIM_OC1_SetConfig+0x80>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4a2b      	ldr	r2, [pc, #172]	@ (8005df4 <TIM_OC1_SetConfig+0x110>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d00b      	beq.n	8005d64 <TIM_OC1_SetConfig+0x80>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	4a2a      	ldr	r2, [pc, #168]	@ (8005df8 <TIM_OC1_SetConfig+0x114>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d007      	beq.n	8005d64 <TIM_OC1_SetConfig+0x80>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	4a29      	ldr	r2, [pc, #164]	@ (8005dfc <TIM_OC1_SetConfig+0x118>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d003      	beq.n	8005d64 <TIM_OC1_SetConfig+0x80>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	4a28      	ldr	r2, [pc, #160]	@ (8005e00 <TIM_OC1_SetConfig+0x11c>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d10c      	bne.n	8005d7e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	f023 0308 	bic.w	r3, r3, #8
 8005d6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	697a      	ldr	r2, [r7, #20]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	f023 0304 	bic.w	r3, r3, #4
 8005d7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4a1b      	ldr	r2, [pc, #108]	@ (8005df0 <TIM_OC1_SetConfig+0x10c>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d00f      	beq.n	8005da6 <TIM_OC1_SetConfig+0xc2>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	4a1a      	ldr	r2, [pc, #104]	@ (8005df4 <TIM_OC1_SetConfig+0x110>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d00b      	beq.n	8005da6 <TIM_OC1_SetConfig+0xc2>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4a19      	ldr	r2, [pc, #100]	@ (8005df8 <TIM_OC1_SetConfig+0x114>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d007      	beq.n	8005da6 <TIM_OC1_SetConfig+0xc2>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4a18      	ldr	r2, [pc, #96]	@ (8005dfc <TIM_OC1_SetConfig+0x118>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d003      	beq.n	8005da6 <TIM_OC1_SetConfig+0xc2>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	4a17      	ldr	r2, [pc, #92]	@ (8005e00 <TIM_OC1_SetConfig+0x11c>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d111      	bne.n	8005dca <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005dac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005db4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	695b      	ldr	r3, [r3, #20]
 8005dba:	693a      	ldr	r2, [r7, #16]
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	699b      	ldr	r3, [r3, #24]
 8005dc4:	693a      	ldr	r2, [r7, #16]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	693a      	ldr	r2, [r7, #16]
 8005dce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	68fa      	ldr	r2, [r7, #12]
 8005dd4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	685a      	ldr	r2, [r3, #4]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	697a      	ldr	r2, [r7, #20]
 8005de2:	621a      	str	r2, [r3, #32]
}
 8005de4:	bf00      	nop
 8005de6:	371c      	adds	r7, #28
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr
 8005df0:	40012c00 	.word	0x40012c00
 8005df4:	40013400 	.word	0x40013400
 8005df8:	40014000 	.word	0x40014000
 8005dfc:	40014400 	.word	0x40014400
 8005e00:	40014800 	.word	0x40014800

08005e04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b087      	sub	sp, #28
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6a1b      	ldr	r3, [r3, #32]
 8005e12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6a1b      	ldr	r3, [r3, #32]
 8005e18:	f023 0210 	bic.w	r2, r3, #16
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	699b      	ldr	r3, [r3, #24]
 8005e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005e32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	021b      	lsls	r3, r3, #8
 8005e46:	68fa      	ldr	r2, [r7, #12]
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	f023 0320 	bic.w	r3, r3, #32
 8005e52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	011b      	lsls	r3, r3, #4
 8005e5a:	697a      	ldr	r2, [r7, #20]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	4a28      	ldr	r2, [pc, #160]	@ (8005f04 <TIM_OC2_SetConfig+0x100>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d003      	beq.n	8005e70 <TIM_OC2_SetConfig+0x6c>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4a27      	ldr	r2, [pc, #156]	@ (8005f08 <TIM_OC2_SetConfig+0x104>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d10d      	bne.n	8005e8c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	011b      	lsls	r3, r3, #4
 8005e7e:	697a      	ldr	r2, [r7, #20]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e8a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	4a1d      	ldr	r2, [pc, #116]	@ (8005f04 <TIM_OC2_SetConfig+0x100>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d00f      	beq.n	8005eb4 <TIM_OC2_SetConfig+0xb0>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	4a1c      	ldr	r2, [pc, #112]	@ (8005f08 <TIM_OC2_SetConfig+0x104>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d00b      	beq.n	8005eb4 <TIM_OC2_SetConfig+0xb0>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	4a1b      	ldr	r2, [pc, #108]	@ (8005f0c <TIM_OC2_SetConfig+0x108>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d007      	beq.n	8005eb4 <TIM_OC2_SetConfig+0xb0>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	4a1a      	ldr	r2, [pc, #104]	@ (8005f10 <TIM_OC2_SetConfig+0x10c>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d003      	beq.n	8005eb4 <TIM_OC2_SetConfig+0xb0>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	4a19      	ldr	r2, [pc, #100]	@ (8005f14 <TIM_OC2_SetConfig+0x110>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d113      	bne.n	8005edc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005eba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005ec2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	695b      	ldr	r3, [r3, #20]
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	693a      	ldr	r2, [r7, #16]
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	699b      	ldr	r3, [r3, #24]
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	693a      	ldr	r2, [r7, #16]
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	693a      	ldr	r2, [r7, #16]
 8005ee0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	68fa      	ldr	r2, [r7, #12]
 8005ee6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	685a      	ldr	r2, [r3, #4]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	697a      	ldr	r2, [r7, #20]
 8005ef4:	621a      	str	r2, [r3, #32]
}
 8005ef6:	bf00      	nop
 8005ef8:	371c      	adds	r7, #28
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr
 8005f02:	bf00      	nop
 8005f04:	40012c00 	.word	0x40012c00
 8005f08:	40013400 	.word	0x40013400
 8005f0c:	40014000 	.word	0x40014000
 8005f10:	40014400 	.word	0x40014400
 8005f14:	40014800 	.word	0x40014800

08005f18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b087      	sub	sp, #28
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6a1b      	ldr	r3, [r3, #32]
 8005f26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6a1b      	ldr	r3, [r3, #32]
 8005f2c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	69db      	ldr	r3, [r3, #28]
 8005f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f023 0303 	bic.w	r3, r3, #3
 8005f52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	68fa      	ldr	r2, [r7, #12]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005f64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	021b      	lsls	r3, r3, #8
 8005f6c:	697a      	ldr	r2, [r7, #20]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a27      	ldr	r2, [pc, #156]	@ (8006014 <TIM_OC3_SetConfig+0xfc>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d003      	beq.n	8005f82 <TIM_OC3_SetConfig+0x6a>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4a26      	ldr	r2, [pc, #152]	@ (8006018 <TIM_OC3_SetConfig+0x100>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d10d      	bne.n	8005f9e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005f88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	021b      	lsls	r3, r3, #8
 8005f90:	697a      	ldr	r2, [r7, #20]
 8005f92:	4313      	orrs	r3, r2
 8005f94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005f9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	4a1c      	ldr	r2, [pc, #112]	@ (8006014 <TIM_OC3_SetConfig+0xfc>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d00f      	beq.n	8005fc6 <TIM_OC3_SetConfig+0xae>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	4a1b      	ldr	r2, [pc, #108]	@ (8006018 <TIM_OC3_SetConfig+0x100>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d00b      	beq.n	8005fc6 <TIM_OC3_SetConfig+0xae>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4a1a      	ldr	r2, [pc, #104]	@ (800601c <TIM_OC3_SetConfig+0x104>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d007      	beq.n	8005fc6 <TIM_OC3_SetConfig+0xae>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	4a19      	ldr	r2, [pc, #100]	@ (8006020 <TIM_OC3_SetConfig+0x108>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d003      	beq.n	8005fc6 <TIM_OC3_SetConfig+0xae>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4a18      	ldr	r2, [pc, #96]	@ (8006024 <TIM_OC3_SetConfig+0x10c>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d113      	bne.n	8005fee <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005fcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005fd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	695b      	ldr	r3, [r3, #20]
 8005fda:	011b      	lsls	r3, r3, #4
 8005fdc:	693a      	ldr	r2, [r7, #16]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	699b      	ldr	r3, [r3, #24]
 8005fe6:	011b      	lsls	r3, r3, #4
 8005fe8:	693a      	ldr	r2, [r7, #16]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	693a      	ldr	r2, [r7, #16]
 8005ff2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	68fa      	ldr	r2, [r7, #12]
 8005ff8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	685a      	ldr	r2, [r3, #4]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	697a      	ldr	r2, [r7, #20]
 8006006:	621a      	str	r2, [r3, #32]
}
 8006008:	bf00      	nop
 800600a:	371c      	adds	r7, #28
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr
 8006014:	40012c00 	.word	0x40012c00
 8006018:	40013400 	.word	0x40013400
 800601c:	40014000 	.word	0x40014000
 8006020:	40014400 	.word	0x40014400
 8006024:	40014800 	.word	0x40014800

08006028 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006028:	b480      	push	{r7}
 800602a:	b087      	sub	sp, #28
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a1b      	ldr	r3, [r3, #32]
 8006036:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6a1b      	ldr	r3, [r3, #32]
 800603c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	69db      	ldr	r3, [r3, #28]
 800604e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006056:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800605a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006062:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	021b      	lsls	r3, r3, #8
 800606a:	68fa      	ldr	r2, [r7, #12]
 800606c:	4313      	orrs	r3, r2
 800606e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006076:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	031b      	lsls	r3, r3, #12
 800607e:	693a      	ldr	r2, [r7, #16]
 8006080:	4313      	orrs	r3, r2
 8006082:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4a18      	ldr	r2, [pc, #96]	@ (80060e8 <TIM_OC4_SetConfig+0xc0>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d00f      	beq.n	80060ac <TIM_OC4_SetConfig+0x84>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	4a17      	ldr	r2, [pc, #92]	@ (80060ec <TIM_OC4_SetConfig+0xc4>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d00b      	beq.n	80060ac <TIM_OC4_SetConfig+0x84>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	4a16      	ldr	r2, [pc, #88]	@ (80060f0 <TIM_OC4_SetConfig+0xc8>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d007      	beq.n	80060ac <TIM_OC4_SetConfig+0x84>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4a15      	ldr	r2, [pc, #84]	@ (80060f4 <TIM_OC4_SetConfig+0xcc>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d003      	beq.n	80060ac <TIM_OC4_SetConfig+0x84>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	4a14      	ldr	r2, [pc, #80]	@ (80060f8 <TIM_OC4_SetConfig+0xd0>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d109      	bne.n	80060c0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80060b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	695b      	ldr	r3, [r3, #20]
 80060b8:	019b      	lsls	r3, r3, #6
 80060ba:	697a      	ldr	r2, [r7, #20]
 80060bc:	4313      	orrs	r3, r2
 80060be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	697a      	ldr	r2, [r7, #20]
 80060c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	68fa      	ldr	r2, [r7, #12]
 80060ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	685a      	ldr	r2, [r3, #4]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	693a      	ldr	r2, [r7, #16]
 80060d8:	621a      	str	r2, [r3, #32]
}
 80060da:	bf00      	nop
 80060dc:	371c      	adds	r7, #28
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr
 80060e6:	bf00      	nop
 80060e8:	40012c00 	.word	0x40012c00
 80060ec:	40013400 	.word	0x40013400
 80060f0:	40014000 	.word	0x40014000
 80060f4:	40014400 	.word	0x40014400
 80060f8:	40014800 	.word	0x40014800

080060fc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b087      	sub	sp, #28
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6a1b      	ldr	r3, [r3, #32]
 800610a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6a1b      	ldr	r3, [r3, #32]
 8006110:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800612a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800612e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	68fa      	ldr	r2, [r7, #12]
 8006136:	4313      	orrs	r3, r2
 8006138:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006140:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	041b      	lsls	r3, r3, #16
 8006148:	693a      	ldr	r2, [r7, #16]
 800614a:	4313      	orrs	r3, r2
 800614c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	4a17      	ldr	r2, [pc, #92]	@ (80061b0 <TIM_OC5_SetConfig+0xb4>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d00f      	beq.n	8006176 <TIM_OC5_SetConfig+0x7a>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	4a16      	ldr	r2, [pc, #88]	@ (80061b4 <TIM_OC5_SetConfig+0xb8>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d00b      	beq.n	8006176 <TIM_OC5_SetConfig+0x7a>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	4a15      	ldr	r2, [pc, #84]	@ (80061b8 <TIM_OC5_SetConfig+0xbc>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d007      	beq.n	8006176 <TIM_OC5_SetConfig+0x7a>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	4a14      	ldr	r2, [pc, #80]	@ (80061bc <TIM_OC5_SetConfig+0xc0>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d003      	beq.n	8006176 <TIM_OC5_SetConfig+0x7a>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	4a13      	ldr	r2, [pc, #76]	@ (80061c0 <TIM_OC5_SetConfig+0xc4>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d109      	bne.n	800618a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800617c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	695b      	ldr	r3, [r3, #20]
 8006182:	021b      	lsls	r3, r3, #8
 8006184:	697a      	ldr	r2, [r7, #20]
 8006186:	4313      	orrs	r3, r2
 8006188:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	697a      	ldr	r2, [r7, #20]
 800618e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	68fa      	ldr	r2, [r7, #12]
 8006194:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	685a      	ldr	r2, [r3, #4]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	693a      	ldr	r2, [r7, #16]
 80061a2:	621a      	str	r2, [r3, #32]
}
 80061a4:	bf00      	nop
 80061a6:	371c      	adds	r7, #28
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr
 80061b0:	40012c00 	.word	0x40012c00
 80061b4:	40013400 	.word	0x40013400
 80061b8:	40014000 	.word	0x40014000
 80061bc:	40014400 	.word	0x40014400
 80061c0:	40014800 	.word	0x40014800

080061c4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b087      	sub	sp, #28
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a1b      	ldr	r3, [r3, #32]
 80061d2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6a1b      	ldr	r3, [r3, #32]
 80061d8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80061f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	021b      	lsls	r3, r3, #8
 80061fe:	68fa      	ldr	r2, [r7, #12]
 8006200:	4313      	orrs	r3, r2
 8006202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800620a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	051b      	lsls	r3, r3, #20
 8006212:	693a      	ldr	r2, [r7, #16]
 8006214:	4313      	orrs	r3, r2
 8006216:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	4a18      	ldr	r2, [pc, #96]	@ (800627c <TIM_OC6_SetConfig+0xb8>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d00f      	beq.n	8006240 <TIM_OC6_SetConfig+0x7c>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	4a17      	ldr	r2, [pc, #92]	@ (8006280 <TIM_OC6_SetConfig+0xbc>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d00b      	beq.n	8006240 <TIM_OC6_SetConfig+0x7c>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	4a16      	ldr	r2, [pc, #88]	@ (8006284 <TIM_OC6_SetConfig+0xc0>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d007      	beq.n	8006240 <TIM_OC6_SetConfig+0x7c>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	4a15      	ldr	r2, [pc, #84]	@ (8006288 <TIM_OC6_SetConfig+0xc4>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d003      	beq.n	8006240 <TIM_OC6_SetConfig+0x7c>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	4a14      	ldr	r2, [pc, #80]	@ (800628c <TIM_OC6_SetConfig+0xc8>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d109      	bne.n	8006254 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006246:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	695b      	ldr	r3, [r3, #20]
 800624c:	029b      	lsls	r3, r3, #10
 800624e:	697a      	ldr	r2, [r7, #20]
 8006250:	4313      	orrs	r3, r2
 8006252:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	697a      	ldr	r2, [r7, #20]
 8006258:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	68fa      	ldr	r2, [r7, #12]
 800625e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	685a      	ldr	r2, [r3, #4]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	693a      	ldr	r2, [r7, #16]
 800626c:	621a      	str	r2, [r3, #32]
}
 800626e:	bf00      	nop
 8006270:	371c      	adds	r7, #28
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr
 800627a:	bf00      	nop
 800627c:	40012c00 	.word	0x40012c00
 8006280:	40013400 	.word	0x40013400
 8006284:	40014000 	.word	0x40014000
 8006288:	40014400 	.word	0x40014400
 800628c:	40014800 	.word	0x40014800

08006290 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006290:	b480      	push	{r7}
 8006292:	b087      	sub	sp, #28
 8006294:	af00      	add	r7, sp, #0
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	f003 031f 	and.w	r3, r3, #31
 80062a2:	2201      	movs	r2, #1
 80062a4:	fa02 f303 	lsl.w	r3, r2, r3
 80062a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	6a1a      	ldr	r2, [r3, #32]
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	43db      	mvns	r3, r3
 80062b2:	401a      	ands	r2, r3
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	6a1a      	ldr	r2, [r3, #32]
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	f003 031f 	and.w	r3, r3, #31
 80062c2:	6879      	ldr	r1, [r7, #4]
 80062c4:	fa01 f303 	lsl.w	r3, r1, r3
 80062c8:	431a      	orrs	r2, r3
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	621a      	str	r2, [r3, #32]
}
 80062ce:	bf00      	nop
 80062d0:	371c      	adds	r7, #28
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr
	...

080062dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80062dc:	b480      	push	{r7}
 80062de:	b085      	sub	sp, #20
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d101      	bne.n	80062f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062f0:	2302      	movs	r3, #2
 80062f2:	e068      	b.n	80063c6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2202      	movs	r2, #2
 8006300:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a2e      	ldr	r2, [pc, #184]	@ (80063d4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d004      	beq.n	8006328 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a2d      	ldr	r2, [pc, #180]	@ (80063d8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d108      	bne.n	800633a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800632e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	68fa      	ldr	r2, [r7, #12]
 8006336:	4313      	orrs	r3, r2
 8006338:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006340:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	68fa      	ldr	r2, [r7, #12]
 8006348:	4313      	orrs	r3, r2
 800634a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	68fa      	ldr	r2, [r7, #12]
 8006352:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a1e      	ldr	r2, [pc, #120]	@ (80063d4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d01d      	beq.n	800639a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006366:	d018      	beq.n	800639a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a1b      	ldr	r2, [pc, #108]	@ (80063dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d013      	beq.n	800639a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a1a      	ldr	r2, [pc, #104]	@ (80063e0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d00e      	beq.n	800639a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a18      	ldr	r2, [pc, #96]	@ (80063e4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d009      	beq.n	800639a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a13      	ldr	r2, [pc, #76]	@ (80063d8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d004      	beq.n	800639a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a14      	ldr	r2, [pc, #80]	@ (80063e8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d10c      	bne.n	80063b4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80063a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	68ba      	ldr	r2, [r7, #8]
 80063a8:	4313      	orrs	r3, r2
 80063aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	68ba      	ldr	r2, [r7, #8]
 80063b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80063c4:	2300      	movs	r3, #0
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3714      	adds	r7, #20
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr
 80063d2:	bf00      	nop
 80063d4:	40012c00 	.word	0x40012c00
 80063d8:	40013400 	.word	0x40013400
 80063dc:	40000400 	.word	0x40000400
 80063e0:	40000800 	.word	0x40000800
 80063e4:	40000c00 	.word	0x40000c00
 80063e8:	40014000 	.word	0x40014000

080063ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b085      	sub	sp, #20
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80063f6:	2300      	movs	r3, #0
 80063f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006400:	2b01      	cmp	r3, #1
 8006402:	d101      	bne.n	8006408 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006404:	2302      	movs	r3, #2
 8006406:	e065      	b.n	80064d4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2201      	movs	r2, #1
 800640c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	4313      	orrs	r3, r2
 800641c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	4313      	orrs	r3, r2
 800642a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	4313      	orrs	r3, r2
 8006438:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4313      	orrs	r3, r2
 8006446:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	691b      	ldr	r3, [r3, #16]
 8006452:	4313      	orrs	r3, r2
 8006454:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	695b      	ldr	r3, [r3, #20]
 8006460:	4313      	orrs	r3, r2
 8006462:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800646e:	4313      	orrs	r3, r2
 8006470:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	699b      	ldr	r3, [r3, #24]
 800647c:	041b      	lsls	r3, r3, #16
 800647e:	4313      	orrs	r3, r2
 8006480:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a16      	ldr	r2, [pc, #88]	@ (80064e0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d004      	beq.n	8006496 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a14      	ldr	r2, [pc, #80]	@ (80064e4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d115      	bne.n	80064c2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064a0:	051b      	lsls	r3, r3, #20
 80064a2:	4313      	orrs	r3, r2
 80064a4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	69db      	ldr	r3, [r3, #28]
 80064b0:	4313      	orrs	r3, r2
 80064b2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	6a1b      	ldr	r3, [r3, #32]
 80064be:	4313      	orrs	r3, r2
 80064c0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	68fa      	ldr	r2, [r7, #12]
 80064c8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2200      	movs	r2, #0
 80064ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80064d2:	2300      	movs	r3, #0
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3714      	adds	r7, #20
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr
 80064e0:	40012c00 	.word	0x40012c00
 80064e4:	40013400 	.word	0x40013400

080064e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b082      	sub	sp, #8
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d101      	bne.n	80064fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	e040      	b.n	800657c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d106      	bne.n	8006510 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2200      	movs	r2, #0
 8006506:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f7fc f81a 	bl	8002544 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2224      	movs	r2, #36	@ 0x24
 8006514:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f022 0201 	bic.w	r2, r2, #1
 8006524:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800652a:	2b00      	cmp	r3, #0
 800652c:	d002      	beq.n	8006534 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f000 fb6a 	bl	8006c08 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f000 f8af 	bl	8006698 <UART_SetConfig>
 800653a:	4603      	mov	r3, r0
 800653c:	2b01      	cmp	r3, #1
 800653e:	d101      	bne.n	8006544 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	e01b      	b.n	800657c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	685a      	ldr	r2, [r3, #4]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006552:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	689a      	ldr	r2, [r3, #8]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006562:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f042 0201 	orr.w	r2, r2, #1
 8006572:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f000 fbe9 	bl	8006d4c <UART_CheckIdleState>
 800657a:	4603      	mov	r3, r0
}
 800657c:	4618      	mov	r0, r3
 800657e:	3708      	adds	r7, #8
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}

08006584 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b08a      	sub	sp, #40	@ 0x28
 8006588:	af02      	add	r7, sp, #8
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	60b9      	str	r1, [r7, #8]
 800658e:	603b      	str	r3, [r7, #0]
 8006590:	4613      	mov	r3, r2
 8006592:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006598:	2b20      	cmp	r3, #32
 800659a:	d177      	bne.n	800668c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d002      	beq.n	80065a8 <HAL_UART_Transmit+0x24>
 80065a2:	88fb      	ldrh	r3, [r7, #6]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d101      	bne.n	80065ac <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80065a8:	2301      	movs	r3, #1
 80065aa:	e070      	b.n	800668e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2200      	movs	r2, #0
 80065b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2221      	movs	r2, #33	@ 0x21
 80065b8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80065ba:	f7fc facd 	bl	8002b58 <HAL_GetTick>
 80065be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	88fa      	ldrh	r2, [r7, #6]
 80065c4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	88fa      	ldrh	r2, [r7, #6]
 80065cc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065d8:	d108      	bne.n	80065ec <HAL_UART_Transmit+0x68>
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	691b      	ldr	r3, [r3, #16]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d104      	bne.n	80065ec <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80065e2:	2300      	movs	r3, #0
 80065e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	61bb      	str	r3, [r7, #24]
 80065ea:	e003      	b.n	80065f4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80065f0:	2300      	movs	r3, #0
 80065f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80065f4:	e02f      	b.n	8006656 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	9300      	str	r3, [sp, #0]
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	2200      	movs	r2, #0
 80065fe:	2180      	movs	r1, #128	@ 0x80
 8006600:	68f8      	ldr	r0, [r7, #12]
 8006602:	f000 fc4b 	bl	8006e9c <UART_WaitOnFlagUntilTimeout>
 8006606:	4603      	mov	r3, r0
 8006608:	2b00      	cmp	r3, #0
 800660a:	d004      	beq.n	8006616 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2220      	movs	r2, #32
 8006610:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006612:	2303      	movs	r3, #3
 8006614:	e03b      	b.n	800668e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006616:	69fb      	ldr	r3, [r7, #28]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d10b      	bne.n	8006634 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800661c:	69bb      	ldr	r3, [r7, #24]
 800661e:	881a      	ldrh	r2, [r3, #0]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006628:	b292      	uxth	r2, r2
 800662a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800662c:	69bb      	ldr	r3, [r7, #24]
 800662e:	3302      	adds	r3, #2
 8006630:	61bb      	str	r3, [r7, #24]
 8006632:	e007      	b.n	8006644 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006634:	69fb      	ldr	r3, [r7, #28]
 8006636:	781a      	ldrb	r2, [r3, #0]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800663e:	69fb      	ldr	r3, [r7, #28]
 8006640:	3301      	adds	r3, #1
 8006642:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800664a:	b29b      	uxth	r3, r3
 800664c:	3b01      	subs	r3, #1
 800664e:	b29a      	uxth	r2, r3
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800665c:	b29b      	uxth	r3, r3
 800665e:	2b00      	cmp	r3, #0
 8006660:	d1c9      	bne.n	80065f6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	9300      	str	r3, [sp, #0]
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	2200      	movs	r2, #0
 800666a:	2140      	movs	r1, #64	@ 0x40
 800666c:	68f8      	ldr	r0, [r7, #12]
 800666e:	f000 fc15 	bl	8006e9c <UART_WaitOnFlagUntilTimeout>
 8006672:	4603      	mov	r3, r0
 8006674:	2b00      	cmp	r3, #0
 8006676:	d004      	beq.n	8006682 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2220      	movs	r2, #32
 800667c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800667e:	2303      	movs	r3, #3
 8006680:	e005      	b.n	800668e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2220      	movs	r2, #32
 8006686:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006688:	2300      	movs	r3, #0
 800668a:	e000      	b.n	800668e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800668c:	2302      	movs	r3, #2
  }
}
 800668e:	4618      	mov	r0, r3
 8006690:	3720      	adds	r7, #32
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}
	...

08006698 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006698:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800669c:	b08a      	sub	sp, #40	@ 0x28
 800669e:	af00      	add	r7, sp, #0
 80066a0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80066a2:	2300      	movs	r3, #0
 80066a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	689a      	ldr	r2, [r3, #8]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	691b      	ldr	r3, [r3, #16]
 80066b0:	431a      	orrs	r2, r3
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	695b      	ldr	r3, [r3, #20]
 80066b6:	431a      	orrs	r2, r3
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	69db      	ldr	r3, [r3, #28]
 80066bc:	4313      	orrs	r3, r2
 80066be:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	681a      	ldr	r2, [r3, #0]
 80066c6:	4ba4      	ldr	r3, [pc, #656]	@ (8006958 <UART_SetConfig+0x2c0>)
 80066c8:	4013      	ands	r3, r2
 80066ca:	68fa      	ldr	r2, [r7, #12]
 80066cc:	6812      	ldr	r2, [r2, #0]
 80066ce:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80066d0:	430b      	orrs	r3, r1
 80066d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	68da      	ldr	r2, [r3, #12]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	430a      	orrs	r2, r1
 80066e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	699b      	ldr	r3, [r3, #24]
 80066ee:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a99      	ldr	r2, [pc, #612]	@ (800695c <UART_SetConfig+0x2c4>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d004      	beq.n	8006704 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6a1b      	ldr	r3, [r3, #32]
 80066fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006700:	4313      	orrs	r3, r2
 8006702:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006714:	430a      	orrs	r2, r1
 8006716:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a90      	ldr	r2, [pc, #576]	@ (8006960 <UART_SetConfig+0x2c8>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d126      	bne.n	8006770 <UART_SetConfig+0xd8>
 8006722:	4b90      	ldr	r3, [pc, #576]	@ (8006964 <UART_SetConfig+0x2cc>)
 8006724:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006728:	f003 0303 	and.w	r3, r3, #3
 800672c:	2b03      	cmp	r3, #3
 800672e:	d81b      	bhi.n	8006768 <UART_SetConfig+0xd0>
 8006730:	a201      	add	r2, pc, #4	@ (adr r2, 8006738 <UART_SetConfig+0xa0>)
 8006732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006736:	bf00      	nop
 8006738:	08006749 	.word	0x08006749
 800673c:	08006759 	.word	0x08006759
 8006740:	08006751 	.word	0x08006751
 8006744:	08006761 	.word	0x08006761
 8006748:	2301      	movs	r3, #1
 800674a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800674e:	e116      	b.n	800697e <UART_SetConfig+0x2e6>
 8006750:	2302      	movs	r3, #2
 8006752:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006756:	e112      	b.n	800697e <UART_SetConfig+0x2e6>
 8006758:	2304      	movs	r3, #4
 800675a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800675e:	e10e      	b.n	800697e <UART_SetConfig+0x2e6>
 8006760:	2308      	movs	r3, #8
 8006762:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006766:	e10a      	b.n	800697e <UART_SetConfig+0x2e6>
 8006768:	2310      	movs	r3, #16
 800676a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800676e:	e106      	b.n	800697e <UART_SetConfig+0x2e6>
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a7c      	ldr	r2, [pc, #496]	@ (8006968 <UART_SetConfig+0x2d0>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d138      	bne.n	80067ec <UART_SetConfig+0x154>
 800677a:	4b7a      	ldr	r3, [pc, #488]	@ (8006964 <UART_SetConfig+0x2cc>)
 800677c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006780:	f003 030c 	and.w	r3, r3, #12
 8006784:	2b0c      	cmp	r3, #12
 8006786:	d82d      	bhi.n	80067e4 <UART_SetConfig+0x14c>
 8006788:	a201      	add	r2, pc, #4	@ (adr r2, 8006790 <UART_SetConfig+0xf8>)
 800678a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800678e:	bf00      	nop
 8006790:	080067c5 	.word	0x080067c5
 8006794:	080067e5 	.word	0x080067e5
 8006798:	080067e5 	.word	0x080067e5
 800679c:	080067e5 	.word	0x080067e5
 80067a0:	080067d5 	.word	0x080067d5
 80067a4:	080067e5 	.word	0x080067e5
 80067a8:	080067e5 	.word	0x080067e5
 80067ac:	080067e5 	.word	0x080067e5
 80067b0:	080067cd 	.word	0x080067cd
 80067b4:	080067e5 	.word	0x080067e5
 80067b8:	080067e5 	.word	0x080067e5
 80067bc:	080067e5 	.word	0x080067e5
 80067c0:	080067dd 	.word	0x080067dd
 80067c4:	2300      	movs	r3, #0
 80067c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067ca:	e0d8      	b.n	800697e <UART_SetConfig+0x2e6>
 80067cc:	2302      	movs	r3, #2
 80067ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067d2:	e0d4      	b.n	800697e <UART_SetConfig+0x2e6>
 80067d4:	2304      	movs	r3, #4
 80067d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067da:	e0d0      	b.n	800697e <UART_SetConfig+0x2e6>
 80067dc:	2308      	movs	r3, #8
 80067de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067e2:	e0cc      	b.n	800697e <UART_SetConfig+0x2e6>
 80067e4:	2310      	movs	r3, #16
 80067e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067ea:	e0c8      	b.n	800697e <UART_SetConfig+0x2e6>
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a5e      	ldr	r2, [pc, #376]	@ (800696c <UART_SetConfig+0x2d4>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d125      	bne.n	8006842 <UART_SetConfig+0x1aa>
 80067f6:	4b5b      	ldr	r3, [pc, #364]	@ (8006964 <UART_SetConfig+0x2cc>)
 80067f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067fc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006800:	2b30      	cmp	r3, #48	@ 0x30
 8006802:	d016      	beq.n	8006832 <UART_SetConfig+0x19a>
 8006804:	2b30      	cmp	r3, #48	@ 0x30
 8006806:	d818      	bhi.n	800683a <UART_SetConfig+0x1a2>
 8006808:	2b20      	cmp	r3, #32
 800680a:	d00a      	beq.n	8006822 <UART_SetConfig+0x18a>
 800680c:	2b20      	cmp	r3, #32
 800680e:	d814      	bhi.n	800683a <UART_SetConfig+0x1a2>
 8006810:	2b00      	cmp	r3, #0
 8006812:	d002      	beq.n	800681a <UART_SetConfig+0x182>
 8006814:	2b10      	cmp	r3, #16
 8006816:	d008      	beq.n	800682a <UART_SetConfig+0x192>
 8006818:	e00f      	b.n	800683a <UART_SetConfig+0x1a2>
 800681a:	2300      	movs	r3, #0
 800681c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006820:	e0ad      	b.n	800697e <UART_SetConfig+0x2e6>
 8006822:	2302      	movs	r3, #2
 8006824:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006828:	e0a9      	b.n	800697e <UART_SetConfig+0x2e6>
 800682a:	2304      	movs	r3, #4
 800682c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006830:	e0a5      	b.n	800697e <UART_SetConfig+0x2e6>
 8006832:	2308      	movs	r3, #8
 8006834:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006838:	e0a1      	b.n	800697e <UART_SetConfig+0x2e6>
 800683a:	2310      	movs	r3, #16
 800683c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006840:	e09d      	b.n	800697e <UART_SetConfig+0x2e6>
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a4a      	ldr	r2, [pc, #296]	@ (8006970 <UART_SetConfig+0x2d8>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d125      	bne.n	8006898 <UART_SetConfig+0x200>
 800684c:	4b45      	ldr	r3, [pc, #276]	@ (8006964 <UART_SetConfig+0x2cc>)
 800684e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006852:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006856:	2bc0      	cmp	r3, #192	@ 0xc0
 8006858:	d016      	beq.n	8006888 <UART_SetConfig+0x1f0>
 800685a:	2bc0      	cmp	r3, #192	@ 0xc0
 800685c:	d818      	bhi.n	8006890 <UART_SetConfig+0x1f8>
 800685e:	2b80      	cmp	r3, #128	@ 0x80
 8006860:	d00a      	beq.n	8006878 <UART_SetConfig+0x1e0>
 8006862:	2b80      	cmp	r3, #128	@ 0x80
 8006864:	d814      	bhi.n	8006890 <UART_SetConfig+0x1f8>
 8006866:	2b00      	cmp	r3, #0
 8006868:	d002      	beq.n	8006870 <UART_SetConfig+0x1d8>
 800686a:	2b40      	cmp	r3, #64	@ 0x40
 800686c:	d008      	beq.n	8006880 <UART_SetConfig+0x1e8>
 800686e:	e00f      	b.n	8006890 <UART_SetConfig+0x1f8>
 8006870:	2300      	movs	r3, #0
 8006872:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006876:	e082      	b.n	800697e <UART_SetConfig+0x2e6>
 8006878:	2302      	movs	r3, #2
 800687a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800687e:	e07e      	b.n	800697e <UART_SetConfig+0x2e6>
 8006880:	2304      	movs	r3, #4
 8006882:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006886:	e07a      	b.n	800697e <UART_SetConfig+0x2e6>
 8006888:	2308      	movs	r3, #8
 800688a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800688e:	e076      	b.n	800697e <UART_SetConfig+0x2e6>
 8006890:	2310      	movs	r3, #16
 8006892:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006896:	e072      	b.n	800697e <UART_SetConfig+0x2e6>
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a35      	ldr	r2, [pc, #212]	@ (8006974 <UART_SetConfig+0x2dc>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d12a      	bne.n	80068f8 <UART_SetConfig+0x260>
 80068a2:	4b30      	ldr	r3, [pc, #192]	@ (8006964 <UART_SetConfig+0x2cc>)
 80068a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80068b0:	d01a      	beq.n	80068e8 <UART_SetConfig+0x250>
 80068b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80068b6:	d81b      	bhi.n	80068f0 <UART_SetConfig+0x258>
 80068b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068bc:	d00c      	beq.n	80068d8 <UART_SetConfig+0x240>
 80068be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068c2:	d815      	bhi.n	80068f0 <UART_SetConfig+0x258>
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d003      	beq.n	80068d0 <UART_SetConfig+0x238>
 80068c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068cc:	d008      	beq.n	80068e0 <UART_SetConfig+0x248>
 80068ce:	e00f      	b.n	80068f0 <UART_SetConfig+0x258>
 80068d0:	2300      	movs	r3, #0
 80068d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068d6:	e052      	b.n	800697e <UART_SetConfig+0x2e6>
 80068d8:	2302      	movs	r3, #2
 80068da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068de:	e04e      	b.n	800697e <UART_SetConfig+0x2e6>
 80068e0:	2304      	movs	r3, #4
 80068e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068e6:	e04a      	b.n	800697e <UART_SetConfig+0x2e6>
 80068e8:	2308      	movs	r3, #8
 80068ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068ee:	e046      	b.n	800697e <UART_SetConfig+0x2e6>
 80068f0:	2310      	movs	r3, #16
 80068f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068f6:	e042      	b.n	800697e <UART_SetConfig+0x2e6>
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a17      	ldr	r2, [pc, #92]	@ (800695c <UART_SetConfig+0x2c4>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d13a      	bne.n	8006978 <UART_SetConfig+0x2e0>
 8006902:	4b18      	ldr	r3, [pc, #96]	@ (8006964 <UART_SetConfig+0x2cc>)
 8006904:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006908:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800690c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006910:	d01a      	beq.n	8006948 <UART_SetConfig+0x2b0>
 8006912:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006916:	d81b      	bhi.n	8006950 <UART_SetConfig+0x2b8>
 8006918:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800691c:	d00c      	beq.n	8006938 <UART_SetConfig+0x2a0>
 800691e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006922:	d815      	bhi.n	8006950 <UART_SetConfig+0x2b8>
 8006924:	2b00      	cmp	r3, #0
 8006926:	d003      	beq.n	8006930 <UART_SetConfig+0x298>
 8006928:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800692c:	d008      	beq.n	8006940 <UART_SetConfig+0x2a8>
 800692e:	e00f      	b.n	8006950 <UART_SetConfig+0x2b8>
 8006930:	2300      	movs	r3, #0
 8006932:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006936:	e022      	b.n	800697e <UART_SetConfig+0x2e6>
 8006938:	2302      	movs	r3, #2
 800693a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800693e:	e01e      	b.n	800697e <UART_SetConfig+0x2e6>
 8006940:	2304      	movs	r3, #4
 8006942:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006946:	e01a      	b.n	800697e <UART_SetConfig+0x2e6>
 8006948:	2308      	movs	r3, #8
 800694a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800694e:	e016      	b.n	800697e <UART_SetConfig+0x2e6>
 8006950:	2310      	movs	r3, #16
 8006952:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006956:	e012      	b.n	800697e <UART_SetConfig+0x2e6>
 8006958:	efff69f3 	.word	0xefff69f3
 800695c:	40008000 	.word	0x40008000
 8006960:	40013800 	.word	0x40013800
 8006964:	40021000 	.word	0x40021000
 8006968:	40004400 	.word	0x40004400
 800696c:	40004800 	.word	0x40004800
 8006970:	40004c00 	.word	0x40004c00
 8006974:	40005000 	.word	0x40005000
 8006978:	2310      	movs	r3, #16
 800697a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a9f      	ldr	r2, [pc, #636]	@ (8006c00 <UART_SetConfig+0x568>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d17a      	bne.n	8006a7e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006988:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800698c:	2b08      	cmp	r3, #8
 800698e:	d824      	bhi.n	80069da <UART_SetConfig+0x342>
 8006990:	a201      	add	r2, pc, #4	@ (adr r2, 8006998 <UART_SetConfig+0x300>)
 8006992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006996:	bf00      	nop
 8006998:	080069bd 	.word	0x080069bd
 800699c:	080069db 	.word	0x080069db
 80069a0:	080069c5 	.word	0x080069c5
 80069a4:	080069db 	.word	0x080069db
 80069a8:	080069cb 	.word	0x080069cb
 80069ac:	080069db 	.word	0x080069db
 80069b0:	080069db 	.word	0x080069db
 80069b4:	080069db 	.word	0x080069db
 80069b8:	080069d3 	.word	0x080069d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069bc:	f7fd fbb6 	bl	800412c <HAL_RCC_GetPCLK1Freq>
 80069c0:	61f8      	str	r0, [r7, #28]
        break;
 80069c2:	e010      	b.n	80069e6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80069c4:	4b8f      	ldr	r3, [pc, #572]	@ (8006c04 <UART_SetConfig+0x56c>)
 80069c6:	61fb      	str	r3, [r7, #28]
        break;
 80069c8:	e00d      	b.n	80069e6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069ca:	f7fd fb17 	bl	8003ffc <HAL_RCC_GetSysClockFreq>
 80069ce:	61f8      	str	r0, [r7, #28]
        break;
 80069d0:	e009      	b.n	80069e6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80069d6:	61fb      	str	r3, [r7, #28]
        break;
 80069d8:	e005      	b.n	80069e6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80069da:	2300      	movs	r3, #0
 80069dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80069e4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80069e6:	69fb      	ldr	r3, [r7, #28]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	f000 80fb 	beq.w	8006be4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	685a      	ldr	r2, [r3, #4]
 80069f2:	4613      	mov	r3, r2
 80069f4:	005b      	lsls	r3, r3, #1
 80069f6:	4413      	add	r3, r2
 80069f8:	69fa      	ldr	r2, [r7, #28]
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d305      	bcc.n	8006a0a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006a04:	69fa      	ldr	r2, [r7, #28]
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d903      	bls.n	8006a12 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006a10:	e0e8      	b.n	8006be4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006a12:	69fb      	ldr	r3, [r7, #28]
 8006a14:	2200      	movs	r2, #0
 8006a16:	461c      	mov	r4, r3
 8006a18:	4615      	mov	r5, r2
 8006a1a:	f04f 0200 	mov.w	r2, #0
 8006a1e:	f04f 0300 	mov.w	r3, #0
 8006a22:	022b      	lsls	r3, r5, #8
 8006a24:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006a28:	0222      	lsls	r2, r4, #8
 8006a2a:	68f9      	ldr	r1, [r7, #12]
 8006a2c:	6849      	ldr	r1, [r1, #4]
 8006a2e:	0849      	lsrs	r1, r1, #1
 8006a30:	2000      	movs	r0, #0
 8006a32:	4688      	mov	r8, r1
 8006a34:	4681      	mov	r9, r0
 8006a36:	eb12 0a08 	adds.w	sl, r2, r8
 8006a3a:	eb43 0b09 	adc.w	fp, r3, r9
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	603b      	str	r3, [r7, #0]
 8006a46:	607a      	str	r2, [r7, #4]
 8006a48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a4c:	4650      	mov	r0, sl
 8006a4e:	4659      	mov	r1, fp
 8006a50:	f7f9 fe2a 	bl	80006a8 <__aeabi_uldivmod>
 8006a54:	4602      	mov	r2, r0
 8006a56:	460b      	mov	r3, r1
 8006a58:	4613      	mov	r3, r2
 8006a5a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006a5c:	69bb      	ldr	r3, [r7, #24]
 8006a5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a62:	d308      	bcc.n	8006a76 <UART_SetConfig+0x3de>
 8006a64:	69bb      	ldr	r3, [r7, #24]
 8006a66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a6a:	d204      	bcs.n	8006a76 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	69ba      	ldr	r2, [r7, #24]
 8006a72:	60da      	str	r2, [r3, #12]
 8006a74:	e0b6      	b.n	8006be4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006a7c:	e0b2      	b.n	8006be4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	69db      	ldr	r3, [r3, #28]
 8006a82:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a86:	d15e      	bne.n	8006b46 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006a88:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006a8c:	2b08      	cmp	r3, #8
 8006a8e:	d828      	bhi.n	8006ae2 <UART_SetConfig+0x44a>
 8006a90:	a201      	add	r2, pc, #4	@ (adr r2, 8006a98 <UART_SetConfig+0x400>)
 8006a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a96:	bf00      	nop
 8006a98:	08006abd 	.word	0x08006abd
 8006a9c:	08006ac5 	.word	0x08006ac5
 8006aa0:	08006acd 	.word	0x08006acd
 8006aa4:	08006ae3 	.word	0x08006ae3
 8006aa8:	08006ad3 	.word	0x08006ad3
 8006aac:	08006ae3 	.word	0x08006ae3
 8006ab0:	08006ae3 	.word	0x08006ae3
 8006ab4:	08006ae3 	.word	0x08006ae3
 8006ab8:	08006adb 	.word	0x08006adb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006abc:	f7fd fb36 	bl	800412c <HAL_RCC_GetPCLK1Freq>
 8006ac0:	61f8      	str	r0, [r7, #28]
        break;
 8006ac2:	e014      	b.n	8006aee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ac4:	f7fd fb48 	bl	8004158 <HAL_RCC_GetPCLK2Freq>
 8006ac8:	61f8      	str	r0, [r7, #28]
        break;
 8006aca:	e010      	b.n	8006aee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006acc:	4b4d      	ldr	r3, [pc, #308]	@ (8006c04 <UART_SetConfig+0x56c>)
 8006ace:	61fb      	str	r3, [r7, #28]
        break;
 8006ad0:	e00d      	b.n	8006aee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ad2:	f7fd fa93 	bl	8003ffc <HAL_RCC_GetSysClockFreq>
 8006ad6:	61f8      	str	r0, [r7, #28]
        break;
 8006ad8:	e009      	b.n	8006aee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ada:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ade:	61fb      	str	r3, [r7, #28]
        break;
 8006ae0:	e005      	b.n	8006aee <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006aec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006aee:	69fb      	ldr	r3, [r7, #28]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d077      	beq.n	8006be4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006af4:	69fb      	ldr	r3, [r7, #28]
 8006af6:	005a      	lsls	r2, r3, #1
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	085b      	lsrs	r3, r3, #1
 8006afe:	441a      	add	r2, r3
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b08:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b0a:	69bb      	ldr	r3, [r7, #24]
 8006b0c:	2b0f      	cmp	r3, #15
 8006b0e:	d916      	bls.n	8006b3e <UART_SetConfig+0x4a6>
 8006b10:	69bb      	ldr	r3, [r7, #24]
 8006b12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b16:	d212      	bcs.n	8006b3e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b18:	69bb      	ldr	r3, [r7, #24]
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	f023 030f 	bic.w	r3, r3, #15
 8006b20:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b22:	69bb      	ldr	r3, [r7, #24]
 8006b24:	085b      	lsrs	r3, r3, #1
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	f003 0307 	and.w	r3, r3, #7
 8006b2c:	b29a      	uxth	r2, r3
 8006b2e:	8afb      	ldrh	r3, [r7, #22]
 8006b30:	4313      	orrs	r3, r2
 8006b32:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	8afa      	ldrh	r2, [r7, #22]
 8006b3a:	60da      	str	r2, [r3, #12]
 8006b3c:	e052      	b.n	8006be4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006b44:	e04e      	b.n	8006be4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006b46:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006b4a:	2b08      	cmp	r3, #8
 8006b4c:	d827      	bhi.n	8006b9e <UART_SetConfig+0x506>
 8006b4e:	a201      	add	r2, pc, #4	@ (adr r2, 8006b54 <UART_SetConfig+0x4bc>)
 8006b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b54:	08006b79 	.word	0x08006b79
 8006b58:	08006b81 	.word	0x08006b81
 8006b5c:	08006b89 	.word	0x08006b89
 8006b60:	08006b9f 	.word	0x08006b9f
 8006b64:	08006b8f 	.word	0x08006b8f
 8006b68:	08006b9f 	.word	0x08006b9f
 8006b6c:	08006b9f 	.word	0x08006b9f
 8006b70:	08006b9f 	.word	0x08006b9f
 8006b74:	08006b97 	.word	0x08006b97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b78:	f7fd fad8 	bl	800412c <HAL_RCC_GetPCLK1Freq>
 8006b7c:	61f8      	str	r0, [r7, #28]
        break;
 8006b7e:	e014      	b.n	8006baa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b80:	f7fd faea 	bl	8004158 <HAL_RCC_GetPCLK2Freq>
 8006b84:	61f8      	str	r0, [r7, #28]
        break;
 8006b86:	e010      	b.n	8006baa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b88:	4b1e      	ldr	r3, [pc, #120]	@ (8006c04 <UART_SetConfig+0x56c>)
 8006b8a:	61fb      	str	r3, [r7, #28]
        break;
 8006b8c:	e00d      	b.n	8006baa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b8e:	f7fd fa35 	bl	8003ffc <HAL_RCC_GetSysClockFreq>
 8006b92:	61f8      	str	r0, [r7, #28]
        break;
 8006b94:	e009      	b.n	8006baa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b9a:	61fb      	str	r3, [r7, #28]
        break;
 8006b9c:	e005      	b.n	8006baa <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006ba8:	bf00      	nop
    }

    if (pclk != 0U)
 8006baa:	69fb      	ldr	r3, [r7, #28]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d019      	beq.n	8006be4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	085a      	lsrs	r2, r3, #1
 8006bb6:	69fb      	ldr	r3, [r7, #28]
 8006bb8:	441a      	add	r2, r3
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bc2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bc4:	69bb      	ldr	r3, [r7, #24]
 8006bc6:	2b0f      	cmp	r3, #15
 8006bc8:	d909      	bls.n	8006bde <UART_SetConfig+0x546>
 8006bca:	69bb      	ldr	r3, [r7, #24]
 8006bcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bd0:	d205      	bcs.n	8006bde <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006bd2:	69bb      	ldr	r3, [r7, #24]
 8006bd4:	b29a      	uxth	r2, r3
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	60da      	str	r2, [r3, #12]
 8006bdc:	e002      	b.n	8006be4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006bde:	2301      	movs	r3, #1
 8006be0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2200      	movs	r2, #0
 8006be8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2200      	movs	r2, #0
 8006bee:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006bf0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3728      	adds	r7, #40	@ 0x28
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006bfe:	bf00      	nop
 8006c00:	40008000 	.word	0x40008000
 8006c04:	00f42400 	.word	0x00f42400

08006c08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b083      	sub	sp, #12
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c14:	f003 0308 	and.w	r3, r3, #8
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d00a      	beq.n	8006c32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	430a      	orrs	r2, r1
 8006c30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c36:	f003 0301 	and.w	r3, r3, #1
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d00a      	beq.n	8006c54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	430a      	orrs	r2, r1
 8006c52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c58:	f003 0302 	and.w	r3, r3, #2
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d00a      	beq.n	8006c76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	430a      	orrs	r2, r1
 8006c74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c7a:	f003 0304 	and.w	r3, r3, #4
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d00a      	beq.n	8006c98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	430a      	orrs	r2, r1
 8006c96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c9c:	f003 0310 	and.w	r3, r3, #16
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d00a      	beq.n	8006cba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	430a      	orrs	r2, r1
 8006cb8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cbe:	f003 0320 	and.w	r3, r3, #32
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d00a      	beq.n	8006cdc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	430a      	orrs	r2, r1
 8006cda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ce0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d01a      	beq.n	8006d1e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	430a      	orrs	r2, r1
 8006cfc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d06:	d10a      	bne.n	8006d1e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	430a      	orrs	r2, r1
 8006d1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d00a      	beq.n	8006d40 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	430a      	orrs	r2, r1
 8006d3e:	605a      	str	r2, [r3, #4]
  }
}
 8006d40:	bf00      	nop
 8006d42:	370c      	adds	r7, #12
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr

08006d4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b098      	sub	sp, #96	@ 0x60
 8006d50:	af02      	add	r7, sp, #8
 8006d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2200      	movs	r2, #0
 8006d58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d5c:	f7fb fefc 	bl	8002b58 <HAL_GetTick>
 8006d60:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f003 0308 	and.w	r3, r3, #8
 8006d6c:	2b08      	cmp	r3, #8
 8006d6e:	d12e      	bne.n	8006dce <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d70:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006d74:	9300      	str	r3, [sp, #0]
 8006d76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 f88c 	bl	8006e9c <UART_WaitOnFlagUntilTimeout>
 8006d84:	4603      	mov	r3, r0
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d021      	beq.n	8006dce <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d92:	e853 3f00 	ldrex	r3, [r3]
 8006d96:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006d98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d9e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	461a      	mov	r2, r3
 8006da6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006da8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006daa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006dae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006db0:	e841 2300 	strex	r3, r2, [r1]
 8006db4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006db6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d1e6      	bne.n	8006d8a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2220      	movs	r2, #32
 8006dc0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006dca:	2303      	movs	r3, #3
 8006dcc:	e062      	b.n	8006e94 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f003 0304 	and.w	r3, r3, #4
 8006dd8:	2b04      	cmp	r3, #4
 8006dda:	d149      	bne.n	8006e70 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ddc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006de0:	9300      	str	r3, [sp, #0]
 8006de2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006de4:	2200      	movs	r2, #0
 8006de6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 f856 	bl	8006e9c <UART_WaitOnFlagUntilTimeout>
 8006df0:	4603      	mov	r3, r0
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d03c      	beq.n	8006e70 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dfe:	e853 3f00 	ldrex	r3, [r3]
 8006e02:	623b      	str	r3, [r7, #32]
   return(result);
 8006e04:	6a3b      	ldr	r3, [r7, #32]
 8006e06:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	461a      	mov	r2, r3
 8006e12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e14:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e16:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e18:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006e1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e1c:	e841 2300 	strex	r3, r2, [r1]
 8006e20:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006e22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d1e6      	bne.n	8006df6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	3308      	adds	r3, #8
 8006e2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	e853 3f00 	ldrex	r3, [r3]
 8006e36:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f023 0301 	bic.w	r3, r3, #1
 8006e3e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	3308      	adds	r3, #8
 8006e46:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e48:	61fa      	str	r2, [r7, #28]
 8006e4a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e4c:	69b9      	ldr	r1, [r7, #24]
 8006e4e:	69fa      	ldr	r2, [r7, #28]
 8006e50:	e841 2300 	strex	r3, r2, [r1]
 8006e54:	617b      	str	r3, [r7, #20]
   return(result);
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d1e5      	bne.n	8006e28 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2220      	movs	r2, #32
 8006e60:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2200      	movs	r2, #0
 8006e68:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e6c:	2303      	movs	r3, #3
 8006e6e:	e011      	b.n	8006e94 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2220      	movs	r2, #32
 8006e74:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2220      	movs	r2, #32
 8006e7a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2200      	movs	r2, #0
 8006e82:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2200      	movs	r2, #0
 8006e88:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006e92:	2300      	movs	r3, #0
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3758      	adds	r7, #88	@ 0x58
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b084      	sub	sp, #16
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	60f8      	str	r0, [r7, #12]
 8006ea4:	60b9      	str	r1, [r7, #8]
 8006ea6:	603b      	str	r3, [r7, #0]
 8006ea8:	4613      	mov	r3, r2
 8006eaa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006eac:	e04f      	b.n	8006f4e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006eae:	69bb      	ldr	r3, [r7, #24]
 8006eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eb4:	d04b      	beq.n	8006f4e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006eb6:	f7fb fe4f 	bl	8002b58 <HAL_GetTick>
 8006eba:	4602      	mov	r2, r0
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	1ad3      	subs	r3, r2, r3
 8006ec0:	69ba      	ldr	r2, [r7, #24]
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d302      	bcc.n	8006ecc <UART_WaitOnFlagUntilTimeout+0x30>
 8006ec6:	69bb      	ldr	r3, [r7, #24]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d101      	bne.n	8006ed0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006ecc:	2303      	movs	r3, #3
 8006ece:	e04e      	b.n	8006f6e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f003 0304 	and.w	r3, r3, #4
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d037      	beq.n	8006f4e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	2b80      	cmp	r3, #128	@ 0x80
 8006ee2:	d034      	beq.n	8006f4e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	2b40      	cmp	r3, #64	@ 0x40
 8006ee8:	d031      	beq.n	8006f4e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	69db      	ldr	r3, [r3, #28]
 8006ef0:	f003 0308 	and.w	r3, r3, #8
 8006ef4:	2b08      	cmp	r3, #8
 8006ef6:	d110      	bne.n	8006f1a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	2208      	movs	r2, #8
 8006efe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f00:	68f8      	ldr	r0, [r7, #12]
 8006f02:	f000 f838 	bl	8006f76 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2208      	movs	r2, #8
 8006f0a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2200      	movs	r2, #0
 8006f12:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
 8006f18:	e029      	b.n	8006f6e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	69db      	ldr	r3, [r3, #28]
 8006f20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f24:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f28:	d111      	bne.n	8006f4e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006f32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f34:	68f8      	ldr	r0, [r7, #12]
 8006f36:	f000 f81e 	bl	8006f76 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2220      	movs	r2, #32
 8006f3e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2200      	movs	r2, #0
 8006f46:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006f4a:	2303      	movs	r3, #3
 8006f4c:	e00f      	b.n	8006f6e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	69da      	ldr	r2, [r3, #28]
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	4013      	ands	r3, r2
 8006f58:	68ba      	ldr	r2, [r7, #8]
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	bf0c      	ite	eq
 8006f5e:	2301      	moveq	r3, #1
 8006f60:	2300      	movne	r3, #0
 8006f62:	b2db      	uxtb	r3, r3
 8006f64:	461a      	mov	r2, r3
 8006f66:	79fb      	ldrb	r3, [r7, #7]
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d0a0      	beq.n	8006eae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f6c:	2300      	movs	r3, #0
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3710      	adds	r7, #16
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}

08006f76 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f76:	b480      	push	{r7}
 8006f78:	b095      	sub	sp, #84	@ 0x54
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f86:	e853 3f00 	ldrex	r3, [r3]
 8006f8a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f8e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	461a      	mov	r2, r3
 8006f9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f9c:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f9e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006fa2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006fa4:	e841 2300 	strex	r3, r2, [r1]
 8006fa8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006faa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d1e6      	bne.n	8006f7e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	3308      	adds	r3, #8
 8006fb6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb8:	6a3b      	ldr	r3, [r7, #32]
 8006fba:	e853 3f00 	ldrex	r3, [r3]
 8006fbe:	61fb      	str	r3, [r7, #28]
   return(result);
 8006fc0:	69fb      	ldr	r3, [r7, #28]
 8006fc2:	f023 0301 	bic.w	r3, r3, #1
 8006fc6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	3308      	adds	r3, #8
 8006fce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006fd0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006fd2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006fd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006fd8:	e841 2300 	strex	r3, r2, [r1]
 8006fdc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d1e5      	bne.n	8006fb0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d118      	bne.n	800701e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	e853 3f00 	ldrex	r3, [r3]
 8006ff8:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	f023 0310 	bic.w	r3, r3, #16
 8007000:	647b      	str	r3, [r7, #68]	@ 0x44
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	461a      	mov	r2, r3
 8007008:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800700a:	61bb      	str	r3, [r7, #24]
 800700c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800700e:	6979      	ldr	r1, [r7, #20]
 8007010:	69ba      	ldr	r2, [r7, #24]
 8007012:	e841 2300 	strex	r3, r2, [r1]
 8007016:	613b      	str	r3, [r7, #16]
   return(result);
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d1e6      	bne.n	8006fec <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2220      	movs	r2, #32
 8007022:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2200      	movs	r2, #0
 8007030:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007032:	bf00      	nop
 8007034:	3754      	adds	r7, #84	@ 0x54
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr

0800703e <hci_disconnection_complete_event_process>:
 * @param Reason Reason for disconnection. See Error Codes.
 * @retval None
 */

tBleStatus hci_disconnection_complete_event_process(uint8_t *buffer_in)
{
 800703e:	b580      	push	{r7, lr}
 8007040:	b084      	sub	sp, #16
 8007042:	af00      	add	r7, sp, #0
 8007044:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007046:	2300      	movs	r3, #0
 8007048:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_disconnection_complete_event_rp0 *rp0 = (hci_disconnection_complete_event_rp0 *)buffer_in;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	60bb      	str	r3, [r7, #8]
  hci_disconnection_complete_event(rp0->Status,
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	7818      	ldrb	r0, [r3, #0]
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007058:	b299      	uxth	r1, r3
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	78db      	ldrb	r3, [r3, #3]
 800705e:	461a      	mov	r2, r3
 8007060:	f7fa f8fe 	bl	8001260 <hci_disconnection_complete_event>
                                   rp0->Connection_Handle,
                                   rp0->Reason);

  return status;
 8007064:	7bfb      	ldrb	r3, [r7, #15]
}
 8007066:	4618      	mov	r0, r3
 8007068:	3710      	adds	r7, #16
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}

0800706e <hci_encryption_change_event_process>:
 *        - 0x01: Link Level Encryption is ON with AES-CCM
 * @retval None
 */

tBleStatus hci_encryption_change_event_process(uint8_t *buffer_in)
{
 800706e:	b580      	push	{r7, lr}
 8007070:	b084      	sub	sp, #16
 8007072:	af00      	add	r7, sp, #0
 8007074:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007076:	2300      	movs	r3, #0
 8007078:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_encryption_change_event_rp0 *rp0 = (hci_encryption_change_event_rp0 *)buffer_in;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	60bb      	str	r3, [r7, #8]
  hci_encryption_change_event(rp0->Status,
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	7818      	ldrb	r0, [r3, #0]
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007088:	b299      	uxth	r1, r3
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	78db      	ldrb	r3, [r3, #3]
 800708e:	461a      	mov	r2, r3
 8007090:	f000 ffca 	bl	8008028 <hci_encryption_change_event>
                              rp0->Connection_Handle,
                              rp0->Encryption_Enabled);

  return status;
 8007094:	7bfb      	ldrb	r3, [r7, #15]
}
 8007096:	4618      	mov	r0, r3
 8007098:	3710      	adds	r7, #16
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}

0800709e <hci_read_remote_version_information_complete_event_process>:
 * @param Subversion Subversion of the LMP in the remote Controller
 * @retval None
 */

tBleStatus hci_read_remote_version_information_complete_event_process(uint8_t *buffer_in)
{
 800709e:	b590      	push	{r4, r7, lr}
 80070a0:	b087      	sub	sp, #28
 80070a2:	af02      	add	r7, sp, #8
 80070a4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80070a6:	2300      	movs	r3, #0
 80070a8:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_read_remote_version_information_complete_event_rp0 *rp0 = (hci_read_remote_version_information_complete_event_rp0 *)buffer_in;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	60bb      	str	r3, [r7, #8]
  hci_read_remote_version_information_complete_event(rp0->Status,
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	7818      	ldrb	r0, [r3, #0]
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80070b8:	b299      	uxth	r1, r3
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	78da      	ldrb	r2, [r3, #3]
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	889b      	ldrh	r3, [r3, #4]
 80070c2:	b29c      	uxth	r4, r3
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	88db      	ldrh	r3, [r3, #6]
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	9300      	str	r3, [sp, #0]
 80070cc:	4623      	mov	r3, r4
 80070ce:	f000 ffbd 	bl	800804c <hci_read_remote_version_information_complete_event>
                                                     rp0->Connection_Handle,
                                                     rp0->Version,
                                                     rp0->Manufacturer_Name,
                                                     rp0->Subversion);

  return status;
 80070d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3714      	adds	r7, #20
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd90      	pop	{r4, r7, pc}

080070dc <hci_hardware_error_event_process>:
 *        - 0x03: Internal queue overflow error
 * @retval None
 */

tBleStatus hci_hardware_error_event_process(uint8_t *buffer_in)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b084      	sub	sp, #16
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80070e4:	2300      	movs	r3, #0
 80070e6:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_hardware_error_event_rp0 *rp0 = (hci_hardware_error_event_rp0 *)buffer_in;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	60bb      	str	r3, [r7, #8]
  hci_hardware_error_event(rp0->Hardware_Code);
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	781b      	ldrb	r3, [r3, #0]
 80070f0:	4618      	mov	r0, r3
 80070f2:	f000 ffc3 	bl	800807c <hci_hardware_error_event>

  return status;
 80070f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3710      	adds	r7, #16
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}

08007100 <hci_number_of_completed_packets_event_process>:
 * @param Handle_Packets_Pair_Entry See @ref Handle_Packets_Pair_Entry_t
 * @retval None
 */

tBleStatus hci_number_of_completed_packets_event_process(uint8_t *buffer_in)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b0a6      	sub	sp, #152	@ 0x98
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007108:	2300      	movs	r3, #0
 800710a:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  /* Input params */
  hci_number_of_completed_packets_event_rp0 *rp0 = (hci_number_of_completed_packets_event_rp0 *)buffer_in;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint8_t size = 1;
 8007114:	2301      	movs	r3, #1
 8007116:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  int i;
  Handle_Packets_Pair_Entry_t Handle_Packets_Pair_Entry[HCI_MAX_PAYLOAD_SIZE/sizeof(Handle_Packets_Pair_Entry_t)];
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 800711a:	2300      	movs	r3, #0
 800711c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007120:	e02e      	b.n	8007180 <hci_number_of_completed_packets_event_process+0x80>
    Handle_Packets_Pair_Entry[i].Connection_Handle = rp0->Handle_Packets_Pair_Entry[i].Connection_Handle;
 8007122:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8007126:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800712a:	009b      	lsls	r3, r3, #2
 800712c:	4413      	add	r3, r2
 800712e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007132:	b29a      	uxth	r2, r3
 8007134:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007138:	009b      	lsls	r3, r3, #2
 800713a:	3398      	adds	r3, #152	@ 0x98
 800713c:	443b      	add	r3, r7
 800713e:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 8007142:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8007146:	3302      	adds	r3, #2
 8007148:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets = rp0->Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets;
 800714c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8007150:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007154:	009b      	lsls	r3, r3, #2
 8007156:	4413      	add	r3, r2
 8007158:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800715c:	b29a      	uxth	r2, r3
 800715e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007162:	009b      	lsls	r3, r3, #2
 8007164:	3398      	adds	r3, #152	@ 0x98
 8007166:	443b      	add	r3, r7
 8007168:	f823 2c8e 	strh.w	r2, [r3, #-142]
    size += 2;
 800716c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8007170:	3302      	adds	r3, #2
 8007172:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8007176:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800717a:	3301      	adds	r3, #1
 800717c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007180:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007184:	781b      	ldrb	r3, [r3, #0]
 8007186:	461a      	mov	r2, r3
 8007188:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800718c:	4293      	cmp	r3, r2
 800718e:	dbc8      	blt.n	8007122 <hci_number_of_completed_packets_event_process+0x22>
  }
  hci_number_of_completed_packets_event(rp0->Number_of_Handles,
 8007190:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007194:	781b      	ldrb	r3, [r3, #0]
 8007196:	f107 0208 	add.w	r2, r7, #8
 800719a:	4611      	mov	r1, r2
 800719c:	4618      	mov	r0, r3
 800719e:	f000 ff7b 	bl	8008098 <hci_number_of_completed_packets_event>
                                        Handle_Packets_Pair_Entry);

  return status;
 80071a2:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3798      	adds	r7, #152	@ 0x98
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}

080071ae <hci_data_buffer_overflow_event_process>:
 *        - 0x01: ACL Buffer Overflow
 * @retval None
 */

tBleStatus hci_data_buffer_overflow_event_process(uint8_t *buffer_in)
{
 80071ae:	b580      	push	{r7, lr}
 80071b0:	b084      	sub	sp, #16
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80071b6:	2300      	movs	r3, #0
 80071b8:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_data_buffer_overflow_event_rp0 *rp0 = (hci_data_buffer_overflow_event_rp0 *)buffer_in;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	60bb      	str	r3, [r7, #8]
  hci_data_buffer_overflow_event(rp0->Link_Type);
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	781b      	ldrb	r3, [r3, #0]
 80071c2:	4618      	mov	r0, r3
 80071c4:	f000 ff78 	bl	80080b8 <hci_data_buffer_overflow_event>

  return status;
 80071c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3710      	adds	r7, #16
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}

080071d2 <hci_encryption_key_refresh_complete_event_process>:
 *        - 0x0000 ... 0x0EFF
 * @retval None
 */

tBleStatus hci_encryption_key_refresh_complete_event_process(uint8_t *buffer_in)
{
 80071d2:	b580      	push	{r7, lr}
 80071d4:	b084      	sub	sp, #16
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80071da:	2300      	movs	r3, #0
 80071dc:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_encryption_key_refresh_complete_event_rp0 *rp0 = (hci_encryption_key_refresh_complete_event_rp0 *)buffer_in;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	60bb      	str	r3, [r7, #8]
  hci_encryption_key_refresh_complete_event(rp0->Status,
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	781a      	ldrb	r2, [r3, #0]
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	4619      	mov	r1, r3
 80071f0:	4610      	mov	r0, r2
 80071f2:	f000 ff6f 	bl	80080d4 <hci_encryption_key_refresh_complete_event>
                                            rp0->Connection_Handle);

  return status;
 80071f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3710      	adds	r7, #16
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}

08007200 <aci_blue_initialized_event_process>:
 *        - 0x09: System reset due to ECC error
 * @retval None
 */

tBleStatus aci_blue_initialized_event_process(uint8_t *buffer_in)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b084      	sub	sp, #16
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007208:	2300      	movs	r3, #0
 800720a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_initialized_event_rp0 *rp0 = (aci_blue_initialized_event_rp0 *)buffer_in;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	60bb      	str	r3, [r7, #8]
  aci_blue_initialized_event(rp0->Reason_Code);
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	4618      	mov	r0, r3
 8007216:	f001 fa6d 	bl	80086f4 <aci_blue_initialized_event>

  return status;
 800721a:	7bfb      	ldrb	r3, [r7, #15]
}
 800721c:	4618      	mov	r0, r3
 800721e:	3710      	adds	r7, #16
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}

08007224 <aci_blue_events_lost_event_process>:
 *        - 0x0080000000000000: ACI_GAP_KEYPRESS_NOTIFICATION_EVENT
 * @retval None
 */

tBleStatus aci_blue_events_lost_event_process(uint8_t *buffer_in)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b084      	sub	sp, #16
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800722c:	2300      	movs	r3, #0
 800722e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_events_lost_event_rp0 *rp0 = (aci_blue_events_lost_event_rp0 *)buffer_in;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	60bb      	str	r3, [r7, #8]
  aci_blue_events_lost_event(rp0->Lost_Events);
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	4618      	mov	r0, r3
 8007238:	f001 fa6c 	bl	8008714 <aci_blue_events_lost_event>

  return status;
 800723c:	7bfb      	ldrb	r3, [r7, #15]
}
 800723e:	4618      	mov	r0, r3
 8007240:	3710      	adds	r7, #16
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}

08007246 <aci_blue_crash_info_event_process>:
 * @param Debug_Data Debug data
 * @retval None
 */

tBleStatus aci_blue_crash_info_event_process(uint8_t *buffer_in)
{
 8007246:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800724a:	b08d      	sub	sp, #52	@ 0x34
 800724c:	af08      	add	r7, sp, #32
 800724e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007250:	2300      	movs	r3, #0
 8007252:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_crash_info_event_rp0 *rp0 = (aci_blue_crash_info_event_rp0 *)buffer_in;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	60bb      	str	r3, [r7, #8]
  aci_blue_crash_info_event(rp0->Crash_Type,
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	f893 c000 	ldrb.w	ip, [r3]
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	f8d3 e001 	ldr.w	lr, [r3, #1]
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	f8d3 8005 	ldr.w	r8, [r3, #5]
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	f8d3 9009 	ldr.w	r9, [r3, #9]
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	f8d3 300d 	ldr.w	r3, [r3, #13]
 8007276:	603b      	str	r3, [r7, #0]
 8007278:	68ba      	ldr	r2, [r7, #8]
 800727a:	f8d2 2011 	ldr.w	r2, [r2, #17]
 800727e:	68b9      	ldr	r1, [r7, #8]
 8007280:	f8d1 1015 	ldr.w	r1, [r1, #21]
 8007284:	68b8      	ldr	r0, [r7, #8]
 8007286:	f8d0 0019 	ldr.w	r0, [r0, #25]
 800728a:	68bc      	ldr	r4, [r7, #8]
 800728c:	f8d4 401d 	ldr.w	r4, [r4, #29]
 8007290:	68bd      	ldr	r5, [r7, #8]
 8007292:	f8d5 5021 	ldr.w	r5, [r5, #33]	@ 0x21
 8007296:	68be      	ldr	r6, [r7, #8]
 8007298:	f896 6025 	ldrb.w	r6, [r6, #37]	@ 0x25
                            rp0->R12,
                            rp0->LR,
                            rp0->PC,
                            rp0->xPSR,
                            rp0->Debug_Data_Length,
                            rp0->Debug_Data);
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	3326      	adds	r3, #38	@ 0x26
  aci_blue_crash_info_event(rp0->Crash_Type,
 80072a0:	9307      	str	r3, [sp, #28]
 80072a2:	9606      	str	r6, [sp, #24]
 80072a4:	9505      	str	r5, [sp, #20]
 80072a6:	9404      	str	r4, [sp, #16]
 80072a8:	9003      	str	r0, [sp, #12]
 80072aa:	9102      	str	r1, [sp, #8]
 80072ac:	9201      	str	r2, [sp, #4]
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	9300      	str	r3, [sp, #0]
 80072b2:	464b      	mov	r3, r9
 80072b4:	4642      	mov	r2, r8
 80072b6:	4671      	mov	r1, lr
 80072b8:	4660      	mov	r0, ip
 80072ba:	f001 fa39 	bl	8008730 <aci_blue_crash_info_event>

  return status;
 80072be:	7bfb      	ldrb	r3, [r7, #15]
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3714      	adds	r7, #20
 80072c4:	46bd      	mov	sp, r7
 80072c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080072ca <aci_hal_end_of_radio_activity_event_process>:
 *        time units.
 * @retval None
 */

tBleStatus aci_hal_end_of_radio_activity_event_process(uint8_t *buffer_in)
{
 80072ca:	b580      	push	{r7, lr}
 80072cc:	b084      	sub	sp, #16
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80072d2:	2300      	movs	r3, #0
 80072d4:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_end_of_radio_activity_event_rp0 *rp0 = (aci_hal_end_of_radio_activity_event_rp0 *)buffer_in;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	60bb      	str	r3, [r7, #8]
  aci_hal_end_of_radio_activity_event(rp0->Last_State,
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	7818      	ldrb	r0, [r3, #0]
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	7859      	ldrb	r1, [r3, #1]
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80072e8:	461a      	mov	r2, r3
 80072ea:	f001 fa33 	bl	8008754 <aci_hal_end_of_radio_activity_event>
                                      rp0->Next_State,
                                      rp0->Next_State_SysTime);

  return status;
 80072ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3710      	adds	r7, #16
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <aci_hal_scan_req_report_event_process>:
 *        peer device
 * @retval None
 */

tBleStatus aci_hal_scan_req_report_event_process(uint8_t *buffer_in)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b084      	sub	sp, #16
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007300:	2300      	movs	r3, #0
 8007302:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_scan_req_report_event_rp0 *rp0 = (aci_hal_scan_req_report_event_rp0 *)buffer_in;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	60bb      	str	r3, [r7, #8]
  aci_hal_scan_req_report_event(rp0->RSSI,
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	f993 0000 	ldrsb.w	r0, [r3]
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	7859      	ldrb	r1, [r3, #1]
                                rp0->Peer_Address_Type,
                                rp0->Peer_Address);
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	3302      	adds	r3, #2
  aci_hal_scan_req_report_event(rp0->RSSI,
 8007316:	461a      	mov	r2, r3
 8007318:	f001 fa2e 	bl	8008778 <aci_hal_scan_req_report_event>

  return status;
 800731c:	7bfb      	ldrb	r3, [r7, #15]
}
 800731e:	4618      	mov	r0, r3
 8007320:	3710      	adds	r7, #16
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}

08007326 <aci_hal_fw_error_event_process>:
 *        the connection handle where the abnormal condition has occurred.
 * @retval None
 */

tBleStatus aci_hal_fw_error_event_process(uint8_t *buffer_in)
{
 8007326:	b580      	push	{r7, lr}
 8007328:	b084      	sub	sp, #16
 800732a:	af00      	add	r7, sp, #0
 800732c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800732e:	2300      	movs	r3, #0
 8007330:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_fw_error_event_rp0 *rp0 = (aci_hal_fw_error_event_rp0 *)buffer_in;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	60bb      	str	r3, [r7, #8]
  aci_hal_fw_error_event(rp0->FW_Error_Type,
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	7818      	ldrb	r0, [r3, #0]
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	7859      	ldrb	r1, [r3, #1]
                         rp0->Data_Length,
                         rp0->Data);
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	3302      	adds	r3, #2
  aci_hal_fw_error_event(rp0->FW_Error_Type,
 8007342:	461a      	mov	r2, r3
 8007344:	f001 fa2a 	bl	800879c <aci_hal_fw_error_event>

  return status;
 8007348:	7bfb      	ldrb	r3, [r7, #15]
}
 800734a:	4618      	mov	r0, r3
 800734c:	3710      	adds	r7, #16
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}

08007352 <aci_gap_limited_discoverable_event_process>:
 *        discoverable mode ends due to timeout. The timeout is 180 seconds.
 * @retval None
 */

tBleStatus aci_gap_limited_discoverable_event_process(uint8_t *buffer_in)
{
 8007352:	b580      	push	{r7, lr}
 8007354:	b084      	sub	sp, #16
 8007356:	af00      	add	r7, sp, #0
 8007358:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800735a:	2300      	movs	r3, #0
 800735c:	73fb      	strb	r3, [r7, #15]
  aci_gap_limited_discoverable_event();
 800735e:	f000 ff77 	bl	8008250 <aci_gap_limited_discoverable_event>

  return status;
 8007362:	7bfb      	ldrb	r3, [r7, #15]
}
 8007364:	4618      	mov	r0, r3
 8007366:	3710      	adds	r7, #16
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}

0800736c <aci_gap_pairing_complete_event_process>:
 *        - 0x0C: SMP_SC_NUMCOMPARISON_FAILED
 * @retval None
 */

tBleStatus aci_gap_pairing_complete_event_process(uint8_t *buffer_in)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b084      	sub	sp, #16
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007374:	2300      	movs	r3, #0
 8007376:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_pairing_complete_event_rp0 *rp0 = (aci_gap_pairing_complete_event_rp0 *)buffer_in;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	60bb      	str	r3, [r7, #8]
  aci_gap_pairing_complete_event(rp0->Connection_Handle,
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	881b      	ldrh	r3, [r3, #0]
 8007380:	b298      	uxth	r0, r3
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	7899      	ldrb	r1, [r3, #2]
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	78db      	ldrb	r3, [r3, #3]
 800738a:	461a      	mov	r2, r3
 800738c:	f7f9 fffa 	bl	8001384 <aci_gap_pairing_complete_event>
                                 rp0->Status,
                                 rp0->Reason);

  return status;
 8007390:	7bfb      	ldrb	r3, [r7, #15]
}
 8007392:	4618      	mov	r0, r3
 8007394:	3710      	adds	r7, #16
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}

0800739a <aci_gap_pass_key_req_event_process>:
 *        requested.
 * @retval None
 */

tBleStatus aci_gap_pass_key_req_event_process(uint8_t *buffer_in)
{
 800739a:	b580      	push	{r7, lr}
 800739c:	b084      	sub	sp, #16
 800739e:	af00      	add	r7, sp, #0
 80073a0:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80073a2:	2300      	movs	r3, #0
 80073a4:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_pass_key_req_event_rp0 *rp0 = (aci_gap_pass_key_req_event_rp0 *)buffer_in;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	60bb      	str	r3, [r7, #8]
  aci_gap_pass_key_req_event(rp0->Connection_Handle);
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	881b      	ldrh	r3, [r3, #0]
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	4618      	mov	r0, r3
 80073b2:	f7f9 ffc1 	bl	8001338 <aci_gap_pass_key_req_event>

  return status;
 80073b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3710      	adds	r7, #16
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}

080073c0 <aci_gap_authorization_req_event_process>:
 *        requested.
 * @retval None
 */

tBleStatus aci_gap_authorization_req_event_process(uint8_t *buffer_in)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b084      	sub	sp, #16
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80073c8:	2300      	movs	r3, #0
 80073ca:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_authorization_req_event_rp0 *rp0 = (aci_gap_authorization_req_event_rp0 *)buffer_in;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	60bb      	str	r3, [r7, #8]
  aci_gap_authorization_req_event(rp0->Connection_Handle);
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	881b      	ldrh	r3, [r3, #0]
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	4618      	mov	r0, r3
 80073d8:	f000 ff44 	bl	8008264 <aci_gap_authorization_req_event>

  return status;
 80073dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3710      	adds	r7, #16
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}

080073e6 <aci_gap_slave_security_initiated_event_process>:
 *        successfully sent to the master.
 * @retval None
 */

tBleStatus aci_gap_slave_security_initiated_event_process(uint8_t *buffer_in)
{
 80073e6:	b580      	push	{r7, lr}
 80073e8:	b084      	sub	sp, #16
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80073ee:	2300      	movs	r3, #0
 80073f0:	73fb      	strb	r3, [r7, #15]
  aci_gap_slave_security_initiated_event();
 80073f2:	f000 ff45 	bl	8008280 <aci_gap_slave_security_initiated_event>

  return status;
 80073f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3710      	adds	r7, #16
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}

08007400 <aci_gap_bond_lost_event_process>:
 *        force_rebond set to 1.
 * @retval None
 */

tBleStatus aci_gap_bond_lost_event_process(uint8_t *buffer_in)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b084      	sub	sp, #16
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007408:	2300      	movs	r3, #0
 800740a:	73fb      	strb	r3, [r7, #15]
  aci_gap_bond_lost_event();
 800740c:	f000 ff42 	bl	8008294 <aci_gap_bond_lost_event>

  return status;
 8007410:	7bfb      	ldrb	r3, [r7, #15]
}
 8007412:	4618      	mov	r0, r3
 8007414:	3710      	adds	r7, #16
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}

0800741a <aci_gap_proc_complete_event_process>:
 *        of the peer device if the procedure completed successfully.
 * @retval None
 */

tBleStatus aci_gap_proc_complete_event_process(uint8_t *buffer_in)
{
 800741a:	b580      	push	{r7, lr}
 800741c:	b084      	sub	sp, #16
 800741e:	af00      	add	r7, sp, #0
 8007420:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007422:	2300      	movs	r3, #0
 8007424:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_proc_complete_event_rp0 *rp0 = (aci_gap_proc_complete_event_rp0 *)buffer_in;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	60bb      	str	r3, [r7, #8]
  aci_gap_proc_complete_event(rp0->Procedure_Code,
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	7818      	ldrb	r0, [r3, #0]
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	7859      	ldrb	r1, [r3, #1]
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	789a      	ldrb	r2, [r3, #2]
                              rp0->Status,
                              rp0->Data_Length,
                              rp0->Data);
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	3303      	adds	r3, #3
  aci_gap_proc_complete_event(rp0->Procedure_Code,
 800743a:	f000 ff35 	bl	80082a8 <aci_gap_proc_complete_event>

  return status;
 800743e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007440:	4618      	mov	r0, r3
 8007442:	3710      	adds	r7, #16
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <aci_gap_addr_not_resolved_event_process>:
 *        could not be resolved with any of the stored IRK's.
 * @retval None
 */

tBleStatus aci_gap_addr_not_resolved_event_process(uint8_t *buffer_in)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b084      	sub	sp, #16
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007450:	2300      	movs	r3, #0
 8007452:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_addr_not_resolved_event_rp0 *rp0 = (aci_gap_addr_not_resolved_event_rp0 *)buffer_in;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	60bb      	str	r3, [r7, #8]
  aci_gap_addr_not_resolved_event(rp0->Connection_Handle);
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	881b      	ldrh	r3, [r3, #0]
 800745c:	b29b      	uxth	r3, r3
 800745e:	4618      	mov	r0, r3
 8007460:	f000 ff36 	bl	80082d0 <aci_gap_addr_not_resolved_event>

  return status;
 8007464:	7bfb      	ldrb	r3, [r7, #15]
}
 8007466:	4618      	mov	r0, r3
 8007468:	3710      	adds	r7, #16
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}

0800746e <aci_gap_numeric_comparison_value_event_process>:
 * @param Numeric_Value
 * @retval None
 */

tBleStatus aci_gap_numeric_comparison_value_event_process(uint8_t *buffer_in)
{
 800746e:	b580      	push	{r7, lr}
 8007470:	b084      	sub	sp, #16
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007476:	2300      	movs	r3, #0
 8007478:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_numeric_comparison_value_event_rp0 *rp0 = (aci_gap_numeric_comparison_value_event_rp0 *)buffer_in;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	60bb      	str	r3, [r7, #8]
  aci_gap_numeric_comparison_value_event(rp0->Connection_Handle,
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	881b      	ldrh	r3, [r3, #0]
 8007482:	b29a      	uxth	r2, r3
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800748a:	4619      	mov	r1, r3
 800748c:	4610      	mov	r0, r2
 800748e:	f000 ff2d 	bl	80082ec <aci_gap_numeric_comparison_value_event>
                                         rp0->Numeric_Value);

  return status;
 8007492:	7bfb      	ldrb	r3, [r7, #15]
}
 8007494:	4618      	mov	r0, r3
 8007496:	3710      	adds	r7, #16
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <aci_gap_keypress_notification_event_process>:
 *        - 0x04: PASSKEY_ENTRY_COMPLETED
 * @retval None
 */

tBleStatus aci_gap_keypress_notification_event_process(uint8_t *buffer_in)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80074a4:	2300      	movs	r3, #0
 80074a6:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_keypress_notification_event_rp0 *rp0 = (aci_gap_keypress_notification_event_rp0 *)buffer_in;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	60bb      	str	r3, [r7, #8]
  aci_gap_keypress_notification_event(rp0->Connection_Handle,
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	881b      	ldrh	r3, [r3, #0]
 80074b0:	b29a      	uxth	r2, r3
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	789b      	ldrb	r3, [r3, #2]
 80074b6:	4619      	mov	r1, r3
 80074b8:	4610      	mov	r0, r2
 80074ba:	f000 ff27 	bl	800830c <aci_gap_keypress_notification_event>
                                      rp0->Notification_Type);

  return status;
 80074be:	7bfb      	ldrb	r3, [r7, #15]
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3710      	adds	r7, #16
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <aci_l2cap_connection_update_resp_event_process>:
 * @param Result
 * @retval None
 */

tBleStatus aci_l2cap_connection_update_resp_event_process(uint8_t *buffer_in)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b084      	sub	sp, #16
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80074d0:	2300      	movs	r3, #0
 80074d2:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_connection_update_resp_event_rp0 *rp0 = (aci_l2cap_connection_update_resp_event_rp0 *)buffer_in;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	60bb      	str	r3, [r7, #8]
  aci_l2cap_connection_update_resp_event(rp0->Connection_Handle,
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	881b      	ldrh	r3, [r3, #0]
 80074dc:	b29a      	uxth	r2, r3
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	885b      	ldrh	r3, [r3, #2]
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	4619      	mov	r1, r3
 80074e6:	4610      	mov	r0, r2
 80074e8:	f001 f8b0 	bl	800864c <aci_l2cap_connection_update_resp_event>
                                         rp0->Result);

  return status;
 80074ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3710      	adds	r7, #16
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}

080074f6 <aci_l2cap_proc_timeout_event_process>:
 * @param Data
 * @retval None
 */

tBleStatus aci_l2cap_proc_timeout_event_process(uint8_t *buffer_in)
{
 80074f6:	b580      	push	{r7, lr}
 80074f8:	b084      	sub	sp, #16
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80074fe:	2300      	movs	r3, #0
 8007500:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_proc_timeout_event_rp0 *rp0 = (aci_l2cap_proc_timeout_event_rp0 *)buffer_in;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	60bb      	str	r3, [r7, #8]
  aci_l2cap_proc_timeout_event(rp0->Connection_Handle,
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	881b      	ldrh	r3, [r3, #0]
 800750a:	b298      	uxth	r0, r3
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	7899      	ldrb	r1, [r3, #2]
                               rp0->Data_Length,
                               rp0->Data);
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	3303      	adds	r3, #3
  aci_l2cap_proc_timeout_event(rp0->Connection_Handle,
 8007514:	461a      	mov	r2, r3
 8007516:	f001 f8ab 	bl	8008670 <aci_l2cap_proc_timeout_event>

  return status;
 800751a:	7bfb      	ldrb	r3, [r7, #15]
}
 800751c:	4618      	mov	r0, r3
 800751e:	3710      	adds	r7, #16
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}

08007524 <aci_l2cap_connection_update_req_event_process>:
 *        - 10 (100 ms)  ... 3200 (32000 ms) 
 * @retval None
 */

tBleStatus aci_l2cap_connection_update_req_event_process(uint8_t *buffer_in)
{
 8007524:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007526:	b089      	sub	sp, #36	@ 0x24
 8007528:	af04      	add	r7, sp, #16
 800752a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800752c:	2300      	movs	r3, #0
 800752e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_connection_update_req_event_rp0 *rp0 = (aci_l2cap_connection_update_req_event_rp0 *)buffer_in;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	60bb      	str	r3, [r7, #8]
  aci_l2cap_connection_update_req_event(rp0->Connection_Handle,
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	881b      	ldrh	r3, [r3, #0]
 8007538:	b298      	uxth	r0, r3
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	789c      	ldrb	r4, [r3, #2]
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8007544:	b29d      	uxth	r5, r3
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800754c:	b29e      	uxth	r6, r3
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8007554:	b29b      	uxth	r3, r3
 8007556:	68ba      	ldr	r2, [r7, #8]
 8007558:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 800755c:	b292      	uxth	r2, r2
 800755e:	68b9      	ldr	r1, [r7, #8]
 8007560:	f8b1 100b 	ldrh.w	r1, [r1, #11]
 8007564:	b289      	uxth	r1, r1
 8007566:	9102      	str	r1, [sp, #8]
 8007568:	9201      	str	r2, [sp, #4]
 800756a:	9300      	str	r3, [sp, #0]
 800756c:	4633      	mov	r3, r6
 800756e:	462a      	mov	r2, r5
 8007570:	4621      	mov	r1, r4
 8007572:	f001 f88f 	bl	8008694 <aci_l2cap_connection_update_req_event>
                                        rp0->Interval_Min,
                                        rp0->Interval_Max,
                                        rp0->Slave_Latency,
                                        rp0->Timeout_Multiplier);

  return status;
 8007576:	7bfb      	ldrb	r3, [r7, #15]
}
 8007578:	4618      	mov	r0, r3
 800757a:	3714      	adds	r7, #20
 800757c:	46bd      	mov	sp, r7
 800757e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007580 <aci_l2cap_command_reject_event_process>:
 * @param Data Data field associated with Reason
 * @retval None
 */

tBleStatus aci_l2cap_command_reject_event_process(uint8_t *buffer_in)
{
 8007580:	b590      	push	{r4, r7, lr}
 8007582:	b087      	sub	sp, #28
 8007584:	af02      	add	r7, sp, #8
 8007586:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007588:	2300      	movs	r3, #0
 800758a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_command_reject_event_rp0 *rp0 = (aci_l2cap_command_reject_event_rp0 *)buffer_in;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	60bb      	str	r3, [r7, #8]
  aci_l2cap_command_reject_event(rp0->Connection_Handle,
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	881b      	ldrh	r3, [r3, #0]
 8007594:	b298      	uxth	r0, r3
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	7899      	ldrb	r1, [r3, #2]
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80075a0:	b29a      	uxth	r2, r3
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	795c      	ldrb	r4, [r3, #5]
                                 rp0->Identifier,
                                 rp0->Reason,
                                 rp0->Data_Length,
                                 rp0->Data);
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	3306      	adds	r3, #6
  aci_l2cap_command_reject_event(rp0->Connection_Handle,
 80075aa:	9300      	str	r3, [sp, #0]
 80075ac:	4623      	mov	r3, r4
 80075ae:	f001 f889 	bl	80086c4 <aci_l2cap_command_reject_event>

  return status;
 80075b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3714      	adds	r7, #20
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd90      	pop	{r4, r7, pc}

080075bc <aci_gatt_attribute_modified_event_process>:
 * @param Attr_Data The modified value
 * @retval None
 */

tBleStatus aci_gatt_attribute_modified_event_process(uint8_t *buffer_in)
{
 80075bc:	b590      	push	{r4, r7, lr}
 80075be:	b087      	sub	sp, #28
 80075c0:	af02      	add	r7, sp, #8
 80075c2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80075c4:	2300      	movs	r3, #0
 80075c6:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_attribute_modified_event_rp0 *rp0 = (aci_gatt_attribute_modified_event_rp0 *)buffer_in;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	60bb      	str	r3, [r7, #8]
  aci_gatt_attribute_modified_event(rp0->Connection_Handle,
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	881b      	ldrh	r3, [r3, #0]
 80075d0:	b298      	uxth	r0, r3
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	885b      	ldrh	r3, [r3, #2]
 80075d6:	b299      	uxth	r1, r3
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	889b      	ldrh	r3, [r3, #4]
 80075dc:	b29a      	uxth	r2, r3
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	88db      	ldrh	r3, [r3, #6]
 80075e2:	b29c      	uxth	r4, r3
                                    rp0->Attr_Handle,
                                    rp0->Offset,
                                    rp0->Attr_Data_Length,
                                    rp0->Attr_Data);
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	3308      	adds	r3, #8
  aci_gatt_attribute_modified_event(rp0->Connection_Handle,
 80075e8:	9300      	str	r3, [sp, #0]
 80075ea:	4623      	mov	r3, r4
 80075ec:	f7f9 fe7e 	bl	80012ec <aci_gatt_attribute_modified_event>

  return status;
 80075f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3714      	adds	r7, #20
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd90      	pop	{r4, r7, pc}

080075fa <aci_gatt_proc_timeout_event_process>:
 *        timed out
 * @retval None
 */

tBleStatus aci_gatt_proc_timeout_event_process(uint8_t *buffer_in)
{
 80075fa:	b580      	push	{r7, lr}
 80075fc:	b084      	sub	sp, #16
 80075fe:	af00      	add	r7, sp, #0
 8007600:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007602:	2300      	movs	r3, #0
 8007604:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_proc_timeout_event_rp0 *rp0 = (aci_gatt_proc_timeout_event_rp0 *)buffer_in;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	60bb      	str	r3, [r7, #8]
  aci_gatt_proc_timeout_event(rp0->Connection_Handle);
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	881b      	ldrh	r3, [r3, #0]
 800760e:	b29b      	uxth	r3, r3
 8007610:	4618      	mov	r0, r3
 8007612:	f000 fe8d 	bl	8008330 <aci_gatt_proc_timeout_event>

  return status;
 8007616:	7bfb      	ldrb	r3, [r7, #15]
}
 8007618:	4618      	mov	r0, r3
 800761a:	3710      	adds	r7, #16
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}

08007620 <aci_att_exchange_mtu_resp_event_process>:
 * @param Server_RX_MTU ATT_MTU value agreed between server and client
 * @retval None
 */

tBleStatus aci_att_exchange_mtu_resp_event_process(uint8_t *buffer_in)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b084      	sub	sp, #16
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007628:	2300      	movs	r3, #0
 800762a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_exchange_mtu_resp_event_rp0 *rp0 = (aci_att_exchange_mtu_resp_event_rp0 *)buffer_in;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	60bb      	str	r3, [r7, #8]
  aci_att_exchange_mtu_resp_event(rp0->Connection_Handle,
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	881b      	ldrh	r3, [r3, #0]
 8007634:	b29a      	uxth	r2, r3
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	885b      	ldrh	r3, [r3, #2]
 800763a:	b29b      	uxth	r3, r3
 800763c:	4619      	mov	r1, r3
 800763e:	4610      	mov	r0, r2
 8007640:	f000 fe84 	bl	800834c <aci_att_exchange_mtu_resp_event>
                                  rp0->Server_RX_MTU);

  return status;
 8007644:	7bfb      	ldrb	r3, [r7, #15]
}
 8007646:	4618      	mov	r0, r3
 8007648:	3710      	adds	r7, #16
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}

0800764e <aci_att_find_info_resp_event_process>:
 *        pair is:[2 octets for handle, 16 octets for UUIDs]
 * @retval None
 */

tBleStatus aci_att_find_info_resp_event_process(uint8_t *buffer_in)
{
 800764e:	b580      	push	{r7, lr}
 8007650:	b084      	sub	sp, #16
 8007652:	af00      	add	r7, sp, #0
 8007654:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007656:	2300      	movs	r3, #0
 8007658:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_find_info_resp_event_rp0 *rp0 = (aci_att_find_info_resp_event_rp0 *)buffer_in;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	60bb      	str	r3, [r7, #8]
  aci_att_find_info_resp_event(rp0->Connection_Handle,
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	881b      	ldrh	r3, [r3, #0]
 8007662:	b298      	uxth	r0, r3
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	7899      	ldrb	r1, [r3, #2]
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	78da      	ldrb	r2, [r3, #3]
                               rp0->Format,
                               rp0->Event_Data_Length,
                               rp0->Handle_UUID_Pair);
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	3304      	adds	r3, #4
  aci_att_find_info_resp_event(rp0->Connection_Handle,
 8007670:	f000 fe7e 	bl	8008370 <aci_att_find_info_resp_event>

  return status;
 8007674:	7bfb      	ldrb	r3, [r7, #15]
}
 8007676:	4618      	mov	r0, r3
 8007678:	3710      	adds	r7, #16
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}

0800767e <aci_att_find_by_type_value_resp_event_process>:
 * @param Attribute_Group_Handle_Pair See @ref Attribute_Group_Handle_Pair_t
 * @retval None
 */

tBleStatus aci_att_find_by_type_value_resp_event_process(uint8_t *buffer_in)
{
 800767e:	b580      	push	{r7, lr}
 8007680:	b0a6      	sub	sp, #152	@ 0x98
 8007682:	af00      	add	r7, sp, #0
 8007684:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007686:	2300      	movs	r3, #0
 8007688:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  /* Input params */
  aci_att_find_by_type_value_resp_event_rp0 *rp0 = (aci_att_find_by_type_value_resp_event_rp0 *)buffer_in;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint8_t size = 3;
 8007692:	2303      	movs	r3, #3
 8007694:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  int i;
  Attribute_Group_Handle_Pair_t Attribute_Group_Handle_Pair[HCI_MAX_PAYLOAD_SIZE/sizeof(Attribute_Group_Handle_Pair_t)];
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 8007698:	2300      	movs	r3, #0
 800769a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800769e:	e02e      	b.n	80076fe <aci_att_find_by_type_value_resp_event_process+0x80>
    Attribute_Group_Handle_Pair[i].Found_Attribute_Handle = rp0->Attribute_Group_Handle_Pair[i].Found_Attribute_Handle;
 80076a0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80076a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80076a8:	009b      	lsls	r3, r3, #2
 80076aa:	4413      	add	r3, r2
 80076ac:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80076b0:	b29a      	uxth	r2, r3
 80076b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80076b6:	009b      	lsls	r3, r3, #2
 80076b8:	3398      	adds	r3, #152	@ 0x98
 80076ba:	443b      	add	r3, r7
 80076bc:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 80076c0:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80076c4:	3302      	adds	r3, #2
 80076c6:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    Attribute_Group_Handle_Pair[i].Group_End_Handle = rp0->Attribute_Group_Handle_Pair[i].Group_End_Handle;
 80076ca:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80076ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80076d2:	009b      	lsls	r3, r3, #2
 80076d4:	4413      	add	r3, r2
 80076d6:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80076da:	b29a      	uxth	r2, r3
 80076dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80076e0:	009b      	lsls	r3, r3, #2
 80076e2:	3398      	adds	r3, #152	@ 0x98
 80076e4:	443b      	add	r3, r7
 80076e6:	f823 2c8e 	strh.w	r2, [r3, #-142]
    size += 2;
 80076ea:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80076ee:	3302      	adds	r3, #2
 80076f0:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 80076f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80076f8:	3301      	adds	r3, #1
 80076fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80076fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007702:	789b      	ldrb	r3, [r3, #2]
 8007704:	461a      	mov	r2, r3
 8007706:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800770a:	4293      	cmp	r3, r2
 800770c:	dbc8      	blt.n	80076a0 <aci_att_find_by_type_value_resp_event_process+0x22>
  }
  aci_att_find_by_type_value_resp_event(rp0->Connection_Handle,
 800770e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007712:	881b      	ldrh	r3, [r3, #0]
 8007714:	b298      	uxth	r0, r3
 8007716:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800771a:	789b      	ldrb	r3, [r3, #2]
 800771c:	f107 0208 	add.w	r2, r7, #8
 8007720:	4619      	mov	r1, r3
 8007722:	f000 fe39 	bl	8008398 <aci_att_find_by_type_value_resp_event>
                                        rp0->Num_of_Handle_Pair,
                                        Attribute_Group_Handle_Pair);

  return status;
 8007726:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 800772a:	4618      	mov	r0, r3
 800772c:	3798      	adds	r7, #152	@ 0x98
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}

08007732 <aci_att_read_by_type_resp_event_process>:
 *        Value]
 * @retval None
 */

tBleStatus aci_att_read_by_type_resp_event_process(uint8_t *buffer_in)
{
 8007732:	b580      	push	{r7, lr}
 8007734:	b084      	sub	sp, #16
 8007736:	af00      	add	r7, sp, #0
 8007738:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800773a:	2300      	movs	r3, #0
 800773c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_by_type_resp_event_rp0 *rp0 = (aci_att_read_by_type_resp_event_rp0 *)buffer_in;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	60bb      	str	r3, [r7, #8]
  aci_att_read_by_type_resp_event(rp0->Connection_Handle,
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	881b      	ldrh	r3, [r3, #0]
 8007746:	b298      	uxth	r0, r3
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	7899      	ldrb	r1, [r3, #2]
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	78da      	ldrb	r2, [r3, #3]
                                  rp0->Handle_Value_Pair_Length,
                                  rp0->Data_Length,
                                  rp0->Handle_Value_Pair_Data);
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	3304      	adds	r3, #4
  aci_att_read_by_type_resp_event(rp0->Connection_Handle,
 8007754:	f000 fe32 	bl	80083bc <aci_att_read_by_type_resp_event>

  return status;
 8007758:	7bfb      	ldrb	r3, [r7, #15]
}
 800775a:	4618      	mov	r0, r3
 800775c:	3710      	adds	r7, #16
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}

08007762 <aci_att_read_resp_event_process>:
 * @param Attribute_Value The value of the attribute.
 * @retval None
 */

tBleStatus aci_att_read_resp_event_process(uint8_t *buffer_in)
{
 8007762:	b580      	push	{r7, lr}
 8007764:	b084      	sub	sp, #16
 8007766:	af00      	add	r7, sp, #0
 8007768:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800776a:	2300      	movs	r3, #0
 800776c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_resp_event_rp0 *rp0 = (aci_att_read_resp_event_rp0 *)buffer_in;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	60bb      	str	r3, [r7, #8]
  aci_att_read_resp_event(rp0->Connection_Handle,
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	881b      	ldrh	r3, [r3, #0]
 8007776:	b298      	uxth	r0, r3
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	7899      	ldrb	r1, [r3, #2]
                          rp0->Event_Data_Length,
                          rp0->Attribute_Value);
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	3303      	adds	r3, #3
  aci_att_read_resp_event(rp0->Connection_Handle,
 8007780:	461a      	mov	r2, r3
 8007782:	f000 fe2f 	bl	80083e4 <aci_att_read_resp_event>

  return status;
 8007786:	7bfb      	ldrb	r3, [r7, #15]
}
 8007788:	4618      	mov	r0, r3
 800778a:	3710      	adds	r7, #16
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <aci_att_read_blob_resp_event_process>:
 * @param Attribute_Value Part of the attribute value.
 * @retval None
 */

tBleStatus aci_att_read_blob_resp_event_process(uint8_t *buffer_in)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b084      	sub	sp, #16
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007798:	2300      	movs	r3, #0
 800779a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_blob_resp_event_rp0 *rp0 = (aci_att_read_blob_resp_event_rp0 *)buffer_in;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	60bb      	str	r3, [r7, #8]
  aci_att_read_blob_resp_event(rp0->Connection_Handle,
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	881b      	ldrh	r3, [r3, #0]
 80077a4:	b298      	uxth	r0, r3
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	7899      	ldrb	r1, [r3, #2]
                               rp0->Event_Data_Length,
                               rp0->Attribute_Value);
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	3303      	adds	r3, #3
  aci_att_read_blob_resp_event(rp0->Connection_Handle,
 80077ae:	461a      	mov	r2, r3
 80077b0:	f000 fe2a 	bl	8008408 <aci_att_read_blob_resp_event>

  return status;
 80077b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3710      	adds	r7, #16
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}

080077be <aci_att_read_multiple_resp_event_process>:
 *        the order that they were requested.
 * @retval None
 */

tBleStatus aci_att_read_multiple_resp_event_process(uint8_t *buffer_in)
{
 80077be:	b580      	push	{r7, lr}
 80077c0:	b084      	sub	sp, #16
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80077c6:	2300      	movs	r3, #0
 80077c8:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_multiple_resp_event_rp0 *rp0 = (aci_att_read_multiple_resp_event_rp0 *)buffer_in;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	60bb      	str	r3, [r7, #8]
  aci_att_read_multiple_resp_event(rp0->Connection_Handle,
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	881b      	ldrh	r3, [r3, #0]
 80077d2:	b298      	uxth	r0, r3
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	7899      	ldrb	r1, [r3, #2]
                                   rp0->Event_Data_Length,
                                   rp0->Set_Of_Values);
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	3303      	adds	r3, #3
  aci_att_read_multiple_resp_event(rp0->Connection_Handle,
 80077dc:	461a      	mov	r2, r3
 80077de:	f000 fe25 	bl	800842c <aci_att_read_multiple_resp_event>

  return status;
 80077e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3710      	adds	r7, #16
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}

080077ec <aci_att_read_by_group_type_resp_event_process>:
 *        Handle, (Attribute_Data_Length - 4 octets) for Attribute Value]
 * @retval None
 */

tBleStatus aci_att_read_by_group_type_resp_event_process(uint8_t *buffer_in)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b084      	sub	sp, #16
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80077f4:	2300      	movs	r3, #0
 80077f6:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_by_group_type_resp_event_rp0 *rp0 = (aci_att_read_by_group_type_resp_event_rp0 *)buffer_in;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	60bb      	str	r3, [r7, #8]
  aci_att_read_by_group_type_resp_event(rp0->Connection_Handle,
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	881b      	ldrh	r3, [r3, #0]
 8007800:	b298      	uxth	r0, r3
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	7899      	ldrb	r1, [r3, #2]
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	78da      	ldrb	r2, [r3, #3]
                                        rp0->Attribute_Data_Length,
                                        rp0->Data_Length,
                                        rp0->Attribute_Data_List);
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	3304      	adds	r3, #4
  aci_att_read_by_group_type_resp_event(rp0->Connection_Handle,
 800780e:	f000 fe1f 	bl	8008450 <aci_att_read_by_group_type_resp_event>

  return status;
 8007812:	7bfb      	ldrb	r3, [r7, #15]
}
 8007814:	4618      	mov	r0, r3
 8007816:	3710      	adds	r7, #16
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}

0800781c <aci_att_prepare_write_resp_event_process>:
 * @param Part_Attribute_Value The value of the attribute to be written
 * @retval None
 */

tBleStatus aci_att_prepare_write_resp_event_process(uint8_t *buffer_in)
{
 800781c:	b590      	push	{r4, r7, lr}
 800781e:	b087      	sub	sp, #28
 8007820:	af02      	add	r7, sp, #8
 8007822:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007824:	2300      	movs	r3, #0
 8007826:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_prepare_write_resp_event_rp0 *rp0 = (aci_att_prepare_write_resp_event_rp0 *)buffer_in;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	60bb      	str	r3, [r7, #8]
  aci_att_prepare_write_resp_event(rp0->Connection_Handle,
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	881b      	ldrh	r3, [r3, #0]
 8007830:	b298      	uxth	r0, r3
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	885b      	ldrh	r3, [r3, #2]
 8007836:	b299      	uxth	r1, r3
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	889b      	ldrh	r3, [r3, #4]
 800783c:	b29a      	uxth	r2, r3
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	799c      	ldrb	r4, [r3, #6]
                                   rp0->Attribute_Handle,
                                   rp0->Offset,
                                   rp0->Part_Attribute_Value_Length,
                                   rp0->Part_Attribute_Value);
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	3307      	adds	r3, #7
  aci_att_prepare_write_resp_event(rp0->Connection_Handle,
 8007846:	9300      	str	r3, [sp, #0]
 8007848:	4623      	mov	r3, r4
 800784a:	f000 fe15 	bl	8008478 <aci_att_prepare_write_resp_event>

  return status;
 800784e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007850:	4618      	mov	r0, r3
 8007852:	3714      	adds	r7, #20
 8007854:	46bd      	mov	sp, r7
 8007856:	bd90      	pop	{r4, r7, pc}

08007858 <aci_att_exec_write_resp_event_process>:
 * @param Connection_Handle Connection handle related to the response
 * @retval None
 */

tBleStatus aci_att_exec_write_resp_event_process(uint8_t *buffer_in)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b084      	sub	sp, #16
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007860:	2300      	movs	r3, #0
 8007862:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_exec_write_resp_event_rp0 *rp0 = (aci_att_exec_write_resp_event_rp0 *)buffer_in;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	60bb      	str	r3, [r7, #8]
  aci_att_exec_write_resp_event(rp0->Connection_Handle);
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	881b      	ldrh	r3, [r3, #0]
 800786c:	b29b      	uxth	r3, r3
 800786e:	4618      	mov	r0, r3
 8007870:	f000 fe1a 	bl	80084a8 <aci_att_exec_write_resp_event>

  return status;
 8007874:	7bfb      	ldrb	r3, [r7, #15]
}
 8007876:	4618      	mov	r0, r3
 8007878:	3710      	adds	r7, #16
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}

0800787e <aci_gatt_indication_event_process>:
 * @param Attribute_Value The current value of the attribute
 * @retval None
 */

tBleStatus aci_gatt_indication_event_process(uint8_t *buffer_in)
{
 800787e:	b580      	push	{r7, lr}
 8007880:	b084      	sub	sp, #16
 8007882:	af00      	add	r7, sp, #0
 8007884:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007886:	2300      	movs	r3, #0
 8007888:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_indication_event_rp0 *rp0 = (aci_gatt_indication_event_rp0 *)buffer_in;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	60bb      	str	r3, [r7, #8]
  aci_gatt_indication_event(rp0->Connection_Handle,
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	881b      	ldrh	r3, [r3, #0]
 8007892:	b298      	uxth	r0, r3
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	885b      	ldrh	r3, [r3, #2]
 8007898:	b299      	uxth	r1, r3
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	791a      	ldrb	r2, [r3, #4]
                            rp0->Attribute_Handle,
                            rp0->Attribute_Value_Length,
                            rp0->Attribute_Value);
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	3305      	adds	r3, #5
  aci_gatt_indication_event(rp0->Connection_Handle,
 80078a2:	f000 fe0f 	bl	80084c4 <aci_gatt_indication_event>

  return status;
 80078a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3710      	adds	r7, #16
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}

080078b0 <aci_gatt_notification_event_process>:
 * @param Attribute_Value The current value of the attribute
 * @retval None
 */

tBleStatus aci_gatt_notification_event_process(uint8_t *buffer_in)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b084      	sub	sp, #16
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80078b8:	2300      	movs	r3, #0
 80078ba:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_notification_event_rp0 *rp0 = (aci_gatt_notification_event_rp0 *)buffer_in;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	60bb      	str	r3, [r7, #8]
  aci_gatt_notification_event(rp0->Connection_Handle,
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	881b      	ldrh	r3, [r3, #0]
 80078c4:	b298      	uxth	r0, r3
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	885b      	ldrh	r3, [r3, #2]
 80078ca:	b299      	uxth	r1, r3
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	791a      	ldrb	r2, [r3, #4]
                              rp0->Attribute_Handle,
                              rp0->Attribute_Value_Length,
                              rp0->Attribute_Value);
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	3305      	adds	r3, #5
  aci_gatt_notification_event(rp0->Connection_Handle,
 80078d4:	f000 fe0a 	bl	80084ec <aci_gatt_notification_event>

  return status;
 80078d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3710      	adds	r7, #16
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}

080078e2 <aci_gatt_proc_complete_event_process>:
 *        was successful.
 * @retval None
 */

tBleStatus aci_gatt_proc_complete_event_process(uint8_t *buffer_in)
{
 80078e2:	b580      	push	{r7, lr}
 80078e4:	b084      	sub	sp, #16
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80078ea:	2300      	movs	r3, #0
 80078ec:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_proc_complete_event_rp0 *rp0 = (aci_gatt_proc_complete_event_rp0 *)buffer_in;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	60bb      	str	r3, [r7, #8]
  aci_gatt_proc_complete_event(rp0->Connection_Handle,
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	881b      	ldrh	r3, [r3, #0]
 80078f6:	b29a      	uxth	r2, r3
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	789b      	ldrb	r3, [r3, #2]
 80078fc:	4619      	mov	r1, r3
 80078fe:	4610      	mov	r0, r2
 8007900:	f000 fe08 	bl	8008514 <aci_gatt_proc_complete_event>
                               rp0->Error_Code);

  return status;
 8007904:	7bfb      	ldrb	r3, [r7, #15]
}
 8007906:	4618      	mov	r0, r3
 8007908:	3710      	adds	r7, #16
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}

0800790e <aci_gatt_error_resp_event_process>:
 *        - 0x11: Insufficient resources
 * @retval None
 */

tBleStatus aci_gatt_error_resp_event_process(uint8_t *buffer_in)
{
 800790e:	b580      	push	{r7, lr}
 8007910:	b084      	sub	sp, #16
 8007912:	af00      	add	r7, sp, #0
 8007914:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007916:	2300      	movs	r3, #0
 8007918:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_error_resp_event_rp0 *rp0 = (aci_gatt_error_resp_event_rp0 *)buffer_in;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	60bb      	str	r3, [r7, #8]
  aci_gatt_error_resp_event(rp0->Connection_Handle,
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	881b      	ldrh	r3, [r3, #0]
 8007922:	b298      	uxth	r0, r3
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	7899      	ldrb	r1, [r3, #2]
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800792e:	b29a      	uxth	r2, r3
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	795b      	ldrb	r3, [r3, #5]
 8007934:	f000 fe00 	bl	8008538 <aci_gatt_error_resp_event>
                            rp0->Req_Opcode,
                            rp0->Attribute_Handle,
                            rp0->Error_Code);

  return status;
 8007938:	7bfb      	ldrb	r3, [r7, #15]
}
 800793a:	4618      	mov	r0, r3
 800793c:	3710      	adds	r7, #16
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}

08007942 <aci_gatt_disc_read_char_by_uuid_resp_event_process>:
 *        been performed.
 * @retval None
 */

tBleStatus aci_gatt_disc_read_char_by_uuid_resp_event_process(uint8_t *buffer_in)
{
 8007942:	b580      	push	{r7, lr}
 8007944:	b084      	sub	sp, #16
 8007946:	af00      	add	r7, sp, #0
 8007948:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800794a:	2300      	movs	r3, #0
 800794c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_disc_read_char_by_uuid_resp_event_rp0 *rp0 = (aci_gatt_disc_read_char_by_uuid_resp_event_rp0 *)buffer_in;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	60bb      	str	r3, [r7, #8]
  aci_gatt_disc_read_char_by_uuid_resp_event(rp0->Connection_Handle,
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	881b      	ldrh	r3, [r3, #0]
 8007956:	b298      	uxth	r0, r3
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	885b      	ldrh	r3, [r3, #2]
 800795c:	b299      	uxth	r1, r3
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	791a      	ldrb	r2, [r3, #4]
                                             rp0->Attribute_Handle,
                                             rp0->Attribute_Value_Length,
                                             rp0->Attribute_Value);
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	3305      	adds	r3, #5
  aci_gatt_disc_read_char_by_uuid_resp_event(rp0->Connection_Handle,
 8007966:	f000 fdff 	bl	8008568 <aci_gatt_disc_read_char_by_uuid_resp_event>

  return status;
 800796a:	7bfb      	ldrb	r3, [r7, #15]
}
 800796c:	4618      	mov	r0, r3
 800796e:	3710      	adds	r7, #16
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}

08007974 <aci_gatt_write_permit_req_event_process>:
 * @param Data The data that the client has requested to write
 * @retval None
 */

tBleStatus aci_gatt_write_permit_req_event_process(uint8_t *buffer_in)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b084      	sub	sp, #16
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800797c:	2300      	movs	r3, #0
 800797e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_write_permit_req_event_rp0 *rp0 = (aci_gatt_write_permit_req_event_rp0 *)buffer_in;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	60bb      	str	r3, [r7, #8]
  aci_gatt_write_permit_req_event(rp0->Connection_Handle,
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	881b      	ldrh	r3, [r3, #0]
 8007988:	b298      	uxth	r0, r3
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	885b      	ldrh	r3, [r3, #2]
 800798e:	b299      	uxth	r1, r3
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	791a      	ldrb	r2, [r3, #4]
                                  rp0->Attribute_Handle,
                                  rp0->Data_Length,
                                  rp0->Data);
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	3305      	adds	r3, #5
  aci_gatt_write_permit_req_event(rp0->Connection_Handle,
 8007998:	f000 fdfa 	bl	8008590 <aci_gatt_write_permit_req_event>

  return status;
 800799c:	7bfb      	ldrb	r3, [r7, #15]
}
 800799e:	4618      	mov	r0, r3
 80079a0:	3710      	adds	r7, #16
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}

080079a6 <aci_gatt_read_permit_req_event_process>:
 * @param Offset Contains the offset from which the read has been requested
 * @retval None
 */

tBleStatus aci_gatt_read_permit_req_event_process(uint8_t *buffer_in)
{
 80079a6:	b580      	push	{r7, lr}
 80079a8:	b084      	sub	sp, #16
 80079aa:	af00      	add	r7, sp, #0
 80079ac:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80079ae:	2300      	movs	r3, #0
 80079b0:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_read_permit_req_event_rp0 *rp0 = (aci_gatt_read_permit_req_event_rp0 *)buffer_in;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	60bb      	str	r3, [r7, #8]
  aci_gatt_read_permit_req_event(rp0->Connection_Handle,
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	881b      	ldrh	r3, [r3, #0]
 80079ba:	b298      	uxth	r0, r3
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	885b      	ldrh	r3, [r3, #2]
 80079c0:	b299      	uxth	r1, r3
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	889b      	ldrh	r3, [r3, #4]
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	461a      	mov	r2, r3
 80079ca:	f7f9 fc7d 	bl	80012c8 <aci_gatt_read_permit_req_event>
                                 rp0->Attribute_Handle,
                                 rp0->Offset);

  return status;
 80079ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	3710      	adds	r7, #16
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}

080079d8 <aci_gatt_read_multi_permit_req_event_process>:
 * @param Handle_Item See @ref Handle_Item_t
 * @retval None
 */

tBleStatus aci_gatt_read_multi_permit_req_event_process(uint8_t *buffer_in)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b0a6      	sub	sp, #152	@ 0x98
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80079e0:	2300      	movs	r3, #0
 80079e2:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  /* Input params */
  aci_gatt_read_multi_permit_req_event_rp0 *rp0 = (aci_gatt_read_multi_permit_req_event_rp0 *)buffer_in;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint8_t size = 3;
 80079ec:	2303      	movs	r3, #3
 80079ee:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  int i;
  Handle_Item_t Handle_Item[HCI_MAX_PAYLOAD_SIZE/sizeof(Handle_Item_t)];
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 80079f2:	2300      	movs	r3, #0
 80079f4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80079f8:	e019      	b.n	8007a2e <aci_gatt_read_multi_permit_req_event_process+0x56>
    Handle_Item[i].Handle = rp0->Handle_Item[i].Handle;
 80079fa:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80079fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007a02:	005b      	lsls	r3, r3, #1
 8007a04:	4413      	add	r3, r2
 8007a06:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8007a0a:	b29a      	uxth	r2, r3
 8007a0c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007a10:	005b      	lsls	r3, r3, #1
 8007a12:	3398      	adds	r3, #152	@ 0x98
 8007a14:	443b      	add	r3, r7
 8007a16:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 8007a1a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8007a1e:	3302      	adds	r3, #2
 8007a20:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8007a24:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007a28:	3301      	adds	r3, #1
 8007a2a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007a2e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007a32:	789b      	ldrb	r3, [r3, #2]
 8007a34:	461a      	mov	r2, r3
 8007a36:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	dbdd      	blt.n	80079fa <aci_gatt_read_multi_permit_req_event_process+0x22>
  }
  aci_gatt_read_multi_permit_req_event(rp0->Connection_Handle,
 8007a3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007a42:	881b      	ldrh	r3, [r3, #0]
 8007a44:	b298      	uxth	r0, r3
 8007a46:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007a4a:	789b      	ldrb	r3, [r3, #2]
 8007a4c:	f107 0208 	add.w	r2, r7, #8
 8007a50:	4619      	mov	r1, r3
 8007a52:	f000 fdb1 	bl	80085b8 <aci_gatt_read_multi_permit_req_event>
                                       rp0->Number_of_Handles,
                                       Handle_Item);

  return status;
 8007a56:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3798      	adds	r7, #152	@ 0x98
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}

08007a62 <aci_gatt_tx_pool_available_event_process>:
 * @param Available_Buffers Not used.
 * @retval None
 */

tBleStatus aci_gatt_tx_pool_available_event_process(uint8_t *buffer_in)
{
 8007a62:	b580      	push	{r7, lr}
 8007a64:	b084      	sub	sp, #16
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_tx_pool_available_event_rp0 *rp0 = (aci_gatt_tx_pool_available_event_rp0 *)buffer_in;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	60bb      	str	r3, [r7, #8]
  aci_gatt_tx_pool_available_event(rp0->Connection_Handle,
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	881b      	ldrh	r3, [r3, #0]
 8007a76:	b29a      	uxth	r2, r3
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	885b      	ldrh	r3, [r3, #2]
 8007a7c:	b29b      	uxth	r3, r3
 8007a7e:	4619      	mov	r1, r3
 8007a80:	4610      	mov	r0, r2
 8007a82:	f000 fdab 	bl	80085dc <aci_gatt_tx_pool_available_event>
                                   rp0->Available_Buffers);

  return status;
 8007a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3710      	adds	r7, #16
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}

08007a90 <aci_gatt_server_confirmation_event_process>:
 * @param Connection_Handle Connection handle related to the event
 * @retval None
 */

tBleStatus aci_gatt_server_confirmation_event_process(uint8_t *buffer_in)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b084      	sub	sp, #16
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_server_confirmation_event_rp0 *rp0 = (aci_gatt_server_confirmation_event_rp0 *)buffer_in;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	60bb      	str	r3, [r7, #8]
  aci_gatt_server_confirmation_event(rp0->Connection_Handle);
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	881b      	ldrh	r3, [r3, #0]
 8007aa4:	b29b      	uxth	r3, r3
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f000 fdaa 	bl	8008600 <aci_gatt_server_confirmation_event>

  return status;
 8007aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3710      	adds	r7, #16
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}

08007ab6 <aci_gatt_prepare_write_permit_req_event_process>:
 * @param Data The data that the client has requested to write
 * @retval None
 */

tBleStatus aci_gatt_prepare_write_permit_req_event_process(uint8_t *buffer_in)
{
 8007ab6:	b590      	push	{r4, r7, lr}
 8007ab8:	b087      	sub	sp, #28
 8007aba:	af02      	add	r7, sp, #8
 8007abc:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_prepare_write_permit_req_event_rp0 *rp0 = (aci_gatt_prepare_write_permit_req_event_rp0 *)buffer_in;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	60bb      	str	r3, [r7, #8]
  aci_gatt_prepare_write_permit_req_event(rp0->Connection_Handle,
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	881b      	ldrh	r3, [r3, #0]
 8007aca:	b298      	uxth	r0, r3
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	885b      	ldrh	r3, [r3, #2]
 8007ad0:	b299      	uxth	r1, r3
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	889b      	ldrh	r3, [r3, #4]
 8007ad6:	b29a      	uxth	r2, r3
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	799c      	ldrb	r4, [r3, #6]
                                          rp0->Attribute_Handle,
                                          rp0->Offset,
                                          rp0->Data_Length,
                                          rp0->Data);
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	3307      	adds	r3, #7
  aci_gatt_prepare_write_permit_req_event(rp0->Connection_Handle,
 8007ae0:	9300      	str	r3, [sp, #0]
 8007ae2:	4623      	mov	r3, r4
 8007ae4:	f000 fd9a 	bl	800861c <aci_gatt_prepare_write_permit_req_event>

  return status;
 8007ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3714      	adds	r7, #20
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd90      	pop	{r4, r7, pc}

08007af2 <hci_le_connection_complete_event_process>:
 *        - 0x07: 20 ppm
 * @retval None
 */

tBleStatus hci_le_connection_complete_event_process(uint8_t *buffer_in)
{
 8007af2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007af4:	b08b      	sub	sp, #44	@ 0x2c
 8007af6:	af06      	add	r7, sp, #24
 8007af8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007afa:	2300      	movs	r3, #0
 8007afc:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_connection_complete_event_rp0 *rp0 = (hci_le_connection_complete_event_rp0 *)buffer_in;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	60bb      	str	r3, [r7, #8]
  hci_le_connection_complete_event(rp0->Status,
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	781d      	ldrb	r5, [r3, #0]
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007b0c:	b29e      	uxth	r6, r3
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	f893 c003 	ldrb.w	ip, [r3, #3]
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	f893 e004 	ldrb.w	lr, [r3, #4]
                                   rp0->Connection_Handle,
                                   rp0->Role,
                                   rp0->Peer_Address_Type,
                                   rp0->Peer_Address,
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	3305      	adds	r3, #5
  hci_le_connection_complete_event(rp0->Status,
 8007b1e:	68ba      	ldr	r2, [r7, #8]
 8007b20:	f8b2 200b 	ldrh.w	r2, [r2, #11]
 8007b24:	b292      	uxth	r2, r2
 8007b26:	68b9      	ldr	r1, [r7, #8]
 8007b28:	f8b1 100d 	ldrh.w	r1, [r1, #13]
 8007b2c:	b289      	uxth	r1, r1
 8007b2e:	68b8      	ldr	r0, [r7, #8]
 8007b30:	f8b0 000f 	ldrh.w	r0, [r0, #15]
 8007b34:	b280      	uxth	r0, r0
 8007b36:	68bc      	ldr	r4, [r7, #8]
 8007b38:	7c64      	ldrb	r4, [r4, #17]
 8007b3a:	9404      	str	r4, [sp, #16]
 8007b3c:	9003      	str	r0, [sp, #12]
 8007b3e:	9102      	str	r1, [sp, #8]
 8007b40:	9201      	str	r2, [sp, #4]
 8007b42:	9300      	str	r3, [sp, #0]
 8007b44:	4673      	mov	r3, lr
 8007b46:	4662      	mov	r2, ip
 8007b48:	4631      	mov	r1, r6
 8007b4a:	4628      	mov	r0, r5
 8007b4c:	f7f9 fb2c 	bl	80011a8 <hci_le_connection_complete_event>
                                   rp0->Conn_Interval,
                                   rp0->Conn_Latency,
                                   rp0->Supervision_Timeout,
                                   rp0->Master_Clock_Accuracy);

  return status;
 8007b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3714      	adds	r7, #20
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007b5a <hci_le_advertising_report_event_process>:
 * @param Advertising_Report See @ref Advertising_Report_t
 * @retval None
 */

tBleStatus hci_le_advertising_report_event_process(uint8_t *buffer_in)
{
 8007b5a:	b580      	push	{r7, lr}
 8007b5c:	b0a4      	sub	sp, #144	@ 0x90
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007b62:	2300      	movs	r3, #0
 8007b64:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  /* Input params */
  hci_le_advertising_report_event_rp0 *rp0 = (hci_le_advertising_report_event_rp0 *)buffer_in;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  uint8_t size = 1;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  int i;
  Advertising_Report_t Advertising_Report[HCI_MAX_PAYLOAD_SIZE/sizeof(Advertising_Report_t)];
  for (i = 0; i < rp0->Num_Reports; i++) {
 8007b74:	2300      	movs	r3, #0
 8007b76:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007b7a:	e0b3      	b.n	8007ce4 <hci_le_advertising_report_event_process+0x18a>
    Advertising_Report[i].Event_Type = rp0->Advertising_Report[i].Event_Type;
 8007b7c:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8007b80:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8007b84:	4613      	mov	r3, r2
 8007b86:	009b      	lsls	r3, r3, #2
 8007b88:	4413      	add	r3, r2
 8007b8a:	005b      	lsls	r3, r3, #1
 8007b8c:	4413      	add	r3, r2
 8007b8e:	440b      	add	r3, r1
 8007b90:	3301      	adds	r3, #1
 8007b92:	7819      	ldrb	r1, [r3, #0]
 8007b94:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8007b98:	4613      	mov	r3, r2
 8007b9a:	009b      	lsls	r3, r3, #2
 8007b9c:	4413      	add	r3, r2
 8007b9e:	009b      	lsls	r3, r3, #2
 8007ba0:	3390      	adds	r3, #144	@ 0x90
 8007ba2:	443b      	add	r3, r7
 8007ba4:	3b88      	subs	r3, #136	@ 0x88
 8007ba6:	460a      	mov	r2, r1
 8007ba8:	701a      	strb	r2, [r3, #0]
    size += 1;
 8007baa:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8007bae:	3301      	adds	r3, #1
 8007bb0:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    Advertising_Report[i].Address_Type = rp0->Advertising_Report[i].Address_Type;
 8007bb4:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8007bb8:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8007bbc:	4613      	mov	r3, r2
 8007bbe:	009b      	lsls	r3, r3, #2
 8007bc0:	4413      	add	r3, r2
 8007bc2:	005b      	lsls	r3, r3, #1
 8007bc4:	4413      	add	r3, r2
 8007bc6:	440b      	add	r3, r1
 8007bc8:	3302      	adds	r3, #2
 8007bca:	7819      	ldrb	r1, [r3, #0]
 8007bcc:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8007bd0:	4613      	mov	r3, r2
 8007bd2:	009b      	lsls	r3, r3, #2
 8007bd4:	4413      	add	r3, r2
 8007bd6:	009b      	lsls	r3, r3, #2
 8007bd8:	3390      	adds	r3, #144	@ 0x90
 8007bda:	443b      	add	r3, r7
 8007bdc:	3b87      	subs	r3, #135	@ 0x87
 8007bde:	460a      	mov	r2, r1
 8007be0:	701a      	strb	r2, [r3, #0]
    size += 1;
 8007be2:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8007be6:	3301      	adds	r3, #1
 8007be8:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    BLUENRG_memcpy((void *) Advertising_Report[i].Address, (const void *) rp0->Advertising_Report[i].Address, 6);
 8007bec:	f107 0108 	add.w	r1, r7, #8
 8007bf0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8007bf4:	4613      	mov	r3, r2
 8007bf6:	009b      	lsls	r3, r3, #2
 8007bf8:	4413      	add	r3, r2
 8007bfa:	009b      	lsls	r3, r3, #2
 8007bfc:	440b      	add	r3, r1
 8007bfe:	1c98      	adds	r0, r3, #2
 8007c00:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8007c04:	4613      	mov	r3, r2
 8007c06:	009b      	lsls	r3, r3, #2
 8007c08:	4413      	add	r3, r2
 8007c0a:	005b      	lsls	r3, r3, #1
 8007c0c:	4413      	add	r3, r2
 8007c0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007c12:	4413      	add	r3, r2
 8007c14:	3303      	adds	r3, #3
 8007c16:	2206      	movs	r2, #6
 8007c18:	4619      	mov	r1, r3
 8007c1a:	f002 fd8a 	bl	800a732 <memcpy>
    size += 6;
 8007c1e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8007c22:	3306      	adds	r3, #6
 8007c24:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    Advertising_Report[i].Length_Data = rp0->Advertising_Report[i].Length_Data;
 8007c28:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8007c2c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8007c30:	4613      	mov	r3, r2
 8007c32:	009b      	lsls	r3, r3, #2
 8007c34:	4413      	add	r3, r2
 8007c36:	005b      	lsls	r3, r3, #1
 8007c38:	4413      	add	r3, r2
 8007c3a:	440b      	add	r3, r1
 8007c3c:	3309      	adds	r3, #9
 8007c3e:	7819      	ldrb	r1, [r3, #0]
 8007c40:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8007c44:	4613      	mov	r3, r2
 8007c46:	009b      	lsls	r3, r3, #2
 8007c48:	4413      	add	r3, r2
 8007c4a:	009b      	lsls	r3, r3, #2
 8007c4c:	3390      	adds	r3, #144	@ 0x90
 8007c4e:	443b      	add	r3, r7
 8007c50:	3b80      	subs	r3, #128	@ 0x80
 8007c52:	460a      	mov	r2, r1
 8007c54:	701a      	strb	r2, [r3, #0]
    size += 1;
 8007c56:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8007c5a:	3301      	adds	r3, #1
 8007c5c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    Advertising_Report[i].Data = rp0->Advertising_Report[i].Data;
 8007c60:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8007c64:	4613      	mov	r3, r2
 8007c66:	009b      	lsls	r3, r3, #2
 8007c68:	4413      	add	r3, r2
 8007c6a:	005b      	lsls	r3, r3, #1
 8007c6c:	4413      	add	r3, r2
 8007c6e:	3308      	adds	r3, #8
 8007c70:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007c74:	4413      	add	r3, r2
 8007c76:	1c99      	adds	r1, r3, #2
 8007c78:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8007c7c:	4613      	mov	r3, r2
 8007c7e:	009b      	lsls	r3, r3, #2
 8007c80:	4413      	add	r3, r2
 8007c82:	009b      	lsls	r3, r3, #2
 8007c84:	3390      	adds	r3, #144	@ 0x90
 8007c86:	443b      	add	r3, r7
 8007c88:	3b7c      	subs	r3, #124	@ 0x7c
 8007c8a:	6019      	str	r1, [r3, #0]
    size += rp0->Advertising_Report[i].Length_Data;
 8007c8c:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8007c90:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8007c94:	4613      	mov	r3, r2
 8007c96:	009b      	lsls	r3, r3, #2
 8007c98:	4413      	add	r3, r2
 8007c9a:	005b      	lsls	r3, r3, #1
 8007c9c:	4413      	add	r3, r2
 8007c9e:	440b      	add	r3, r1
 8007ca0:	3309      	adds	r3, #9
 8007ca2:	781a      	ldrb	r2, [r3, #0]
 8007ca4:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8007ca8:	4413      	add	r3, r2
 8007caa:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    Advertising_Report[i].RSSI = (uint8_t)buffer_in[size];
 8007cae:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8007cb2:	687a      	ldr	r2, [r7, #4]
 8007cb4:	4413      	add	r3, r2
 8007cb6:	781b      	ldrb	r3, [r3, #0]
 8007cb8:	b259      	sxtb	r1, r3
 8007cba:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8007cbe:	4613      	mov	r3, r2
 8007cc0:	009b      	lsls	r3, r3, #2
 8007cc2:	4413      	add	r3, r2
 8007cc4:	009b      	lsls	r3, r3, #2
 8007cc6:	3390      	adds	r3, #144	@ 0x90
 8007cc8:	443b      	add	r3, r7
 8007cca:	3b78      	subs	r3, #120	@ 0x78
 8007ccc:	460a      	mov	r2, r1
 8007cce:	701a      	strb	r2, [r3, #0]
    size += 1;
 8007cd0:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8007cd4:	3301      	adds	r3, #1
 8007cd6:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  for (i = 0; i < rp0->Num_Reports; i++) {
 8007cda:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007cde:	3301      	adds	r3, #1
 8007ce0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007ce4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007ce8:	781b      	ldrb	r3, [r3, #0]
 8007cea:	461a      	mov	r2, r3
 8007cec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	f6ff af43 	blt.w	8007b7c <hci_le_advertising_report_event_process+0x22>
  }
  hci_le_advertising_report_event(rp0->Num_Reports,
 8007cf6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007cfa:	781b      	ldrb	r3, [r3, #0]
 8007cfc:	f107 0208 	add.w	r2, r7, #8
 8007d00:	4611      	mov	r1, r2
 8007d02:	4618      	mov	r0, r3
 8007d04:	f000 f9f8 	bl	80080f8 <hci_le_advertising_report_event>
                                  Advertising_Report);

  return status;
 8007d08:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3790      	adds	r7, #144	@ 0x90
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}

08007d14 <hci_le_connection_update_complete_event_process>:
 *        - 0x000A (100 ms)  ... 0x0C80 (32000 ms) 
 * @retval None
 */

tBleStatus hci_le_connection_update_complete_event_process(uint8_t *buffer_in)
{
 8007d14:	b590      	push	{r4, r7, lr}
 8007d16:	b087      	sub	sp, #28
 8007d18:	af02      	add	r7, sp, #8
 8007d1a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_connection_update_complete_event_rp0 *rp0 = (hci_le_connection_update_complete_event_rp0 *)buffer_in;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	60bb      	str	r3, [r7, #8]
  hci_le_connection_update_complete_event(rp0->Status,
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	7818      	ldrb	r0, [r3, #0]
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007d2e:	b299      	uxth	r1, r3
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8007d36:	b29a      	uxth	r2, r3
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8007d3e:	b29c      	uxth	r4, r3
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	9300      	str	r3, [sp, #0]
 8007d4a:	4623      	mov	r3, r4
 8007d4c:	f000 f9e4 	bl	8008118 <hci_le_connection_update_complete_event>
                                          rp0->Connection_Handle,
                                          rp0->Conn_Interval,
                                          rp0->Conn_Latency,
                                          rp0->Supervision_Timeout);

  return status;
 8007d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	3714      	adds	r7, #20
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd90      	pop	{r4, r7, pc}

08007d5a <hci_le_read_remote_used_features_complete_event_process>:
 *        Layer specification.
 * @retval None
 */

tBleStatus hci_le_read_remote_used_features_complete_event_process(uint8_t *buffer_in)
{
 8007d5a:	b580      	push	{r7, lr}
 8007d5c:	b084      	sub	sp, #16
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007d62:	2300      	movs	r3, #0
 8007d64:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_read_remote_used_features_complete_event_rp0 *rp0 = (hci_le_read_remote_used_features_complete_event_rp0 *)buffer_in;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	60bb      	str	r3, [r7, #8]
  hci_le_read_remote_used_features_complete_event(rp0->Status,
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	7818      	ldrb	r0, [r3, #0]
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007d74:	b299      	uxth	r1, r3
                                                  rp0->Connection_Handle,
                                                  rp0->LE_Features);
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	3303      	adds	r3, #3
  hci_le_read_remote_used_features_complete_event(rp0->Status,
 8007d7a:	461a      	mov	r2, r3
 8007d7c:	f000 f9e4 	bl	8008148 <hci_le_read_remote_used_features_complete_event>

  return status;
 8007d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3710      	adds	r7, #16
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}

08007d8a <hci_le_long_term_key_request_event_process>:
 * @param Encrypted_Diversifier 16-bit encrypted diversifier
 * @retval None
 */

tBleStatus hci_le_long_term_key_request_event_process(uint8_t *buffer_in)
{
 8007d8a:	b580      	push	{r7, lr}
 8007d8c:	b084      	sub	sp, #16
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007d92:	2300      	movs	r3, #0
 8007d94:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_long_term_key_request_event_rp0 *rp0 = (hci_le_long_term_key_request_event_rp0 *)buffer_in;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	60bb      	str	r3, [r7, #8]
  hci_le_long_term_key_request_event(rp0->Connection_Handle,
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	881b      	ldrh	r3, [r3, #0]
 8007d9e:	b298      	uxth	r0, r3
                                     rp0->Random_Number,
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	1c99      	adds	r1, r3, #2
  hci_le_long_term_key_request_event(rp0->Connection_Handle,
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	895b      	ldrh	r3, [r3, #10]
 8007da8:	b29b      	uxth	r3, r3
 8007daa:	461a      	mov	r2, r3
 8007dac:	f000 f9de 	bl	800816c <hci_le_long_term_key_request_event>
                                     rp0->Encrypted_Diversifier);

  return status;
 8007db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3710      	adds	r7, #16
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}

08007dba <hci_le_data_length_change_event_process>:
 *        future use)
 * @retval None
 */

tBleStatus hci_le_data_length_change_event_process(uint8_t *buffer_in)
{
 8007dba:	b590      	push	{r4, r7, lr}
 8007dbc:	b087      	sub	sp, #28
 8007dbe:	af02      	add	r7, sp, #8
 8007dc0:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_data_length_change_event_rp0 *rp0 = (hci_le_data_length_change_event_rp0 *)buffer_in;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	60bb      	str	r3, [r7, #8]
  hci_le_data_length_change_event(rp0->Connection_Handle,
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	881b      	ldrh	r3, [r3, #0]
 8007dce:	b298      	uxth	r0, r3
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	885b      	ldrh	r3, [r3, #2]
 8007dd4:	b299      	uxth	r1, r3
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	889b      	ldrh	r3, [r3, #4]
 8007dda:	b29a      	uxth	r2, r3
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	88db      	ldrh	r3, [r3, #6]
 8007de0:	b29c      	uxth	r4, r3
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	891b      	ldrh	r3, [r3, #8]
 8007de6:	b29b      	uxth	r3, r3
 8007de8:	9300      	str	r3, [sp, #0]
 8007dea:	4623      	mov	r3, r4
 8007dec:	f000 f9d0 	bl	8008190 <hci_le_data_length_change_event>
                                  rp0->MaxTxOctets,
                                  rp0->MaxTxTime,
                                  rp0->MaxRxOctets,
                                  rp0->MaxRxTime);

  return status;
 8007df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3714      	adds	r7, #20
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd90      	pop	{r4, r7, pc}

08007dfa <hci_le_read_local_p256_public_key_complete_event_process>:
 * @param Local_P256_Public_Key Local P-256 public key.
 * @retval None
 */

tBleStatus hci_le_read_local_p256_public_key_complete_event_process(uint8_t *buffer_in)
{
 8007dfa:	b580      	push	{r7, lr}
 8007dfc:	b084      	sub	sp, #16
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007e02:	2300      	movs	r3, #0
 8007e04:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_read_local_p256_public_key_complete_event_rp0 *rp0 = (hci_le_read_local_p256_public_key_complete_event_rp0 *)buffer_in;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	60bb      	str	r3, [r7, #8]
  hci_le_read_local_p256_public_key_complete_event(rp0->Status,
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	781a      	ldrb	r2, [r3, #0]
                                                   rp0->Local_P256_Public_Key);
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	3301      	adds	r3, #1
  hci_le_read_local_p256_public_key_complete_event(rp0->Status,
 8007e12:	4619      	mov	r1, r3
 8007e14:	4610      	mov	r0, r2
 8007e16:	f000 f9d3 	bl	80081c0 <hci_le_read_local_p256_public_key_complete_event>

  return status;
 8007e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3710      	adds	r7, #16
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}

08007e24 <hci_le_generate_dhkey_complete_event_process>:
 * @param DHKey Diffie Hellman Key
 * @retval None
 */

tBleStatus hci_le_generate_dhkey_complete_event_process(uint8_t *buffer_in)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b084      	sub	sp, #16
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_generate_dhkey_complete_event_rp0 *rp0 = (hci_le_generate_dhkey_complete_event_rp0 *)buffer_in;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	60bb      	str	r3, [r7, #8]
  hci_le_generate_dhkey_complete_event(rp0->Status,
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	781a      	ldrb	r2, [r3, #0]
                                       rp0->DHKey);
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	3301      	adds	r3, #1
  hci_le_generate_dhkey_complete_event(rp0->Status,
 8007e3c:	4619      	mov	r1, r3
 8007e3e:	4610      	mov	r0, r2
 8007e40:	f000 f9ce 	bl	80081e0 <hci_le_generate_dhkey_complete_event>

  return status;
 8007e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3710      	adds	r7, #16
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}

08007e4e <hci_le_enhanced_connection_complete_event_process>:
 *        - 0x07: 20 ppm
 * @retval None
 */

tBleStatus hci_le_enhanced_connection_complete_event_process(uint8_t *buffer_in)
{
 8007e4e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007e52:	b08d      	sub	sp, #52	@ 0x34
 8007e54:	af08      	add	r7, sp, #32
 8007e56:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_enhanced_connection_complete_event_rp0 *rp0 = (hci_le_enhanced_connection_complete_event_rp0 *)buffer_in;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	60bb      	str	r3, [r7, #8]
  hci_le_enhanced_connection_complete_event(rp0->Status,
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	f893 c000 	ldrb.w	ip, [r3]
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007e6c:	fa1f fe83 	uxth.w	lr, r3
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	f893 8003 	ldrb.w	r8, [r3, #3]
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	f893 9004 	ldrb.w	r9, [r3, #4]
                                            rp0->Connection_Handle,
                                            rp0->Role,
                                            rp0->Peer_Address_Type,
                                            rp0->Peer_Address,
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	3305      	adds	r3, #5
                                            rp0->Local_Resolvable_Private_Address,
 8007e80:	68ba      	ldr	r2, [r7, #8]
 8007e82:	320b      	adds	r2, #11
                                            rp0->Peer_Resolvable_Private_Address,
 8007e84:	68b9      	ldr	r1, [r7, #8]
 8007e86:	3111      	adds	r1, #17
  hci_le_enhanced_connection_complete_event(rp0->Status,
 8007e88:	68b8      	ldr	r0, [r7, #8]
 8007e8a:	f8b0 0017 	ldrh.w	r0, [r0, #23]
 8007e8e:	b280      	uxth	r0, r0
 8007e90:	68bc      	ldr	r4, [r7, #8]
 8007e92:	f8b4 4019 	ldrh.w	r4, [r4, #25]
 8007e96:	b2a4      	uxth	r4, r4
 8007e98:	68bd      	ldr	r5, [r7, #8]
 8007e9a:	f8b5 501b 	ldrh.w	r5, [r5, #27]
 8007e9e:	b2ad      	uxth	r5, r5
 8007ea0:	68be      	ldr	r6, [r7, #8]
 8007ea2:	7f76      	ldrb	r6, [r6, #29]
 8007ea4:	9606      	str	r6, [sp, #24]
 8007ea6:	9505      	str	r5, [sp, #20]
 8007ea8:	9404      	str	r4, [sp, #16]
 8007eaa:	9003      	str	r0, [sp, #12]
 8007eac:	9102      	str	r1, [sp, #8]
 8007eae:	9201      	str	r2, [sp, #4]
 8007eb0:	9300      	str	r3, [sp, #0]
 8007eb2:	464b      	mov	r3, r9
 8007eb4:	4642      	mov	r2, r8
 8007eb6:	4671      	mov	r1, lr
 8007eb8:	4660      	mov	r0, ip
 8007eba:	f000 f9a1 	bl	8008200 <hci_le_enhanced_connection_complete_event>
                                            rp0->Conn_Interval,
                                            rp0->Conn_Latency,
                                            rp0->Supervision_Timeout,
                                            rp0->Master_Clock_Accuracy);

  return status;
 8007ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3714      	adds	r7, #20
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08007eca <hci_le_direct_advertising_report_event_process>:
 * @param Direct_Advertising_Report See @ref Direct_Advertising_Report_t
 * @retval None
 */

tBleStatus hci_le_direct_advertising_report_event_process(uint8_t *buffer_in)
{
 8007eca:	b580      	push	{r7, lr}
 8007ecc:	b0a6      	sub	sp, #152	@ 0x98
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  /* Input params */
  hci_le_direct_advertising_report_event_rp0 *rp0 = (hci_le_direct_advertising_report_event_rp0 *)buffer_in;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint8_t size = 1;
 8007ede:	2301      	movs	r3, #1
 8007ee0:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  int i;
  Direct_Advertising_Report_t Direct_Advertising_Report[HCI_MAX_PAYLOAD_SIZE/sizeof(Direct_Advertising_Report_t)];
  for (i = 0; i < rp0->Num_Reports; i++) {
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007eea:	e085      	b.n	8007ff8 <hci_le_direct_advertising_report_event_process+0x12e>
    Direct_Advertising_Report[i].Event_Type = rp0->Direct_Advertising_Report[i].Event_Type;
 8007eec:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8007ef0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007ef4:	011b      	lsls	r3, r3, #4
 8007ef6:	4413      	add	r3, r2
 8007ef8:	3301      	adds	r3, #1
 8007efa:	781a      	ldrb	r2, [r3, #0]
 8007efc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007f00:	011b      	lsls	r3, r3, #4
 8007f02:	3398      	adds	r3, #152	@ 0x98
 8007f04:	443b      	add	r3, r7
 8007f06:	3b90      	subs	r3, #144	@ 0x90
 8007f08:	701a      	strb	r2, [r3, #0]
    size += 1;
 8007f0a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8007f0e:	3301      	adds	r3, #1
 8007f10:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    Direct_Advertising_Report[i].Address_Type = rp0->Direct_Advertising_Report[i].Address_Type;
 8007f14:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8007f18:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007f1c:	011b      	lsls	r3, r3, #4
 8007f1e:	4413      	add	r3, r2
 8007f20:	3302      	adds	r3, #2
 8007f22:	781a      	ldrb	r2, [r3, #0]
 8007f24:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007f28:	011b      	lsls	r3, r3, #4
 8007f2a:	3398      	adds	r3, #152	@ 0x98
 8007f2c:	443b      	add	r3, r7
 8007f2e:	3b8f      	subs	r3, #143	@ 0x8f
 8007f30:	701a      	strb	r2, [r3, #0]
    size += 1;
 8007f32:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8007f36:	3301      	adds	r3, #1
 8007f38:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Address, (const void *) rp0->Direct_Advertising_Report[i].Address, 6);
 8007f3c:	f107 0208 	add.w	r2, r7, #8
 8007f40:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007f44:	011b      	lsls	r3, r3, #4
 8007f46:	4413      	add	r3, r2
 8007f48:	1c98      	adds	r0, r3, #2
 8007f4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007f4e:	011b      	lsls	r3, r3, #4
 8007f50:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8007f54:	4413      	add	r3, r2
 8007f56:	3303      	adds	r3, #3
 8007f58:	2206      	movs	r2, #6
 8007f5a:	4619      	mov	r1, r3
 8007f5c:	f002 fbe9 	bl	800a732 <memcpy>
    size += 6;
 8007f60:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8007f64:	3306      	adds	r3, #6
 8007f66:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    Direct_Advertising_Report[i].Direct_Address_Type = rp0->Direct_Advertising_Report[i].Direct_Address_Type;
 8007f6a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8007f6e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007f72:	011b      	lsls	r3, r3, #4
 8007f74:	4413      	add	r3, r2
 8007f76:	3309      	adds	r3, #9
 8007f78:	781a      	ldrb	r2, [r3, #0]
 8007f7a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007f7e:	011b      	lsls	r3, r3, #4
 8007f80:	3398      	adds	r3, #152	@ 0x98
 8007f82:	443b      	add	r3, r7
 8007f84:	3b88      	subs	r3, #136	@ 0x88
 8007f86:	701a      	strb	r2, [r3, #0]
    size += 1;
 8007f88:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8007f8c:	3301      	adds	r3, #1
 8007f8e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Direct_Address, (const void *) rp0->Direct_Advertising_Report[i].Direct_Address, 6);
 8007f92:	f107 0208 	add.w	r2, r7, #8
 8007f96:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007f9a:	011b      	lsls	r3, r3, #4
 8007f9c:	3308      	adds	r3, #8
 8007f9e:	4413      	add	r3, r2
 8007fa0:	1c58      	adds	r0, r3, #1
 8007fa2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007fa6:	011b      	lsls	r3, r3, #4
 8007fa8:	3308      	adds	r3, #8
 8007faa:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8007fae:	4413      	add	r3, r2
 8007fb0:	3302      	adds	r3, #2
 8007fb2:	2206      	movs	r2, #6
 8007fb4:	4619      	mov	r1, r3
 8007fb6:	f002 fbbc 	bl	800a732 <memcpy>
    size += 6;
 8007fba:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8007fbe:	3306      	adds	r3, #6
 8007fc0:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    Direct_Advertising_Report[i].RSSI = rp0->Direct_Advertising_Report[i].RSSI;
 8007fc4:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8007fc8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007fcc:	011b      	lsls	r3, r3, #4
 8007fce:	4413      	add	r3, r2
 8007fd0:	3310      	adds	r3, #16
 8007fd2:	f993 2000 	ldrsb.w	r2, [r3]
 8007fd6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007fda:	011b      	lsls	r3, r3, #4
 8007fdc:	3398      	adds	r3, #152	@ 0x98
 8007fde:	443b      	add	r3, r7
 8007fe0:	3b81      	subs	r3, #129	@ 0x81
 8007fe2:	701a      	strb	r2, [r3, #0]
    size += 1;
 8007fe4:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8007fe8:	3301      	adds	r3, #1
 8007fea:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  for (i = 0; i < rp0->Num_Reports; i++) {
 8007fee:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007ff2:	3301      	adds	r3, #1
 8007ff4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007ff8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	461a      	mov	r2, r3
 8008000:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008004:	4293      	cmp	r3, r2
 8008006:	f6ff af71 	blt.w	8007eec <hci_le_direct_advertising_report_event_process+0x22>
  }
  hci_le_direct_advertising_report_event(rp0->Num_Reports,
 800800a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800800e:	781b      	ldrb	r3, [r3, #0]
 8008010:	f107 0208 	add.w	r2, r7, #8
 8008014:	4611      	mov	r1, r2
 8008016:	4618      	mov	r0, r3
 8008018:	f000 f90a 	bl	8008230 <hci_le_direct_advertising_report_event>
                                         Direct_Advertising_Report);

  return status;
 800801c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 8008020:	4618      	mov	r0, r3
 8008022:	3798      	adds	r7, #152	@ 0x98
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}

08008028 <hci_encryption_change_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_encryption_change_event(uint8_t Status,
                                 uint16_t Connection_Handle,
                                 uint8_t Encryption_Enabled))
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b082      	sub	sp, #8
 800802c:	af00      	add	r7, sp, #0
 800802e:	4603      	mov	r3, r0
 8008030:	71fb      	strb	r3, [r7, #7]
 8008032:	460b      	mov	r3, r1
 8008034:	80bb      	strh	r3, [r7, #4]
 8008036:	4613      	mov	r3, r2
 8008038:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_encryption_change_event\r\n");
 800803a:	4803      	ldr	r0, [pc, #12]	@ (8008048 <hci_encryption_change_event+0x20>)
 800803c:	f002 fa1e 	bl	800a47c <puts>
}
 8008040:	bf00      	nop
 8008042:	3708      	adds	r7, #8
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}
 8008048:	0800ba5c 	.word	0x0800ba5c

0800804c <hci_read_remote_version_information_complete_event>:
WEAK_FUNCTION(void hci_read_remote_version_information_complete_event(uint8_t Status,
                                                        uint16_t Connection_Handle,
                                                        uint8_t Version,
                                                        uint16_t Manufacturer_Name,
                                                        uint16_t Subversion))
{
 800804c:	b590      	push	{r4, r7, lr}
 800804e:	b083      	sub	sp, #12
 8008050:	af00      	add	r7, sp, #0
 8008052:	4604      	mov	r4, r0
 8008054:	4608      	mov	r0, r1
 8008056:	4611      	mov	r1, r2
 8008058:	461a      	mov	r2, r3
 800805a:	4623      	mov	r3, r4
 800805c:	71fb      	strb	r3, [r7, #7]
 800805e:	4603      	mov	r3, r0
 8008060:	80bb      	strh	r3, [r7, #4]
 8008062:	460b      	mov	r3, r1
 8008064:	71bb      	strb	r3, [r7, #6]
 8008066:	4613      	mov	r3, r2
 8008068:	807b      	strh	r3, [r7, #2]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_read_remote_version_information_complete_event\r\n");
 800806a:	4803      	ldr	r0, [pc, #12]	@ (8008078 <hci_read_remote_version_information_complete_event+0x2c>)
 800806c:	f002 fa06 	bl	800a47c <puts>
}
 8008070:	bf00      	nop
 8008072:	370c      	adds	r7, #12
 8008074:	46bd      	mov	sp, r7
 8008076:	bd90      	pop	{r4, r7, pc}
 8008078:	0800ba7c 	.word	0x0800ba7c

0800807c <hci_hardware_error_event>:
  - 0x02: Timer overrun error
  - 0x03: Internal queue overflow error
  * @retval None
*/
WEAK_FUNCTION(void hci_hardware_error_event(uint8_t Hardware_Code))
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b082      	sub	sp, #8
 8008080:	af00      	add	r7, sp, #0
 8008082:	4603      	mov	r3, r0
 8008084:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_hardware_error_event\r\n");
 8008086:	4803      	ldr	r0, [pc, #12]	@ (8008094 <hci_hardware_error_event+0x18>)
 8008088:	f002 f9f8 	bl	800a47c <puts>
}
 800808c:	bf00      	nop
 800808e:	3708      	adds	r7, #8
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}
 8008094:	0800bab0 	.word	0x0800bab0

08008098 <hci_number_of_completed_packets_event>:
  * @param Handle_Packets_Pair_Entry See @ref Handle_Packets_Pair_Entry_t
  * @retval None
*/
WEAK_FUNCTION(void hci_number_of_completed_packets_event(uint8_t Number_of_Handles,
                                           Handle_Packets_Pair_Entry_t Handle_Packets_Pair_Entry[]))
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b082      	sub	sp, #8
 800809c:	af00      	add	r7, sp, #0
 800809e:	4603      	mov	r3, r0
 80080a0:	6039      	str	r1, [r7, #0]
 80080a2:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_number_of_completed_packets_event\r\n");
 80080a4:	4803      	ldr	r0, [pc, #12]	@ (80080b4 <hci_number_of_completed_packets_event+0x1c>)
 80080a6:	f002 f9e9 	bl	800a47c <puts>
}
 80080aa:	bf00      	nop
 80080ac:	3708      	adds	r7, #8
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}
 80080b2:	bf00      	nop
 80080b4:	0800bacc 	.word	0x0800bacc

080080b8 <hci_data_buffer_overflow_event>:
  * Values:
  - 0x01: ACL Buffer Overflow
  * @retval None
*/
WEAK_FUNCTION(void hci_data_buffer_overflow_event(uint8_t Link_Type))
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b082      	sub	sp, #8
 80080bc:	af00      	add	r7, sp, #0
 80080be:	4603      	mov	r3, r0
 80080c0:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_data_buffer_overflow_event\r\n");
 80080c2:	4803      	ldr	r0, [pc, #12]	@ (80080d0 <hci_data_buffer_overflow_event+0x18>)
 80080c4:	f002 f9da 	bl	800a47c <puts>
}
 80080c8:	bf00      	nop
 80080ca:	3708      	adds	r7, #8
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}
 80080d0:	0800baf4 	.word	0x0800baf4

080080d4 <hci_encryption_key_refresh_complete_event>:
  - 0x0000 ... 0x0EFF
  * @retval None
*/
WEAK_FUNCTION(void hci_encryption_key_refresh_complete_event(uint8_t Status,
                                               uint16_t Connection_Handle))
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b082      	sub	sp, #8
 80080d8:	af00      	add	r7, sp, #0
 80080da:	4603      	mov	r3, r0
 80080dc:	460a      	mov	r2, r1
 80080de:	71fb      	strb	r3, [r7, #7]
 80080e0:	4613      	mov	r3, r2
 80080e2:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_encryption_key_refresh_complete_event\r\n");
 80080e4:	4803      	ldr	r0, [pc, #12]	@ (80080f4 <hci_encryption_key_refresh_complete_event+0x20>)
 80080e6:	f002 f9c9 	bl	800a47c <puts>
}
 80080ea:	bf00      	nop
 80080ec:	3708      	adds	r7, #8
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}
 80080f2:	bf00      	nop
 80080f4:	0800bb14 	.word	0x0800bb14

080080f8 <hci_le_advertising_report_event>:
  * @param Advertising_Report See @ref Advertising_Report_t
  * @retval None
*/
WEAK_FUNCTION(void hci_le_advertising_report_event(uint8_t Num_Reports,
                                     Advertising_Report_t Advertising_Report[]))
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b082      	sub	sp, #8
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	4603      	mov	r3, r0
 8008100:	6039      	str	r1, [r7, #0]
 8008102:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_advertising_report_event\r\n");
 8008104:	4803      	ldr	r0, [pc, #12]	@ (8008114 <hci_le_advertising_report_event+0x1c>)
 8008106:	f002 f9b9 	bl	800a47c <puts>
}
 800810a:	bf00      	nop
 800810c:	3708      	adds	r7, #8
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}
 8008112:	bf00      	nop
 8008114:	0800bb64 	.word	0x0800bb64

08008118 <hci_le_connection_update_complete_event>:
WEAK_FUNCTION(void hci_le_connection_update_complete_event(uint8_t Status,
                                             uint16_t Connection_Handle,
                                             uint16_t Conn_Interval,
                                             uint16_t Conn_Latency,
                                             uint16_t Supervision_Timeout))
{
 8008118:	b590      	push	{r4, r7, lr}
 800811a:	b083      	sub	sp, #12
 800811c:	af00      	add	r7, sp, #0
 800811e:	4604      	mov	r4, r0
 8008120:	4608      	mov	r0, r1
 8008122:	4611      	mov	r1, r2
 8008124:	461a      	mov	r2, r3
 8008126:	4623      	mov	r3, r4
 8008128:	71fb      	strb	r3, [r7, #7]
 800812a:	4603      	mov	r3, r0
 800812c:	80bb      	strh	r3, [r7, #4]
 800812e:	460b      	mov	r3, r1
 8008130:	807b      	strh	r3, [r7, #2]
 8008132:	4613      	mov	r3, r2
 8008134:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_connection_update_complete_event\r\n");
 8008136:	4803      	ldr	r0, [pc, #12]	@ (8008144 <hci_le_connection_update_complete_event+0x2c>)
 8008138:	f002 f9a0 	bl	800a47c <puts>
}
 800813c:	bf00      	nop
 800813e:	370c      	adds	r7, #12
 8008140:	46bd      	mov	sp, r7
 8008142:	bd90      	pop	{r4, r7, pc}
 8008144:	0800bb88 	.word	0x0800bb88

08008148 <hci_le_read_remote_used_features_complete_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_le_read_remote_used_features_complete_event(uint8_t Status,
                                                     uint16_t Connection_Handle,
                                                     uint8_t LE_Features[8]))
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b082      	sub	sp, #8
 800814c:	af00      	add	r7, sp, #0
 800814e:	4603      	mov	r3, r0
 8008150:	603a      	str	r2, [r7, #0]
 8008152:	71fb      	strb	r3, [r7, #7]
 8008154:	460b      	mov	r3, r1
 8008156:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_read_remote_used_features_complete_event\r\n");
 8008158:	4803      	ldr	r0, [pc, #12]	@ (8008168 <hci_le_read_remote_used_features_complete_event+0x20>)
 800815a:	f002 f98f 	bl	800a47c <puts>
}
 800815e:	bf00      	nop
 8008160:	3708      	adds	r7, #8
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}
 8008166:	bf00      	nop
 8008168:	0800bbb4 	.word	0x0800bbb4

0800816c <hci_le_long_term_key_request_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_le_long_term_key_request_event(uint16_t Connection_Handle,
                                        uint8_t Random_Number[8],
                                        uint16_t Encrypted_Diversifier))
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b082      	sub	sp, #8
 8008170:	af00      	add	r7, sp, #0
 8008172:	4603      	mov	r3, r0
 8008174:	6039      	str	r1, [r7, #0]
 8008176:	80fb      	strh	r3, [r7, #6]
 8008178:	4613      	mov	r3, r2
 800817a:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_long_term_key_request_event\r\n");
 800817c:	4803      	ldr	r0, [pc, #12]	@ (800818c <hci_le_long_term_key_request_event+0x20>)
 800817e:	f002 f97d 	bl	800a47c <puts>
}
 8008182:	bf00      	nop
 8008184:	3708      	adds	r7, #8
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}
 800818a:	bf00      	nop
 800818c:	0800bbe8 	.word	0x0800bbe8

08008190 <hci_le_data_length_change_event>:
WEAK_FUNCTION(void hci_le_data_length_change_event(uint16_t Connection_Handle,
                                     uint16_t MaxTxOctets,
                                     uint16_t MaxTxTime,
                                     uint16_t MaxRxOctets,
                                     uint16_t MaxRxTime))
{
 8008190:	b590      	push	{r4, r7, lr}
 8008192:	b083      	sub	sp, #12
 8008194:	af00      	add	r7, sp, #0
 8008196:	4604      	mov	r4, r0
 8008198:	4608      	mov	r0, r1
 800819a:	4611      	mov	r1, r2
 800819c:	461a      	mov	r2, r3
 800819e:	4623      	mov	r3, r4
 80081a0:	80fb      	strh	r3, [r7, #6]
 80081a2:	4603      	mov	r3, r0
 80081a4:	80bb      	strh	r3, [r7, #4]
 80081a6:	460b      	mov	r3, r1
 80081a8:	807b      	strh	r3, [r7, #2]
 80081aa:	4613      	mov	r3, r2
 80081ac:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_data_length_change_event\r\n");
 80081ae:	4803      	ldr	r0, [pc, #12]	@ (80081bc <hci_le_data_length_change_event+0x2c>)
 80081b0:	f002 f964 	bl	800a47c <puts>
}
 80081b4:	bf00      	nop
 80081b6:	370c      	adds	r7, #12
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd90      	pop	{r4, r7, pc}
 80081bc:	0800bc0c 	.word	0x0800bc0c

080081c0 <hci_le_read_local_p256_public_key_complete_event>:
  * @param Local_P256_Public_Key Local P-256 public key.
  * @retval None
*/
WEAK_FUNCTION(void hci_le_read_local_p256_public_key_complete_event(uint8_t Status,
                                                      uint8_t Local_P256_Public_Key[64]))
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b082      	sub	sp, #8
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	4603      	mov	r3, r0
 80081c8:	6039      	str	r1, [r7, #0]
 80081ca:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_read_local_p256_public_key_complete_event\r\n");
 80081cc:	4803      	ldr	r0, [pc, #12]	@ (80081dc <hci_le_read_local_p256_public_key_complete_event+0x1c>)
 80081ce:	f002 f955 	bl	800a47c <puts>
}
 80081d2:	bf00      	nop
 80081d4:	3708      	adds	r7, #8
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}
 80081da:	bf00      	nop
 80081dc:	0800bc30 	.word	0x0800bc30

080081e0 <hci_le_generate_dhkey_complete_event>:
  * @param DHKey Diffie Hellman Key
  * @retval None
*/
WEAK_FUNCTION(void hci_le_generate_dhkey_complete_event(uint8_t Status,
                                          uint8_t DHKey[32]))
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b082      	sub	sp, #8
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	4603      	mov	r3, r0
 80081e8:	6039      	str	r1, [r7, #0]
 80081ea:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_generate_dhkey_complete_event\r\n");
 80081ec:	4803      	ldr	r0, [pc, #12]	@ (80081fc <hci_le_generate_dhkey_complete_event+0x1c>)
 80081ee:	f002 f945 	bl	800a47c <puts>
}
 80081f2:	bf00      	nop
 80081f4:	3708      	adds	r7, #8
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}
 80081fa:	bf00      	nop
 80081fc:	0800bc64 	.word	0x0800bc64

08008200 <hci_le_enhanced_connection_complete_event>:
                                               uint8_t Peer_Resolvable_Private_Address[6],
                                               uint16_t Conn_Interval,
                                               uint16_t Conn_Latency,
                                               uint16_t Supervision_Timeout,
                                               uint8_t Master_Clock_Accuracy))
{
 8008200:	b590      	push	{r4, r7, lr}
 8008202:	b083      	sub	sp, #12
 8008204:	af00      	add	r7, sp, #0
 8008206:	4604      	mov	r4, r0
 8008208:	4608      	mov	r0, r1
 800820a:	4611      	mov	r1, r2
 800820c:	461a      	mov	r2, r3
 800820e:	4623      	mov	r3, r4
 8008210:	71fb      	strb	r3, [r7, #7]
 8008212:	4603      	mov	r3, r0
 8008214:	80bb      	strh	r3, [r7, #4]
 8008216:	460b      	mov	r3, r1
 8008218:	71bb      	strb	r3, [r7, #6]
 800821a:	4613      	mov	r3, r2
 800821c:	70fb      	strb	r3, [r7, #3]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_enhanced_connection_complete_event\r\n");
 800821e:	4803      	ldr	r0, [pc, #12]	@ (800822c <hci_le_enhanced_connection_complete_event+0x2c>)
 8008220:	f002 f92c 	bl	800a47c <puts>
}
 8008224:	bf00      	nop
 8008226:	370c      	adds	r7, #12
 8008228:	46bd      	mov	sp, r7
 800822a:	bd90      	pop	{r4, r7, pc}
 800822c:	0800bc8c 	.word	0x0800bc8c

08008230 <hci_le_direct_advertising_report_event>:
  * @param Direct_Advertising_Report See @ref Direct_Advertising_Report_t
  * @retval None
*/
WEAK_FUNCTION(void hci_le_direct_advertising_report_event(uint8_t Num_Reports,
                                            Direct_Advertising_Report_t Direct_Advertising_Report[]))
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b082      	sub	sp, #8
 8008234:	af00      	add	r7, sp, #0
 8008236:	4603      	mov	r3, r0
 8008238:	6039      	str	r1, [r7, #0]
 800823a:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_direct_advertising_report_event\r\n");
 800823c:	4803      	ldr	r0, [pc, #12]	@ (800824c <hci_le_direct_advertising_report_event+0x1c>)
 800823e:	f002 f91d 	bl	800a47c <puts>
}
 8008242:	bf00      	nop
 8008244:	3708      	adds	r7, #8
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}
 800824a:	bf00      	nop
 800824c:	0800bcb8 	.word	0x0800bcb8

08008250 <aci_gap_limited_discoverable_event>:
  * @brief This event is generated by the controller when the limited discoverable mode ends due to
timeout. The timeout is 180 seconds.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_limited_discoverable_event(void))
{
 8008250:	b580      	push	{r7, lr}
 8008252:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_limited_discoverable_event\r\n");
 8008254:	4802      	ldr	r0, [pc, #8]	@ (8008260 <aci_gap_limited_discoverable_event+0x10>)
 8008256:	f002 f911 	bl	800a47c <puts>
}
 800825a:	bf00      	nop
 800825c:	bd80      	pop	{r7, pc}
 800825e:	bf00      	nop
 8008260:	0800bce0 	.word	0x0800bce0

08008264 <aci_gap_authorization_req_event>:
@ref aci_gap_authorization_resp command should be used to respond by the application.
  * @param Connection_Handle Connection handle for which authorization has been requested.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_authorization_req_event(uint16_t Connection_Handle))
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b082      	sub	sp, #8
 8008268:	af00      	add	r7, sp, #0
 800826a:	4603      	mov	r3, r0
 800826c:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_authorization_req_event\r\n");
 800826e:	4803      	ldr	r0, [pc, #12]	@ (800827c <aci_gap_authorization_req_event+0x18>)
 8008270:	f002 f904 	bl	800a47c <puts>
}
 8008274:	bf00      	nop
 8008276:	3708      	adds	r7, #8
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}
 800827c:	0800bd40 	.word	0x0800bd40

08008280 <aci_gap_slave_security_initiated_event>:
/**
  * @brief This event is generated when the slave security request is successfully sent to the master.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_slave_security_initiated_event(void))
{
 8008280:	b580      	push	{r7, lr}
 8008282:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_slave_security_initiated_event\r\n");
 8008284:	4802      	ldr	r0, [pc, #8]	@ (8008290 <aci_gap_slave_security_initiated_event+0x10>)
 8008286:	f002 f8f9 	bl	800a47c <puts>
}
 800828a:	bf00      	nop
 800828c:	bd80      	pop	{r7, pc}
 800828e:	bf00      	nop
 8008290:	0800bd64 	.word	0x0800bd64

08008294 <aci_gap_bond_lost_event>:
received, the upper layer has to issue the command @ref aci_gap_allow_rebond in order to
allow the slave to continue the pairing process with the master.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_bond_lost_event(void))
{
 8008294:	b580      	push	{r7, lr}
 8008296:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_bond_lost_event\r\n");
 8008298:	4802      	ldr	r0, [pc, #8]	@ (80082a4 <aci_gap_bond_lost_event+0x10>)
 800829a:	f002 f8ef 	bl	800a47c <puts>
}
 800829e:	bf00      	nop
 80082a0:	bd80      	pop	{r7, pc}
 80082a2:	bf00      	nop
 80082a4:	0800bd8c 	.word	0x0800bd8c

080082a8 <aci_gap_proc_complete_event>:
*/
WEAK_FUNCTION(void aci_gap_proc_complete_event(uint8_t Procedure_Code,
                                 uint8_t Status,
                                 uint8_t Data_Length,
                                 uint8_t Data[]))
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b082      	sub	sp, #8
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	603b      	str	r3, [r7, #0]
 80082b0:	4603      	mov	r3, r0
 80082b2:	71fb      	strb	r3, [r7, #7]
 80082b4:	460b      	mov	r3, r1
 80082b6:	71bb      	strb	r3, [r7, #6]
 80082b8:	4613      	mov	r3, r2
 80082ba:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_proc_complete_event\r\n");
 80082bc:	4803      	ldr	r0, [pc, #12]	@ (80082cc <aci_gap_proc_complete_event+0x24>)
 80082be:	f002 f8dd 	bl	800a47c <puts>
}
 80082c2:	bf00      	nop
 80082c4:	3708      	adds	r7, #8
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}
 80082ca:	bf00      	nop
 80082cc:	0800bda8 	.word	0x0800bda8

080082d0 <aci_gap_addr_not_resolved_event>:
  * @param Connection_Handle Connection handle for which the private address could not be
resolved with any of the stored IRK's.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_addr_not_resolved_event(uint16_t Connection_Handle))
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b082      	sub	sp, #8
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	4603      	mov	r3, r0
 80082d8:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_addr_not_resolved_event\r\n");
 80082da:	4803      	ldr	r0, [pc, #12]	@ (80082e8 <aci_gap_addr_not_resolved_event+0x18>)
 80082dc:	f002 f8ce 	bl	800a47c <puts>
}
 80082e0:	bf00      	nop
 80082e2:	3708      	adds	r7, #8
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}
 80082e8:	0800bdc8 	.word	0x0800bdc8

080082ec <aci_gap_numeric_comparison_value_event>:
  * @param Numeric_Value 
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_numeric_comparison_value_event(uint16_t Connection_Handle,
                                            uint32_t Numeric_Value))
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b082      	sub	sp, #8
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	4603      	mov	r3, r0
 80082f4:	6039      	str	r1, [r7, #0]
 80082f6:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_numeric_comparison_value_event\r\n");
 80082f8:	4803      	ldr	r0, [pc, #12]	@ (8008308 <aci_gap_numeric_comparison_value_event+0x1c>)
 80082fa:	f002 f8bf 	bl	800a47c <puts>
}
 80082fe:	bf00      	nop
 8008300:	3708      	adds	r7, #8
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}
 8008306:	bf00      	nop
 8008308:	0800bdec 	.word	0x0800bdec

0800830c <aci_gap_keypress_notification_event>:
  * @param Notification_Type Type of Keypress input notified/signaled by peer device (having Keyboard only I/O capabilities
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_keypress_notification_event(uint16_t Connection_Handle,
                                         uint8_t Notification_Type))
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b082      	sub	sp, #8
 8008310:	af00      	add	r7, sp, #0
 8008312:	4603      	mov	r3, r0
 8008314:	460a      	mov	r2, r1
 8008316:	80fb      	strh	r3, [r7, #6]
 8008318:	4613      	mov	r3, r2
 800831a:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_keypress_notification_event\r\n");
 800831c:	4803      	ldr	r0, [pc, #12]	@ (800832c <aci_gap_keypress_notification_event+0x20>)
 800831e:	f002 f8ad 	bl	800a47c <puts>
}
 8008322:	bf00      	nop
 8008324:	3708      	adds	r7, #8
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}
 800832a:	bf00      	nop
 800832c:	0800be14 	.word	0x0800be14

08008330 <aci_gatt_proc_timeout_event>:
seconds). This is a critical event that should not happen during normal operating conditions. It is an indication of either a major disruption in the communication link or a mistake in the application which does not provide a reply to GATT procedures. After this event, the GATT channel is closed and no more GATT communication can be performed. The applications is exptected to issue an @ref aci_gap_terminate to disconnect from the peer device. It is important to leave an 100 ms blank window before sending the @ref aci_gap_terminate, since immediately after this event, system could save important information in non volatile memory.
  * @param Connection_Handle Connection handle on which the GATT procedure has timed out
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_proc_timeout_event(uint16_t Connection_Handle))
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b082      	sub	sp, #8
 8008334:	af00      	add	r7, sp, #0
 8008336:	4603      	mov	r3, r0
 8008338:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_proc_timeout_event\r\n");
 800833a:	4803      	ldr	r0, [pc, #12]	@ (8008348 <aci_gatt_proc_timeout_event+0x18>)
 800833c:	f002 f89e 	bl	800a47c <puts>
}
 8008340:	bf00      	nop
 8008342:	3708      	adds	r7, #8
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}
 8008348:	0800be60 	.word	0x0800be60

0800834c <aci_att_exchange_mtu_resp_event>:
  * @param Server_RX_MTU ATT_MTU value agreed between server and client
  * @retval None
*/
WEAK_FUNCTION(void aci_att_exchange_mtu_resp_event(uint16_t Connection_Handle,
                                     uint16_t Server_RX_MTU))
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b082      	sub	sp, #8
 8008350:	af00      	add	r7, sp, #0
 8008352:	4603      	mov	r3, r0
 8008354:	460a      	mov	r2, r1
 8008356:	80fb      	strh	r3, [r7, #6]
 8008358:	4613      	mov	r3, r2
 800835a:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_exchange_mtu_resp_event\r\n");
 800835c:	4803      	ldr	r0, [pc, #12]	@ (800836c <aci_att_exchange_mtu_resp_event+0x20>)
 800835e:	f002 f88d 	bl	800a47c <puts>
}
 8008362:	bf00      	nop
 8008364:	3708      	adds	r7, #8
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}
 800836a:	bf00      	nop
 800836c:	0800be80 	.word	0x0800be80

08008370 <aci_att_find_info_resp_event>:
*/
WEAK_FUNCTION(void aci_att_find_info_resp_event(uint16_t Connection_Handle,
                                  uint8_t Format,
                                  uint8_t Event_Data_Length,
                                  uint8_t Handle_UUID_Pair[]))
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b082      	sub	sp, #8
 8008374:	af00      	add	r7, sp, #0
 8008376:	603b      	str	r3, [r7, #0]
 8008378:	4603      	mov	r3, r0
 800837a:	80fb      	strh	r3, [r7, #6]
 800837c:	460b      	mov	r3, r1
 800837e:	717b      	strb	r3, [r7, #5]
 8008380:	4613      	mov	r3, r2
 8008382:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_find_info_resp_event\r\n");
 8008384:	4803      	ldr	r0, [pc, #12]	@ (8008394 <aci_att_find_info_resp_event+0x24>)
 8008386:	f002 f879 	bl	800a47c <puts>
}
 800838a:	bf00      	nop
 800838c:	3708      	adds	r7, #8
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}
 8008392:	bf00      	nop
 8008394:	0800bea4 	.word	0x0800bea4

08008398 <aci_att_find_by_type_value_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_find_by_type_value_resp_event(uint16_t Connection_Handle,
                                           uint8_t Num_of_Handle_Pair,
                                           Attribute_Group_Handle_Pair_t Attribute_Group_Handle_Pair[]))
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b082      	sub	sp, #8
 800839c:	af00      	add	r7, sp, #0
 800839e:	4603      	mov	r3, r0
 80083a0:	603a      	str	r2, [r7, #0]
 80083a2:	80fb      	strh	r3, [r7, #6]
 80083a4:	460b      	mov	r3, r1
 80083a6:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_find_by_type_value_resp_event\r\n");
 80083a8:	4803      	ldr	r0, [pc, #12]	@ (80083b8 <aci_att_find_by_type_value_resp_event+0x20>)
 80083aa:	f002 f867 	bl	800a47c <puts>
}
 80083ae:	bf00      	nop
 80083b0:	3708      	adds	r7, #8
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}
 80083b6:	bf00      	nop
 80083b8:	0800bec4 	.word	0x0800bec4

080083bc <aci_att_read_by_type_resp_event>:
*/
WEAK_FUNCTION(void aci_att_read_by_type_resp_event(uint16_t Connection_Handle,
                                     uint8_t Handle_Value_Pair_Length,
                                     uint8_t Data_Length,
                                     uint8_t Handle_Value_Pair_Data[]))
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b082      	sub	sp, #8
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	603b      	str	r3, [r7, #0]
 80083c4:	4603      	mov	r3, r0
 80083c6:	80fb      	strh	r3, [r7, #6]
 80083c8:	460b      	mov	r3, r1
 80083ca:	717b      	strb	r3, [r7, #5]
 80083cc:	4613      	mov	r3, r2
 80083ce:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_by_type_resp_event\r\n");
 80083d0:	4803      	ldr	r0, [pc, #12]	@ (80083e0 <aci_att_read_by_type_resp_event+0x24>)
 80083d2:	f002 f853 	bl	800a47c <puts>
}
 80083d6:	bf00      	nop
 80083d8:	3708      	adds	r7, #8
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}
 80083de:	bf00      	nop
 80083e0:	0800beec 	.word	0x0800beec

080083e4 <aci_att_read_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_resp_event(uint16_t Connection_Handle,
                             uint8_t Event_Data_Length,
                             uint8_t Attribute_Value[]))
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b082      	sub	sp, #8
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	4603      	mov	r3, r0
 80083ec:	603a      	str	r2, [r7, #0]
 80083ee:	80fb      	strh	r3, [r7, #6]
 80083f0:	460b      	mov	r3, r1
 80083f2:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_resp_event\r\n");
 80083f4:	4803      	ldr	r0, [pc, #12]	@ (8008404 <aci_att_read_resp_event+0x20>)
 80083f6:	f002 f841 	bl	800a47c <puts>
}
 80083fa:	bf00      	nop
 80083fc:	3708      	adds	r7, #8
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}
 8008402:	bf00      	nop
 8008404:	0800bf10 	.word	0x0800bf10

08008408 <aci_att_read_blob_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_blob_resp_event(uint16_t Connection_Handle,
                                  uint8_t Event_Data_Length,
                                  uint8_t Attribute_Value[]))
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b082      	sub	sp, #8
 800840c:	af00      	add	r7, sp, #0
 800840e:	4603      	mov	r3, r0
 8008410:	603a      	str	r2, [r7, #0]
 8008412:	80fb      	strh	r3, [r7, #6]
 8008414:	460b      	mov	r3, r1
 8008416:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_blob_resp_event\r\n");
 8008418:	4803      	ldr	r0, [pc, #12]	@ (8008428 <aci_att_read_blob_resp_event+0x20>)
 800841a:	f002 f82f 	bl	800a47c <puts>
}
 800841e:	bf00      	nop
 8008420:	3708      	adds	r7, #8
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}
 8008426:	bf00      	nop
 8008428:	0800bf2c 	.word	0x0800bf2c

0800842c <aci_att_read_multiple_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_multiple_resp_event(uint16_t Connection_Handle,
                                      uint8_t Event_Data_Length,
                                      uint8_t Set_Of_Values[]))
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b082      	sub	sp, #8
 8008430:	af00      	add	r7, sp, #0
 8008432:	4603      	mov	r3, r0
 8008434:	603a      	str	r2, [r7, #0]
 8008436:	80fb      	strh	r3, [r7, #6]
 8008438:	460b      	mov	r3, r1
 800843a:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_multiple_resp_event\r\n");
 800843c:	4803      	ldr	r0, [pc, #12]	@ (800844c <aci_att_read_multiple_resp_event+0x20>)
 800843e:	f002 f81d 	bl	800a47c <puts>
}
 8008442:	bf00      	nop
 8008444:	3708      	adds	r7, #8
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}
 800844a:	bf00      	nop
 800844c:	0800bf4c 	.word	0x0800bf4c

08008450 <aci_att_read_by_group_type_resp_event>:
*/
WEAK_FUNCTION(void aci_att_read_by_group_type_resp_event(uint16_t Connection_Handle,
                                           uint8_t Attribute_Data_Length,
                                           uint8_t Data_Length,
                                           uint8_t Attribute_Data_List[]))
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b082      	sub	sp, #8
 8008454:	af00      	add	r7, sp, #0
 8008456:	603b      	str	r3, [r7, #0]
 8008458:	4603      	mov	r3, r0
 800845a:	80fb      	strh	r3, [r7, #6]
 800845c:	460b      	mov	r3, r1
 800845e:	717b      	strb	r3, [r7, #5]
 8008460:	4613      	mov	r3, r2
 8008462:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_by_group_type_resp_event\r\n");
 8008464:	4803      	ldr	r0, [pc, #12]	@ (8008474 <aci_att_read_by_group_type_resp_event+0x24>)
 8008466:	f002 f809 	bl	800a47c <puts>
}
 800846a:	bf00      	nop
 800846c:	3708      	adds	r7, #8
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}
 8008472:	bf00      	nop
 8008474:	0800bf70 	.word	0x0800bf70

08008478 <aci_att_prepare_write_resp_event>:
WEAK_FUNCTION(void aci_att_prepare_write_resp_event(uint16_t Connection_Handle,
                                      uint16_t Attribute_Handle,
                                      uint16_t Offset,
                                      uint8_t Part_Attribute_Value_Length,
                                      uint8_t Part_Attribute_Value[]))
{
 8008478:	b590      	push	{r4, r7, lr}
 800847a:	b083      	sub	sp, #12
 800847c:	af00      	add	r7, sp, #0
 800847e:	4604      	mov	r4, r0
 8008480:	4608      	mov	r0, r1
 8008482:	4611      	mov	r1, r2
 8008484:	461a      	mov	r2, r3
 8008486:	4623      	mov	r3, r4
 8008488:	80fb      	strh	r3, [r7, #6]
 800848a:	4603      	mov	r3, r0
 800848c:	80bb      	strh	r3, [r7, #4]
 800848e:	460b      	mov	r3, r1
 8008490:	807b      	strh	r3, [r7, #2]
 8008492:	4613      	mov	r3, r2
 8008494:	707b      	strb	r3, [r7, #1]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_prepare_write_resp_event\r\n");
 8008496:	4803      	ldr	r0, [pc, #12]	@ (80084a4 <aci_att_prepare_write_resp_event+0x2c>)
 8008498:	f001 fff0 	bl	800a47c <puts>
}
 800849c:	bf00      	nop
 800849e:	370c      	adds	r7, #12
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd90      	pop	{r4, r7, pc}
 80084a4:	0800bf98 	.word	0x0800bf98

080084a8 <aci_att_exec_write_resp_event>:
  * @brief This event is generated in response to an Execute Write Request.
  * @param Connection_Handle Connection handle related to the response
  * @retval None
*/
WEAK_FUNCTION(void aci_att_exec_write_resp_event(uint16_t Connection_Handle))
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b082      	sub	sp, #8
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	4603      	mov	r3, r0
 80084b0:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_exec_write_resp_event\r\n");
 80084b2:	4803      	ldr	r0, [pc, #12]	@ (80084c0 <aci_att_exec_write_resp_event+0x18>)
 80084b4:	f001 ffe2 	bl	800a47c <puts>
}
 80084b8:	bf00      	nop
 80084ba:	3708      	adds	r7, #8
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}
 80084c0:	0800bfbc 	.word	0x0800bfbc

080084c4 <aci_gatt_indication_event>:
*/
WEAK_FUNCTION(void aci_gatt_indication_event(uint16_t Connection_Handle,
                               uint16_t Attribute_Handle,
                               uint8_t Attribute_Value_Length,
                               uint8_t Attribute_Value[]))
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b084      	sub	sp, #16
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	607b      	str	r3, [r7, #4]
 80084cc:	4603      	mov	r3, r0
 80084ce:	81fb      	strh	r3, [r7, #14]
 80084d0:	460b      	mov	r3, r1
 80084d2:	81bb      	strh	r3, [r7, #12]
 80084d4:	4613      	mov	r3, r2
 80084d6:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_indication_event\r\n");
 80084d8:	4803      	ldr	r0, [pc, #12]	@ (80084e8 <aci_gatt_indication_event+0x24>)
 80084da:	f001 ffcf 	bl	800a47c <puts>
}
 80084de:	bf00      	nop
 80084e0:	3710      	adds	r7, #16
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}
 80084e6:	bf00      	nop
 80084e8:	0800bfdc 	.word	0x0800bfdc

080084ec <aci_gatt_notification_event>:
*/
WEAK_FUNCTION(void aci_gatt_notification_event(uint16_t Connection_Handle,
                                 uint16_t Attribute_Handle,
                                 uint8_t Attribute_Value_Length,
                                 uint8_t Attribute_Value[]))
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b084      	sub	sp, #16
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	607b      	str	r3, [r7, #4]
 80084f4:	4603      	mov	r3, r0
 80084f6:	81fb      	strh	r3, [r7, #14]
 80084f8:	460b      	mov	r3, r1
 80084fa:	81bb      	strh	r3, [r7, #12]
 80084fc:	4613      	mov	r3, r2
 80084fe:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_notification_event\r\n");
 8008500:	4803      	ldr	r0, [pc, #12]	@ (8008510 <aci_gatt_notification_event+0x24>)
 8008502:	f001 ffbb 	bl	800a47c <puts>
}
 8008506:	bf00      	nop
 8008508:	3710      	adds	r7, #16
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}
 800850e:	bf00      	nop
 8008510:	0800bff8 	.word	0x0800bff8

08008514 <aci_gatt_proc_complete_event>:
  - 0xFC: Flash erase failed
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_proc_complete_event(uint16_t Connection_Handle,
                                  uint8_t Error_Code))
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b082      	sub	sp, #8
 8008518:	af00      	add	r7, sp, #0
 800851a:	4603      	mov	r3, r0
 800851c:	460a      	mov	r2, r1
 800851e:	80fb      	strh	r3, [r7, #6]
 8008520:	4613      	mov	r3, r2
 8008522:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_proc_complete_event\r\n");
 8008524:	4803      	ldr	r0, [pc, #12]	@ (8008534 <aci_gatt_proc_complete_event+0x20>)
 8008526:	f001 ffa9 	bl	800a47c <puts>
}
 800852a:	bf00      	nop
 800852c:	3708      	adds	r7, #8
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}
 8008532:	bf00      	nop
 8008534:	0800c018 	.word	0x0800c018

08008538 <aci_gatt_error_resp_event>:
*/
WEAK_FUNCTION(void aci_gatt_error_resp_event(uint16_t Connection_Handle,
                               uint8_t Req_Opcode,
                               uint16_t Attribute_Handle,
                               uint8_t Error_Code))
{
 8008538:	b590      	push	{r4, r7, lr}
 800853a:	b083      	sub	sp, #12
 800853c:	af00      	add	r7, sp, #0
 800853e:	4604      	mov	r4, r0
 8008540:	4608      	mov	r0, r1
 8008542:	4611      	mov	r1, r2
 8008544:	461a      	mov	r2, r3
 8008546:	4623      	mov	r3, r4
 8008548:	80fb      	strh	r3, [r7, #6]
 800854a:	4603      	mov	r3, r0
 800854c:	717b      	strb	r3, [r7, #5]
 800854e:	460b      	mov	r3, r1
 8008550:	807b      	strh	r3, [r7, #2]
 8008552:	4613      	mov	r3, r2
 8008554:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_error_resp_event\r\n");
 8008556:	4803      	ldr	r0, [pc, #12]	@ (8008564 <aci_gatt_error_resp_event+0x2c>)
 8008558:	f001 ff90 	bl	800a47c <puts>
}
 800855c:	bf00      	nop
 800855e:	370c      	adds	r7, #12
 8008560:	46bd      	mov	sp, r7
 8008562:	bd90      	pop	{r4, r7, pc}
 8008564:	0800c038 	.word	0x0800c038

08008568 <aci_gatt_disc_read_char_by_uuid_resp_event>:
*/
WEAK_FUNCTION(void aci_gatt_disc_read_char_by_uuid_resp_event(uint16_t Connection_Handle,
                                                uint16_t Attribute_Handle,
                                                uint8_t Attribute_Value_Length,
                                                uint8_t Attribute_Value[]))
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b084      	sub	sp, #16
 800856c:	af00      	add	r7, sp, #0
 800856e:	607b      	str	r3, [r7, #4]
 8008570:	4603      	mov	r3, r0
 8008572:	81fb      	strh	r3, [r7, #14]
 8008574:	460b      	mov	r3, r1
 8008576:	81bb      	strh	r3, [r7, #12]
 8008578:	4613      	mov	r3, r2
 800857a:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_disc_read_char_by_uuid_resp_event\r\n");
 800857c:	4803      	ldr	r0, [pc, #12]	@ (800858c <aci_gatt_disc_read_char_by_uuid_resp_event+0x24>)
 800857e:	f001 ff7d 	bl	800a47c <puts>
}
 8008582:	bf00      	nop
 8008584:	3710      	adds	r7, #16
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}
 800858a:	bf00      	nop
 800858c:	0800c054 	.word	0x0800c054

08008590 <aci_gatt_write_permit_req_event>:
*/
WEAK_FUNCTION(void aci_gatt_write_permit_req_event(uint16_t Connection_Handle,
                                     uint16_t Attribute_Handle,
                                     uint8_t Data_Length,
                                     uint8_t Data[]))
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b084      	sub	sp, #16
 8008594:	af00      	add	r7, sp, #0
 8008596:	607b      	str	r3, [r7, #4]
 8008598:	4603      	mov	r3, r0
 800859a:	81fb      	strh	r3, [r7, #14]
 800859c:	460b      	mov	r3, r1
 800859e:	81bb      	strh	r3, [r7, #12]
 80085a0:	4613      	mov	r3, r2
 80085a2:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_write_permit_req_event\r\n");
 80085a4:	4803      	ldr	r0, [pc, #12]	@ (80085b4 <aci_gatt_write_permit_req_event+0x24>)
 80085a6:	f001 ff69 	bl	800a47c <puts>
}
 80085aa:	bf00      	nop
 80085ac:	3710      	adds	r7, #16
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}
 80085b2:	bf00      	nop
 80085b4:	0800c080 	.word	0x0800c080

080085b8 <aci_gatt_read_multi_permit_req_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_read_multi_permit_req_event(uint16_t Connection_Handle,
                                          uint8_t Number_of_Handles,
                                          Handle_Item_t Handle_Item[]))
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b082      	sub	sp, #8
 80085bc:	af00      	add	r7, sp, #0
 80085be:	4603      	mov	r3, r0
 80085c0:	603a      	str	r2, [r7, #0]
 80085c2:	80fb      	strh	r3, [r7, #6]
 80085c4:	460b      	mov	r3, r1
 80085c6:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_read_multi_permit_req_event\r\n");
 80085c8:	4803      	ldr	r0, [pc, #12]	@ (80085d8 <aci_gatt_read_multi_permit_req_event+0x20>)
 80085ca:	f001 ff57 	bl	800a47c <puts>
}
 80085ce:	bf00      	nop
 80085d0:	3708      	adds	r7, #8
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}
 80085d6:	bf00      	nop
 80085d8:	0800c0c4 	.word	0x0800c0c4

080085dc <aci_gatt_tx_pool_available_event>:
  * @param Available_Buffers Not used.
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_tx_pool_available_event(uint16_t Connection_Handle,
                                      uint16_t Available_Buffers))
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b082      	sub	sp, #8
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	4603      	mov	r3, r0
 80085e4:	460a      	mov	r2, r1
 80085e6:	80fb      	strh	r3, [r7, #6]
 80085e8:	4613      	mov	r3, r2
 80085ea:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_tx_pool_available_event\r\n");
 80085ec:	4803      	ldr	r0, [pc, #12]	@ (80085fc <aci_gatt_tx_pool_available_event+0x20>)
 80085ee:	f001 ff45 	bl	800a47c <puts>
}
 80085f2:	bf00      	nop
 80085f4:	3708      	adds	r7, #8
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}
 80085fa:	bf00      	nop
 80085fc:	0800c0ec 	.word	0x0800c0ec

08008600 <aci_gatt_server_confirmation_event>:
  * @brief This event is generated when the client has sent the confirmation to a previously sent indication
  * @param Connection_Handle Connection handle related to the event
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_server_confirmation_event(uint16_t Connection_Handle))
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b082      	sub	sp, #8
 8008604:	af00      	add	r7, sp, #0
 8008606:	4603      	mov	r3, r0
 8008608:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_server_confirmation_event\r\n");
 800860a:	4803      	ldr	r0, [pc, #12]	@ (8008618 <aci_gatt_server_confirmation_event+0x18>)
 800860c:	f001 ff36 	bl	800a47c <puts>
}
 8008610:	bf00      	nop
 8008612:	3708      	adds	r7, #8
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}
 8008618:	0800c110 	.word	0x0800c110

0800861c <aci_gatt_prepare_write_permit_req_event>:
WEAK_FUNCTION(void aci_gatt_prepare_write_permit_req_event(uint16_t Connection_Handle,
                                             uint16_t Attribute_Handle,
                                             uint16_t Offset,
                                             uint8_t Data_Length,
                                             uint8_t Data[]))
{
 800861c:	b590      	push	{r4, r7, lr}
 800861e:	b083      	sub	sp, #12
 8008620:	af00      	add	r7, sp, #0
 8008622:	4604      	mov	r4, r0
 8008624:	4608      	mov	r0, r1
 8008626:	4611      	mov	r1, r2
 8008628:	461a      	mov	r2, r3
 800862a:	4623      	mov	r3, r4
 800862c:	80fb      	strh	r3, [r7, #6]
 800862e:	4603      	mov	r3, r0
 8008630:	80bb      	strh	r3, [r7, #4]
 8008632:	460b      	mov	r3, r1
 8008634:	807b      	strh	r3, [r7, #2]
 8008636:	4613      	mov	r3, r2
 8008638:	707b      	strb	r3, [r7, #1]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_prepare_write_permit_req_event\r\n");
 800863a:	4803      	ldr	r0, [pc, #12]	@ (8008648 <aci_gatt_prepare_write_permit_req_event+0x2c>)
 800863c:	f001 ff1e 	bl	800a47c <puts>
}
 8008640:	bf00      	nop
 8008642:	370c      	adds	r7, #12
 8008644:	46bd      	mov	sp, r7
 8008646:	bd90      	pop	{r4, r7, pc}
 8008648:	0800c134 	.word	0x0800c134

0800864c <aci_l2cap_connection_update_resp_event>:
  * @param Result 
  * @retval None
*/
WEAK_FUNCTION(void aci_l2cap_connection_update_resp_event(uint16_t Connection_Handle,
                                            uint16_t Result))
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b082      	sub	sp, #8
 8008650:	af00      	add	r7, sp, #0
 8008652:	4603      	mov	r3, r0
 8008654:	460a      	mov	r2, r1
 8008656:	80fb      	strh	r3, [r7, #6]
 8008658:	4613      	mov	r3, r2
 800865a:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_connection_update_resp_event\r\n");
 800865c:	4803      	ldr	r0, [pc, #12]	@ (800866c <aci_l2cap_connection_update_resp_event+0x20>)
 800865e:	f001 ff0d 	bl	800a47c <puts>
}
 8008662:	bf00      	nop
 8008664:	3708      	adds	r7, #8
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}
 800866a:	bf00      	nop
 800866c:	0800c160 	.word	0x0800c160

08008670 <aci_l2cap_proc_timeout_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_l2cap_proc_timeout_event(uint16_t Connection_Handle,
                                  uint8_t Data_Length,
                                  uint8_t Data[]))
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b082      	sub	sp, #8
 8008674:	af00      	add	r7, sp, #0
 8008676:	4603      	mov	r3, r0
 8008678:	603a      	str	r2, [r7, #0]
 800867a:	80fb      	strh	r3, [r7, #6]
 800867c:	460b      	mov	r3, r1
 800867e:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_proc_timeout_event\r\n");
 8008680:	4803      	ldr	r0, [pc, #12]	@ (8008690 <aci_l2cap_proc_timeout_event+0x20>)
 8008682:	f001 fefb 	bl	800a47c <puts>
}
 8008686:	bf00      	nop
 8008688:	3708      	adds	r7, #8
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}
 800868e:	bf00      	nop
 8008690:	0800c188 	.word	0x0800c188

08008694 <aci_l2cap_connection_update_req_event>:
                                           uint16_t L2CAP_Length,
                                           uint16_t Interval_Min,
                                           uint16_t Interval_Max,
                                           uint16_t Slave_Latency,
                                           uint16_t Timeout_Multiplier))
{
 8008694:	b590      	push	{r4, r7, lr}
 8008696:	b083      	sub	sp, #12
 8008698:	af00      	add	r7, sp, #0
 800869a:	4604      	mov	r4, r0
 800869c:	4608      	mov	r0, r1
 800869e:	4611      	mov	r1, r2
 80086a0:	461a      	mov	r2, r3
 80086a2:	4623      	mov	r3, r4
 80086a4:	80fb      	strh	r3, [r7, #6]
 80086a6:	4603      	mov	r3, r0
 80086a8:	717b      	strb	r3, [r7, #5]
 80086aa:	460b      	mov	r3, r1
 80086ac:	807b      	strh	r3, [r7, #2]
 80086ae:	4613      	mov	r3, r2
 80086b0:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_connection_update_req_event\r\n");
 80086b2:	4803      	ldr	r0, [pc, #12]	@ (80086c0 <aci_l2cap_connection_update_req_event+0x2c>)
 80086b4:	f001 fee2 	bl	800a47c <puts>
}
 80086b8:	bf00      	nop
 80086ba:	370c      	adds	r7, #12
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd90      	pop	{r4, r7, pc}
 80086c0:	0800c1a8 	.word	0x0800c1a8

080086c4 <aci_l2cap_command_reject_event>:
WEAK_FUNCTION(void aci_l2cap_command_reject_event(uint16_t Connection_Handle,
                                    uint8_t Identifier,
                                    uint16_t Reason,
                                    uint8_t Data_Length,
                                    uint8_t Data[]))
{
 80086c4:	b590      	push	{r4, r7, lr}
 80086c6:	b083      	sub	sp, #12
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	4604      	mov	r4, r0
 80086cc:	4608      	mov	r0, r1
 80086ce:	4611      	mov	r1, r2
 80086d0:	461a      	mov	r2, r3
 80086d2:	4623      	mov	r3, r4
 80086d4:	80fb      	strh	r3, [r7, #6]
 80086d6:	4603      	mov	r3, r0
 80086d8:	717b      	strb	r3, [r7, #5]
 80086da:	460b      	mov	r3, r1
 80086dc:	807b      	strh	r3, [r7, #2]
 80086de:	4613      	mov	r3, r2
 80086e0:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_command_reject_event\r\n");
 80086e2:	4803      	ldr	r0, [pc, #12]	@ (80086f0 <aci_l2cap_command_reject_event+0x2c>)
 80086e4:	f001 feca 	bl	800a47c <puts>
}
 80086e8:	bf00      	nop
 80086ea:	370c      	adds	r7, #12
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd90      	pop	{r4, r7, pc}
 80086f0:	0800c1d0 	.word	0x0800c1d0

080086f4 <aci_blue_initialized_event>:
  - 0x08: System reset due to crash
  - 0x09: System reset due to ECC error
  * @retval None
*/
WEAK_FUNCTION(void aci_blue_initialized_event(uint8_t Reason_Code))
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b082      	sub	sp, #8
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	4603      	mov	r3, r0
 80086fc:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_initialized_event Reason_Code=%x\r\n",Reason_Code);
 80086fe:	79fb      	ldrb	r3, [r7, #7]
 8008700:	4619      	mov	r1, r3
 8008702:	4803      	ldr	r0, [pc, #12]	@ (8008710 <aci_blue_initialized_event+0x1c>)
 8008704:	f001 fe4a 	bl	800a39c <iprintf>
}
 8008708:	bf00      	nop
 800870a:	3708      	adds	r7, #8
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}
 8008710:	0800c1f0 	.word	0x0800c1f0

08008714 <aci_blue_events_lost_event>:
  - 0x0040000000000000: ACI_GAP_NUMERIC_COMPARISON_VALUE_EVENT
  - 0x0080000000000000: ACI_GAP_KEYPRESS_NOTIFICATION_EVENT
  * @retval None
*/
WEAK_FUNCTION(void aci_blue_events_lost_event(uint8_t Lost_Events[8]))
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b082      	sub	sp, #8
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_events_lost_event\r\n");
 800871c:	4803      	ldr	r0, [pc, #12]	@ (800872c <aci_blue_events_lost_event+0x18>)
 800871e:	f001 fead 	bl	800a47c <puts>
}
 8008722:	bf00      	nop
 8008724:	3708      	adds	r7, #8
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}
 800872a:	bf00      	nop
 800872c:	0800c21c 	.word	0x0800c21c

08008730 <aci_blue_crash_info_event>:
                               uint32_t LR,
                               uint32_t PC,
                               uint32_t xPSR,
                               uint8_t Debug_Data_Length,
                               uint8_t Debug_Data[]))
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b084      	sub	sp, #16
 8008734:	af00      	add	r7, sp, #0
 8008736:	60b9      	str	r1, [r7, #8]
 8008738:	607a      	str	r2, [r7, #4]
 800873a:	603b      	str	r3, [r7, #0]
 800873c:	4603      	mov	r3, r0
 800873e:	73fb      	strb	r3, [r7, #15]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_crash_info_event\r\n");
 8008740:	4803      	ldr	r0, [pc, #12]	@ (8008750 <aci_blue_crash_info_event+0x20>)
 8008742:	f001 fe9b 	bl	800a47c <puts>
}
 8008746:	bf00      	nop
 8008748:	3710      	adds	r7, #16
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}
 800874e:	bf00      	nop
 8008750:	0800c238 	.word	0x0800c238

08008754 <aci_hal_end_of_radio_activity_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_end_of_radio_activity_event(uint8_t Last_State,
                                         uint8_t Next_State,
                                         uint32_t Next_State_SysTime))
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b082      	sub	sp, #8
 8008758:	af00      	add	r7, sp, #0
 800875a:	4603      	mov	r3, r0
 800875c:	603a      	str	r2, [r7, #0]
 800875e:	71fb      	strb	r3, [r7, #7]
 8008760:	460b      	mov	r3, r1
 8008762:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_end_of_radio_activity_event\r\n");
 8008764:	4803      	ldr	r0, [pc, #12]	@ (8008774 <aci_hal_end_of_radio_activity_event+0x20>)
 8008766:	f001 fe89 	bl	800a47c <puts>
}
 800876a:	bf00      	nop
 800876c:	3708      	adds	r7, #8
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}
 8008772:	bf00      	nop
 8008774:	0800c254 	.word	0x0800c254

08008778 <aci_hal_scan_req_report_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_scan_req_report_event(int8_t RSSI,
                                   uint8_t Peer_Address_Type,
                                   uint8_t Peer_Address[6]))
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b082      	sub	sp, #8
 800877c:	af00      	add	r7, sp, #0
 800877e:	4603      	mov	r3, r0
 8008780:	603a      	str	r2, [r7, #0]
 8008782:	71fb      	strb	r3, [r7, #7]
 8008784:	460b      	mov	r3, r1
 8008786:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_scan_req_report_event\r\n");
 8008788:	4803      	ldr	r0, [pc, #12]	@ (8008798 <aci_hal_scan_req_report_event+0x20>)
 800878a:	f001 fe77 	bl	800a47c <puts>
}
 800878e:	bf00      	nop
 8008790:	3708      	adds	r7, #8
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}
 8008796:	bf00      	nop
 8008798:	0800c27c 	.word	0x0800c27c

0800879c <aci_hal_fw_error_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_fw_error_event(uint8_t FW_Error_Type,
                            uint8_t Data_Length,
                            uint8_t Data[]))
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b082      	sub	sp, #8
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	4603      	mov	r3, r0
 80087a4:	603a      	str	r2, [r7, #0]
 80087a6:	71fb      	strb	r3, [r7, #7]
 80087a8:	460b      	mov	r3, r1
 80087aa:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_fw_error_event\r\n");
 80087ac:	4803      	ldr	r0, [pc, #12]	@ (80087bc <aci_hal_fw_error_event+0x20>)
 80087ae:	f001 fe65 	bl	800a47c <puts>
}
 80087b2:	bf00      	nop
 80087b4:	3708      	adds	r7, #8
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}
 80087ba:	bf00      	nop
 80087bc:	0800c29c 	.word	0x0800c29c

080087c0 <hci_reset>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_reset(void)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b088      	sub	sp, #32
 80087c4:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80087c6:	2300      	movs	r3, #0
 80087c8:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80087ca:	f107 0308 	add.w	r3, r7, #8
 80087ce:	2218      	movs	r2, #24
 80087d0:	2100      	movs	r1, #0
 80087d2:	4618      	mov	r0, r3
 80087d4:	f001 ff32 	bl	800a63c <memset>
  rq.ogf = 0x03;
 80087d8:	2303      	movs	r3, #3
 80087da:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 80087dc:	2303      	movs	r3, #3
 80087de:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80087e0:	1dfb      	adds	r3, r7, #7
 80087e2:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80087e4:	2301      	movs	r3, #1
 80087e6:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 80087e8:	f107 0308 	add.w	r3, r7, #8
 80087ec:	2100      	movs	r1, #0
 80087ee:	4618      	mov	r0, r3
 80087f0:	f001 fa2c 	bl	8009c4c <hci_send_req>
 80087f4:	4603      	mov	r3, r0
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	da01      	bge.n	80087fe <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 80087fa:	23ff      	movs	r3, #255	@ 0xff
 80087fc:	e005      	b.n	800880a <hci_reset+0x4a>
  if (status) {
 80087fe:	79fb      	ldrb	r3, [r7, #7]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d001      	beq.n	8008808 <hci_reset+0x48>
    return status;
 8008804:	79fb      	ldrb	r3, [r7, #7]
 8008806:	e000      	b.n	800880a <hci_reset+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 8008808:	2300      	movs	r3, #0
}
 800880a:	4618      	mov	r0, r3
 800880c:	3720      	adds	r7, #32
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}

08008812 <hci_read_local_version_information>:
tBleStatus hci_read_local_version_information(uint8_t *HCI_Version,
                                              uint16_t *HCI_Revision,
                                              uint8_t *LMP_PAL_Version,
                                              uint16_t *Manufacturer_Name,
                                              uint16_t *LMP_PAL_Subversion)
{
 8008812:	b580      	push	{r7, lr}
 8008814:	b08e      	sub	sp, #56	@ 0x38
 8008816:	af00      	add	r7, sp, #0
 8008818:	60f8      	str	r0, [r7, #12]
 800881a:	60b9      	str	r1, [r7, #8]
 800881c:	607a      	str	r2, [r7, #4]
 800881e:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  hci_read_local_version_information_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008820:	f107 0314 	add.w	r3, r7, #20
 8008824:	2209      	movs	r2, #9
 8008826:	2100      	movs	r1, #0
 8008828:	4618      	mov	r0, r3
 800882a:	f001 ff07 	bl	800a63c <memset>
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800882e:	f107 0320 	add.w	r3, r7, #32
 8008832:	2218      	movs	r2, #24
 8008834:	2100      	movs	r1, #0
 8008836:	4618      	mov	r0, r3
 8008838:	f001 ff00 	bl	800a63c <memset>
  rq.ogf = 0x04;
 800883c:	2304      	movs	r3, #4
 800883e:	843b      	strh	r3, [r7, #32]
  rq.ocf = 0x001;
 8008840:	2301      	movs	r3, #1
 8008842:	847b      	strh	r3, [r7, #34]	@ 0x22
  rq.rparam = &resp;
 8008844:	f107 0314 	add.w	r3, r7, #20
 8008848:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rlen = sizeof(resp);
 800884a:	2309      	movs	r3, #9
 800884c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (hci_send_req(&rq, FALSE) < 0)
 800884e:	f107 0320 	add.w	r3, r7, #32
 8008852:	2100      	movs	r1, #0
 8008854:	4618      	mov	r0, r3
 8008856:	f001 f9f9 	bl	8009c4c <hci_send_req>
 800885a:	4603      	mov	r3, r0
 800885c:	2b00      	cmp	r3, #0
 800885e:	da01      	bge.n	8008864 <hci_read_local_version_information+0x52>
    return BLE_STATUS_TIMEOUT;
 8008860:	23ff      	movs	r3, #255	@ 0xff
 8008862:	e018      	b.n	8008896 <hci_read_local_version_information+0x84>
  if (resp.Status) {
 8008864:	7d3b      	ldrb	r3, [r7, #20]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d001      	beq.n	800886e <hci_read_local_version_information+0x5c>
    return resp.Status;
 800886a:	7d3b      	ldrb	r3, [r7, #20]
 800886c:	e013      	b.n	8008896 <hci_read_local_version_information+0x84>
  }
  *HCI_Version = btoh(resp.HCI_Version, 1);
 800886e:	7d7a      	ldrb	r2, [r7, #21]
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	701a      	strb	r2, [r3, #0]
  *HCI_Revision = btoh(resp.HCI_Revision, 2);
 8008874:	8afa      	ldrh	r2, [r7, #22]
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	801a      	strh	r2, [r3, #0]
  *LMP_PAL_Version = btoh(resp.LMP_PAL_Version, 1);
 800887a:	7e3a      	ldrb	r2, [r7, #24]
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	701a      	strb	r2, [r3, #0]
  *Manufacturer_Name = btoh(resp.Manufacturer_Name, 2);
 8008880:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 8008884:	b29a      	uxth	r2, r3
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	801a      	strh	r2, [r3, #0]
  *LMP_PAL_Subversion = btoh(resp.LMP_PAL_Subversion, 2);
 800888a:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 800888e:	b29a      	uxth	r2, r3
 8008890:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008892:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008894:	2300      	movs	r3, #0
}
 8008896:	4618      	mov	r0, r3
 8008898:	3738      	adds	r7, #56	@ 0x38
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}

0800889e <hci_le_set_scan_response_data>:
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_le_set_scan_response_data(uint8_t Scan_Response_Data_Length,
                                         uint8_t Scan_Response_Data[31])
{
 800889e:	b580      	push	{r7, lr}
 80088a0:	b0cc      	sub	sp, #304	@ 0x130
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	4602      	mov	r2, r0
 80088a6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80088aa:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80088ae:	6019      	str	r1, [r3, #0]
 80088b0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80088b4:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80088b8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  hci_le_set_scan_response_data_cp0 *cp0 = (hci_le_set_scan_response_data_cp0*)(cmd_buffer);
 80088ba:	f107 030c 	add.w	r3, r7, #12
 80088be:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80088c2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80088c6:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 80088ca:	2200      	movs	r2, #0
 80088cc:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 80088ce:	2300      	movs	r3, #0
 80088d0:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Scan_Response_Data_Length = htob(Scan_Response_Data_Length, 1);
 80088d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80088d8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80088dc:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80088e0:	7812      	ldrb	r2, [r2, #0]
 80088e2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80088e4:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 80088e8:	3301      	adds	r3, #1
 80088ea:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  /* FIX: check on Scan_Response_Data introduced to fix issue in projects for Cortex-M33 */
  if (Scan_Response_Data != NULL) {
 80088ee:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80088f2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d00a      	beq.n	8008912 <hci_le_set_scan_response_data+0x74>
    BLUENRG_memcpy((void *) &cp0->Scan_Response_Data, (const void *) Scan_Response_Data, 31);
 80088fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008900:	1c58      	adds	r0, r3, #1
 8008902:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008906:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800890a:	221f      	movs	r2, #31
 800890c:	6819      	ldr	r1, [r3, #0]
 800890e:	f001 ff10 	bl	800a732 <memcpy>
  }
  index_input += 31;
 8008912:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8008916:	331f      	adds	r3, #31
 8008918:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800891c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008920:	2218      	movs	r2, #24
 8008922:	2100      	movs	r1, #0
 8008924:	4618      	mov	r0, r3
 8008926:	f001 fe89 	bl	800a63c <memset>
  rq.ogf = 0x08;
 800892a:	2308      	movs	r3, #8
 800892c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x009;
 8008930:	2309      	movs	r3, #9
 8008932:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8008936:	f107 030c 	add.w	r3, r7, #12
 800893a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800893e:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8008942:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8008946:	f107 030b 	add.w	r3, r7, #11
 800894a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800894e:	2301      	movs	r3, #1
 8008950:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8008954:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008958:	2100      	movs	r1, #0
 800895a:	4618      	mov	r0, r3
 800895c:	f001 f976 	bl	8009c4c <hci_send_req>
 8008960:	4603      	mov	r3, r0
 8008962:	2b00      	cmp	r3, #0
 8008964:	da01      	bge.n	800896a <hci_le_set_scan_response_data+0xcc>
    return BLE_STATUS_TIMEOUT;
 8008966:	23ff      	movs	r3, #255	@ 0xff
 8008968:	e00d      	b.n	8008986 <hci_le_set_scan_response_data+0xe8>
  if (status) {
 800896a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800896e:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 8008972:	781b      	ldrb	r3, [r3, #0]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d005      	beq.n	8008984 <hci_le_set_scan_response_data+0xe6>
    return status;
 8008978:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800897c:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 8008980:	781b      	ldrb	r3, [r3, #0]
 8008982:	e000      	b.n	8008986 <hci_le_set_scan_response_data+0xe8>
  }
  return BLE_STATUS_SUCCESS;
 8008984:	2300      	movs	r3, #0
}
 8008986:	4618      	mov	r0, r3
 8008988:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}

08008990 <aci_gap_set_discoverable>:
                                    uint8_t Local_Name[],
                                    uint8_t Service_Uuid_length,
                                    uint8_t Service_Uuid_List[],
                                    uint16_t Slave_Conn_Interval_Min,
                                    uint16_t Slave_Conn_Interval_Max)
{
 8008990:	b5b0      	push	{r4, r5, r7, lr}
 8008992:	b0ce      	sub	sp, #312	@ 0x138
 8008994:	af00      	add	r7, sp, #0
 8008996:	4605      	mov	r5, r0
 8008998:	460c      	mov	r4, r1
 800899a:	4610      	mov	r0, r2
 800899c:	4619      	mov	r1, r3
 800899e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80089a2:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80089a6:	462a      	mov	r2, r5
 80089a8:	701a      	strb	r2, [r3, #0]
 80089aa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80089ae:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80089b2:	4622      	mov	r2, r4
 80089b4:	801a      	strh	r2, [r3, #0]
 80089b6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80089ba:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 80089be:	4602      	mov	r2, r0
 80089c0:	801a      	strh	r2, [r3, #0]
 80089c2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80089c6:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 80089ca:	460a      	mov	r2, r1
 80089cc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 80089ce:	f107 030c 	add.w	r3, r7, #12
 80089d2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 80089d6:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 80089da:	3308      	adds	r3, #8
 80089dc:	f107 020c 	add.w	r2, r7, #12
 80089e0:	4413      	add	r3, r2
 80089e2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 80089e6:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 80089ea:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 80089ee:	4413      	add	r3, r2
 80089f0:	3309      	adds	r3, #9
 80089f2:	f107 020c 	add.w	r2, r7, #12
 80089f6:	4413      	add	r3, r2
 80089f8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80089fc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008a00:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 8008a04:	2200      	movs	r2, #0
 8008a06:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Advertising_Type = htob(Advertising_Type, 1);
 8008a0e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008a12:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8008a16:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8008a1a:	7812      	ldrb	r2, [r2, #0]
 8008a1c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008a1e:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8008a22:	3301      	adds	r3, #1
 8008a24:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Advertising_Interval_Min = htob(Advertising_Interval_Min, 2);
 8008a28:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008a2c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8008a30:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8008a34:	8812      	ldrh	r2, [r2, #0]
 8008a36:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8008a3a:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8008a3e:	3302      	adds	r3, #2
 8008a40:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Advertising_Interval_Max = htob(Advertising_Interval_Max, 2);
 8008a44:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008a48:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8008a4c:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 8008a50:	8812      	ldrh	r2, [r2, #0]
 8008a52:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8008a56:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8008a5a:	3302      	adds	r3, #2
 8008a5c:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 8008a60:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008a64:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8008a68:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8008a6c:	7812      	ldrb	r2, [r2, #0]
 8008a6e:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8008a70:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8008a74:	3301      	adds	r3, #1
 8008a76:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Advertising_Filter_Policy = htob(Advertising_Filter_Policy, 1);
 8008a7a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008a7e:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8008a82:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8008a84:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8008a88:	3301      	adds	r3, #1
 8008a8a:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Local_Name_Length = htob(Local_Name_Length, 1);
 8008a8e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008a92:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8008a96:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8008a98:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8008a9c:	3301      	adds	r3, #1
 8008a9e:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length*sizeof(uint8_t));
 8008aa2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008aa6:	3308      	adds	r3, #8
 8008aa8:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8008aac:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f001 fe3e 	bl	800a732 <memcpy>
    index_input += Local_Name_Length*sizeof(uint8_t);
 8008ab6:	f897 212b 	ldrb.w	r2, [r7, #299]	@ 0x12b
 8008aba:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8008abe:	4413      	add	r3, r2
 8008ac0:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
    {
      cp1->Service_Uuid_length = htob(Service_Uuid_length, 1);
 8008ac4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008ac8:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8008acc:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8008ace:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8008ad2:	3301      	adds	r3, #1
 8008ad4:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
    BLUENRG_memcpy((void *) &cp1->Service_Uuid_List, (const void *) Service_Uuid_List, Service_Uuid_length*sizeof(uint8_t));
 8008ad8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008adc:	3301      	adds	r3, #1
 8008ade:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8008ae2:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f001 fe23 	bl	800a732 <memcpy>
    index_input += Service_Uuid_length*sizeof(uint8_t);
 8008aec:	f897 212b 	ldrb.w	r2, [r7, #299]	@ 0x12b
 8008af0:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8008af4:	4413      	add	r3, r2
 8008af6:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
    {
      cp2->Slave_Conn_Interval_Min = htob(Slave_Conn_Interval_Min, 2);
 8008afa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008afe:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 8008b02:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8008b04:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8008b08:	3302      	adds	r3, #2
 8008b0a:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
    {
      cp2->Slave_Conn_Interval_Max = htob(Slave_Conn_Interval_Max, 2);
 8008b0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008b12:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 8008b16:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8008b18:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8008b1c:	3302      	adds	r3, #2
 8008b1e:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008b22:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008b26:	2218      	movs	r2, #24
 8008b28:	2100      	movs	r1, #0
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f001 fd86 	bl	800a63c <memset>
  rq.ogf = 0x3f;
 8008b30:	233f      	movs	r3, #63	@ 0x3f
 8008b32:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 8008b36:	2383      	movs	r3, #131	@ 0x83
 8008b38:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8008b3c:	f107 030c 	add.w	r3, r7, #12
 8008b40:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8008b44:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8008b48:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8008b4c:	f107 030b 	add.w	r3, r7, #11
 8008b50:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8008b54:	2301      	movs	r3, #1
 8008b56:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8008b5a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008b5e:	2100      	movs	r1, #0
 8008b60:	4618      	mov	r0, r3
 8008b62:	f001 f873 	bl	8009c4c <hci_send_req>
 8008b66:	4603      	mov	r3, r0
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	da01      	bge.n	8008b70 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8008b6c:	23ff      	movs	r3, #255	@ 0xff
 8008b6e:	e00d      	b.n	8008b8c <aci_gap_set_discoverable+0x1fc>
  if (status) {
 8008b70:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008b74:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 8008b78:	781b      	ldrb	r3, [r3, #0]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d005      	beq.n	8008b8a <aci_gap_set_discoverable+0x1fa>
    return status;
 8008b7e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008b82:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 8008b86:	781b      	ldrb	r3, [r3, #0]
 8008b88:	e000      	b.n	8008b8c <aci_gap_set_discoverable+0x1fc>
  }
  return BLE_STATUS_SUCCESS;
 8008b8a:	2300      	movs	r3, #0
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bdb0      	pop	{r4, r5, r7, pc}

08008b96 <aci_gap_set_authentication_requirement>:
                                                  uint8_t Min_Encryption_Key_Size,
                                                  uint8_t Max_Encryption_Key_Size,
                                                  uint8_t Use_Fixed_Pin,
                                                  uint32_t Fixed_Pin,
                                                  uint8_t Identity_Address_Type)
{
 8008b96:	b5b0      	push	{r4, r5, r7, lr}
 8008b98:	b0cc      	sub	sp, #304	@ 0x130
 8008b9a:	af00      	add	r7, sp, #0
 8008b9c:	4605      	mov	r5, r0
 8008b9e:	460c      	mov	r4, r1
 8008ba0:	4610      	mov	r0, r2
 8008ba2:	4619      	mov	r1, r3
 8008ba4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008ba8:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8008bac:	462a      	mov	r2, r5
 8008bae:	701a      	strb	r2, [r3, #0]
 8008bb0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008bb4:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8008bb8:	4622      	mov	r2, r4
 8008bba:	701a      	strb	r2, [r3, #0]
 8008bbc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008bc0:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8008bc4:	4602      	mov	r2, r0
 8008bc6:	701a      	strb	r2, [r3, #0]
 8008bc8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008bcc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008bd0:	460a      	mov	r2, r1
 8008bd2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8008bd4:	f107 030c 	add.w	r3, r7, #12
 8008bd8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8008bdc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008be0:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 8008be4:	2200      	movs	r2, #0
 8008be6:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8008be8:	2300      	movs	r3, #0
 8008bea:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Bonding_Mode = htob(Bonding_Mode, 1);
 8008bee:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008bf2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008bf6:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8008bfa:	7812      	ldrb	r2, [r2, #0]
 8008bfc:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008bfe:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8008c02:	3301      	adds	r3, #1
 8008c04:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->MITM_Mode = htob(MITM_Mode, 1);
 8008c08:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008c0c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008c10:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8008c14:	7812      	ldrb	r2, [r2, #0]
 8008c16:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008c18:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8008c1c:	3301      	adds	r3, #1
 8008c1e:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->SC_Support = htob(SC_Support, 1);
 8008c22:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008c26:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008c2a:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8008c2e:	7812      	ldrb	r2, [r2, #0]
 8008c30:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008c32:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8008c36:	3301      	adds	r3, #1
 8008c38:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->KeyPress_Notification_Support = htob(KeyPress_Notification_Support, 1);
 8008c3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008c40:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008c44:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8008c48:	7812      	ldrb	r2, [r2, #0]
 8008c4a:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8008c4c:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8008c50:	3301      	adds	r3, #1
 8008c52:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Min_Encryption_Key_Size = htob(Min_Encryption_Key_Size, 1);
 8008c56:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008c5a:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 8008c5e:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8008c60:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8008c64:	3301      	adds	r3, #1
 8008c66:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Max_Encryption_Key_Size = htob(Max_Encryption_Key_Size, 1);
 8008c6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008c6e:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 8008c72:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8008c74:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8008c78:	3301      	adds	r3, #1
 8008c7a:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Use_Fixed_Pin = htob(Use_Fixed_Pin, 1);
 8008c7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008c82:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8008c86:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8008c88:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8008c8c:	3301      	adds	r3, #1
 8008c8e:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Fixed_Pin = htob(Fixed_Pin, 4);
 8008c92:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008c96:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8008c9a:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8008c9e:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8008ca2:	3304      	adds	r3, #4
 8008ca4:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Identity_Address_Type = htob(Identity_Address_Type, 1);
 8008ca8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008cac:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8008cb0:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8008cb2:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8008cb6:	3301      	adds	r3, #1
 8008cb8:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008cbc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008cc0:	2218      	movs	r2, #24
 8008cc2:	2100      	movs	r1, #0
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	f001 fcb9 	bl	800a63c <memset>
  rq.ogf = 0x3f;
 8008cca:	233f      	movs	r3, #63	@ 0x3f
 8008ccc:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 8008cd0:	2386      	movs	r3, #134	@ 0x86
 8008cd2:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8008cd6:	f107 030c 	add.w	r3, r7, #12
 8008cda:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8008cde:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8008ce2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8008ce6:	f107 030b 	add.w	r3, r7, #11
 8008cea:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8008cee:	2301      	movs	r3, #1
 8008cf0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8008cf4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008cf8:	2100      	movs	r1, #0
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f000 ffa6 	bl	8009c4c <hci_send_req>
 8008d00:	4603      	mov	r3, r0
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	da01      	bge.n	8008d0a <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8008d06:	23ff      	movs	r3, #255	@ 0xff
 8008d08:	e00d      	b.n	8008d26 <aci_gap_set_authentication_requirement+0x190>
  if (status) {
 8008d0a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008d0e:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 8008d12:	781b      	ldrb	r3, [r3, #0]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d005      	beq.n	8008d24 <aci_gap_set_authentication_requirement+0x18e>
    return status;
 8008d18:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008d1c:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 8008d20:	781b      	ldrb	r3, [r3, #0]
 8008d22:	e000      	b.n	8008d26 <aci_gap_set_authentication_requirement+0x190>
  }
  return BLE_STATUS_SUCCESS;
 8008d24:	2300      	movs	r3, #0
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bdb0      	pop	{r4, r5, r7, pc}

08008d30 <aci_gap_pass_key_resp>:
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_gap_pass_key_resp(uint16_t Connection_Handle,
                                 uint32_t Pass_Key)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b0cc      	sub	sp, #304	@ 0x130
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	4602      	mov	r2, r0
 8008d38:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008d3c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8008d40:	6019      	str	r1, [r3, #0]
 8008d42:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008d46:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8008d4a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8008d4c:	f107 030c 	add.w	r3, r7, #12
 8008d50:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8008d54:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008d58:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8008d60:	2300      	movs	r3, #0
 8008d62:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 8008d66:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008d6a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008d6e:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8008d72:	8812      	ldrh	r2, [r2, #0]
 8008d74:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008d76:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8008d7a:	3302      	adds	r3, #2
 8008d7c:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Pass_Key = htob(Pass_Key, 4);
 8008d80:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008d84:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008d88:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8008d8c:	6812      	ldr	r2, [r2, #0]
 8008d8e:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 8008d92:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8008d96:	3304      	adds	r3, #4
 8008d98:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008d9c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008da0:	2218      	movs	r2, #24
 8008da2:	2100      	movs	r1, #0
 8008da4:	4618      	mov	r0, r3
 8008da6:	f001 fc49 	bl	800a63c <memset>
  rq.ogf = 0x3f;
 8008daa:	233f      	movs	r3, #63	@ 0x3f
 8008dac:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 8008db0:	2388      	movs	r3, #136	@ 0x88
 8008db2:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8008db6:	f107 030c 	add.w	r3, r7, #12
 8008dba:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8008dbe:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8008dc2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8008dc6:	f107 030b 	add.w	r3, r7, #11
 8008dca:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8008dce:	2301      	movs	r3, #1
 8008dd0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8008dd4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008dd8:	2100      	movs	r1, #0
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f000 ff36 	bl	8009c4c <hci_send_req>
 8008de0:	4603      	mov	r3, r0
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	da01      	bge.n	8008dea <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 8008de6:	23ff      	movs	r3, #255	@ 0xff
 8008de8:	e00d      	b.n	8008e06 <aci_gap_pass_key_resp+0xd6>
  if (status) {
 8008dea:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008dee:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 8008df2:	781b      	ldrb	r3, [r3, #0]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d005      	beq.n	8008e04 <aci_gap_pass_key_resp+0xd4>
    return status;
 8008df8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008dfc:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 8008e00:	781b      	ldrb	r3, [r3, #0]
 8008e02:	e000      	b.n	8008e06 <aci_gap_pass_key_resp+0xd6>
  }
  return BLE_STATUS_SUCCESS;
 8008e04:	2300      	movs	r3, #0
}
 8008e06:	4618      	mov	r0, r3
 8008e08:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}

08008e10 <aci_gap_init>:
                        uint8_t privacy_enabled,
                        uint8_t device_name_char_len,
                        uint16_t *Service_Handle,
                        uint16_t *Dev_Name_Char_Handle,
                        uint16_t *Appearance_Char_Handle)
{
 8008e10:	b590      	push	{r4, r7, lr}
 8008e12:	b0cf      	sub	sp, #316	@ 0x13c
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	4604      	mov	r4, r0
 8008e18:	4608      	mov	r0, r1
 8008e1a:	4611      	mov	r1, r2
 8008e1c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8008e20:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8008e24:	6013      	str	r3, [r2, #0]
 8008e26:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008e2a:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8008e2e:	4622      	mov	r2, r4
 8008e30:	701a      	strb	r2, [r3, #0]
 8008e32:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008e36:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8008e3a:	4602      	mov	r2, r0
 8008e3c:	701a      	strb	r2, [r3, #0]
 8008e3e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008e42:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8008e46:	460a      	mov	r2, r1
 8008e48:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8008e4a:	f107 0314 	add.w	r3, r7, #20
 8008e4e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_init_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008e52:	f107 030c 	add.w	r3, r7, #12
 8008e56:	2207      	movs	r2, #7
 8008e58:	2100      	movs	r1, #0
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f001 fbee 	bl	800a63c <memset>
  uint8_t index_input = 0;
 8008e60:	2300      	movs	r3, #0
 8008e62:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
  cp0->Role = htob(Role, 1);
 8008e66:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008e6a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8008e6e:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8008e72:	7812      	ldrb	r2, [r2, #0]
 8008e74:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008e76:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8008e7a:	3301      	adds	r3, #1
 8008e7c:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
  cp0->privacy_enabled = htob(privacy_enabled, 1);
 8008e80:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008e84:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8008e88:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8008e8c:	7812      	ldrb	r2, [r2, #0]
 8008e8e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008e90:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8008e94:	3301      	adds	r3, #1
 8008e96:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
  cp0->device_name_char_len = htob(device_name_char_len, 1);
 8008e9a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008e9e:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8008ea2:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8008ea6:	7812      	ldrb	r2, [r2, #0]
 8008ea8:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008eaa:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8008eae:	3301      	adds	r3, #1
 8008eb0:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008eb4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8008eb8:	2218      	movs	r2, #24
 8008eba:	2100      	movs	r1, #0
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f001 fbbd 	bl	800a63c <memset>
  rq.ogf = 0x3f;
 8008ec2:	233f      	movs	r3, #63	@ 0x3f
 8008ec4:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x08a;
 8008ec8:	238a      	movs	r3, #138	@ 0x8a
 8008eca:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 8008ece:	f107 0314 	add.w	r3, r7, #20
 8008ed2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 8008ed6:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8008eda:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 8008ede:	f107 030c 	add.w	r3, r7, #12
 8008ee2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 8008ee6:	2307      	movs	r3, #7
 8008ee8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 8008eec:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8008ef0:	2100      	movs	r1, #0
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f000 feaa 	bl	8009c4c <hci_send_req>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	da01      	bge.n	8008f02 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8008efe:	23ff      	movs	r3, #255	@ 0xff
 8008f00:	e02e      	b.n	8008f60 <aci_gap_init+0x150>
  if (resp.Status) {
 8008f02:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008f06:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008f0a:	781b      	ldrb	r3, [r3, #0]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d005      	beq.n	8008f1c <aci_gap_init+0x10c>
    return resp.Status;
 8008f10:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008f14:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008f18:	781b      	ldrb	r3, [r3, #0]
 8008f1a:	e021      	b.n	8008f60 <aci_gap_init+0x150>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 8008f1c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008f20:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008f24:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008f28:	b29a      	uxth	r2, r3
 8008f2a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008f2e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 8008f36:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008f3a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008f3e:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8008f42:	b29a      	uxth	r2, r3
 8008f44:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8008f48:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = btoh(resp.Appearance_Char_Handle, 2);
 8008f4a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008f4e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008f52:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8008f56:	b29a      	uxth	r2, r3
 8008f58:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008f5c:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008f5e:	2300      	movs	r3, #0
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd90      	pop	{r4, r7, pc}

08008f6a <aci_gap_slave_security_req>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_gap_slave_security_req(uint16_t Connection_Handle)
{
 8008f6a:	b580      	push	{r7, lr}
 8008f6c:	b0cc      	sub	sp, #304	@ 0x130
 8008f6e:	af00      	add	r7, sp, #0
 8008f70:	4602      	mov	r2, r0
 8008f72:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008f76:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8008f7a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_slave_security_req_cp0 *cp0 = (aci_gap_slave_security_req_cp0*)(cmd_buffer);
 8008f7c:	f107 030c 	add.w	r3, r7, #12
 8008f80:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8008f84:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008f88:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8008f90:	2300      	movs	r3, #0
 8008f92:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 8008f96:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008f9a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008f9e:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8008fa2:	8812      	ldrh	r2, [r2, #0]
 8008fa4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008fa6:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8008faa:	3302      	adds	r3, #2
 8008fac:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008fb0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008fb4:	2218      	movs	r2, #24
 8008fb6:	2100      	movs	r1, #0
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f001 fb3f 	bl	800a63c <memset>
  rq.ogf = 0x3f;
 8008fbe:	233f      	movs	r3, #63	@ 0x3f
 8008fc0:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08d;
 8008fc4:	238d      	movs	r3, #141	@ 0x8d
 8008fc6:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.event = 0x0F;
 8008fca:	230f      	movs	r3, #15
 8008fcc:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  rq.cparam = cmd_buffer;
 8008fd0:	f107 030c 	add.w	r3, r7, #12
 8008fd4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8008fd8:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8008fdc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8008fe0:	f107 030b 	add.w	r3, r7, #11
 8008fe4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8008fe8:	2301      	movs	r3, #1
 8008fea:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8008fee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008ff2:	2100      	movs	r1, #0
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f000 fe29 	bl	8009c4c <hci_send_req>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	da01      	bge.n	8009004 <aci_gap_slave_security_req+0x9a>
    return BLE_STATUS_TIMEOUT;
 8009000:	23ff      	movs	r3, #255	@ 0xff
 8009002:	e00d      	b.n	8009020 <aci_gap_slave_security_req+0xb6>
  if (status) {
 8009004:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009008:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 800900c:	781b      	ldrb	r3, [r3, #0]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d005      	beq.n	800901e <aci_gap_slave_security_req+0xb4>
    return status;
 8009012:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009016:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 800901a:	781b      	ldrb	r3, [r3, #0]
 800901c:	e000      	b.n	8009020 <aci_gap_slave_security_req+0xb6>
  }
  return BLE_STATUS_SUCCESS;
 800901e:	2300      	movs	r3, #0
}
 8009020:	4618      	mov	r0, r3
 8009022:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}

0800902a <aci_gap_update_adv_data>:
tBleStatus aci_gap_update_adv_data(uint8_t AdvDataLen,
                                   uint8_t AdvData[])
{
 800902a:	b580      	push	{r7, lr}
 800902c:	b0cc      	sub	sp, #304	@ 0x130
 800902e:	af00      	add	r7, sp, #0
 8009030:	4602      	mov	r2, r0
 8009032:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009036:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800903a:	6019      	str	r1, [r3, #0]
 800903c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009040:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8009044:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8009046:	f107 030c 	add.w	r3, r7, #12
 800904a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800904e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009052:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 8009056:	2200      	movs	r2, #0
 8009058:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800905a:	2300      	movs	r3, #0
 800905c:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->AdvDataLen = htob(AdvDataLen, 1);
 8009060:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009064:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009068:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800906c:	7812      	ldrb	r2, [r2, #0]
 800906e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009070:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8009074:	3301      	adds	r3, #1
 8009076:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->AdvData, (const void *) AdvData, AdvDataLen*sizeof(uint8_t));
 800907a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800907e:	1c58      	adds	r0, r3, #1
 8009080:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009084:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8009088:	781a      	ldrb	r2, [r3, #0]
 800908a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800908e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8009092:	6819      	ldr	r1, [r3, #0]
 8009094:	f001 fb4d 	bl	800a732 <memcpy>
    index_input += AdvDataLen*sizeof(uint8_t);
 8009098:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800909c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80090a0:	f897 212b 	ldrb.w	r2, [r7, #299]	@ 0x12b
 80090a4:	781b      	ldrb	r3, [r3, #0]
 80090a6:	4413      	add	r3, r2
 80090a8:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80090ac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80090b0:	2218      	movs	r2, #24
 80090b2:	2100      	movs	r1, #0
 80090b4:	4618      	mov	r0, r3
 80090b6:	f001 fac1 	bl	800a63c <memset>
  rq.ogf = 0x3f;
 80090ba:	233f      	movs	r3, #63	@ 0x3f
 80090bc:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 80090c0:	238e      	movs	r3, #142	@ 0x8e
 80090c2:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80090c6:	f107 030c 	add.w	r3, r7, #12
 80090ca:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80090ce:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 80090d2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80090d6:	f107 030b 	add.w	r3, r7, #11
 80090da:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80090de:	2301      	movs	r3, #1
 80090e0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 80090e4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80090e8:	2100      	movs	r1, #0
 80090ea:	4618      	mov	r0, r3
 80090ec:	f000 fdae 	bl	8009c4c <hci_send_req>
 80090f0:	4603      	mov	r3, r0
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	da01      	bge.n	80090fa <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 80090f6:	23ff      	movs	r3, #255	@ 0xff
 80090f8:	e00d      	b.n	8009116 <aci_gap_update_adv_data+0xec>
  if (status) {
 80090fa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80090fe:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 8009102:	781b      	ldrb	r3, [r3, #0]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d005      	beq.n	8009114 <aci_gap_update_adv_data+0xea>
    return status;
 8009108:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800910c:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 8009110:	781b      	ldrb	r3, [r3, #0]
 8009112:	e000      	b.n	8009116 <aci_gap_update_adv_data+0xec>
  }
  return BLE_STATUS_SUCCESS;
 8009114:	2300      	movs	r3, #0
}
 8009116:	4618      	mov	r0, r3
 8009118:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}

08009120 <aci_gatt_init>:
  ******************************************************************************
  */
#include "ble_types.h"
#include "bluenrg1_gatt_aci.h"
tBleStatus aci_gatt_init(void)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b088      	sub	sp, #32
 8009124:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009126:	2300      	movs	r3, #0
 8009128:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800912a:	f107 0308 	add.w	r3, r7, #8
 800912e:	2218      	movs	r2, #24
 8009130:	2100      	movs	r1, #0
 8009132:	4618      	mov	r0, r3
 8009134:	f001 fa82 	bl	800a63c <memset>
  rq.ogf = 0x3f;
 8009138:	233f      	movs	r3, #63	@ 0x3f
 800913a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800913c:	f240 1301 	movw	r3, #257	@ 0x101
 8009140:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009142:	1dfb      	adds	r3, r7, #7
 8009144:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009146:	2301      	movs	r3, #1
 8009148:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800914a:	f107 0308 	add.w	r3, r7, #8
 800914e:	2100      	movs	r1, #0
 8009150:	4618      	mov	r0, r3
 8009152:	f000 fd7b 	bl	8009c4c <hci_send_req>
 8009156:	4603      	mov	r3, r0
 8009158:	2b00      	cmp	r3, #0
 800915a:	da01      	bge.n	8009160 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800915c:	23ff      	movs	r3, #255	@ 0xff
 800915e:	e005      	b.n	800916c <aci_gatt_init+0x4c>
  if (status) {
 8009160:	79fb      	ldrb	r3, [r7, #7]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d001      	beq.n	800916a <aci_gatt_init+0x4a>
    return status;
 8009166:	79fb      	ldrb	r3, [r7, #7]
 8009168:	e000      	b.n	800916c <aci_gatt_init+0x4c>
  }
  return BLE_STATUS_SUCCESS;
 800916a:	2300      	movs	r3, #0
}
 800916c:	4618      	mov	r0, r3
 800916e:	3720      	adds	r7, #32
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}

08009174 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service(uint8_t Service_UUID_Type,
                                Service_UUID_t *Service_UUID,
                                uint8_t Service_Type,
                                uint8_t Max_Attribute_Records,
                                uint16_t *Service_Handle)
{
 8009174:	b590      	push	{r4, r7, lr}
 8009176:	b0cf      	sub	sp, #316	@ 0x13c
 8009178:	af00      	add	r7, sp, #0
 800917a:	4604      	mov	r4, r0
 800917c:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8009180:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 8009184:	6001      	str	r1, [r0, #0]
 8009186:	4610      	mov	r0, r2
 8009188:	4619      	mov	r1, r3
 800918a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800918e:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8009192:	4622      	mov	r2, r4
 8009194:	701a      	strb	r2, [r3, #0]
 8009196:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800919a:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800919e:	4602      	mov	r2, r0
 80091a0:	701a      	strb	r2, [r3, #0]
 80091a2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80091a6:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 80091aa:	460a      	mov	r2, r1
 80091ac:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 80091ae:	f107 030c 	add.w	r3, r7, #12
 80091b2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 80091b6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80091ba:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80091be:	781b      	ldrb	r3, [r3, #0]
 80091c0:	2b01      	cmp	r3, #1
 80091c2:	d00a      	beq.n	80091da <aci_gatt_add_service+0x66>
 80091c4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80091c8:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80091cc:	781b      	ldrb	r3, [r3, #0]
 80091ce:	2b02      	cmp	r3, #2
 80091d0:	d101      	bne.n	80091d6 <aci_gatt_add_service+0x62>
 80091d2:	2311      	movs	r3, #17
 80091d4:	e002      	b.n	80091dc <aci_gatt_add_service+0x68>
 80091d6:	2301      	movs	r3, #1
 80091d8:	e000      	b.n	80091dc <aci_gatt_add_service+0x68>
 80091da:	2303      	movs	r3, #3
 80091dc:	f107 020c 	add.w	r2, r7, #12
 80091e0:	4413      	add	r3, r2
 80091e2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80091e6:	f107 0308 	add.w	r3, r7, #8
 80091ea:	2203      	movs	r2, #3
 80091ec:	2100      	movs	r1, #0
 80091ee:	4618      	mov	r0, r3
 80091f0:	f001 fa24 	bl	800a63c <memset>
  uint8_t index_input = 0;
 80091f4:	2300      	movs	r3, #0
 80091f6:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 80091fa:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80091fe:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8009202:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8009206:	7812      	ldrb	r2, [r2, #0]
 8009208:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800920a:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800920e:	3301      	adds	r3, #1
 8009210:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  /* var_len_data input */
  {
    uint8_t size;
    switch (Service_UUID_Type) {
 8009214:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009218:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800921c:	781b      	ldrb	r3, [r3, #0]
 800921e:	2b01      	cmp	r3, #1
 8009220:	d002      	beq.n	8009228 <aci_gatt_add_service+0xb4>
 8009222:	2b02      	cmp	r3, #2
 8009224:	d004      	beq.n	8009230 <aci_gatt_add_service+0xbc>
 8009226:	e007      	b.n	8009238 <aci_gatt_add_service+0xc4>
      case 1: size = 2; break;
 8009228:	2302      	movs	r3, #2
 800922a:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800922e:	e005      	b.n	800923c <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8009230:	2310      	movs	r3, #16
 8009232:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8009236:	e001      	b.n	800923c <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8009238:	2347      	movs	r3, #71	@ 0x47
 800923a:	e06c      	b.n	8009316 <aci_gatt_add_service+0x1a2>
    }
    BLUENRG_memcpy((void *) &cp0->Service_UUID, (const void *) Service_UUID, size);
 800923c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009240:	1c58      	adds	r0, r3, #1
 8009242:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 8009246:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800924a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800924e:	6819      	ldr	r1, [r3, #0]
 8009250:	f001 fa6f 	bl	800a732 <memcpy>
    index_input += size;
 8009254:	f897 212b 	ldrb.w	r2, [r7, #299]	@ 0x12b
 8009258:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 800925c:	4413      	add	r3, r2
 800925e:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
    {
      cp1->Service_Type = htob(Service_Type, 1);
 8009262:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009266:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800926a:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800926e:	7812      	ldrb	r2, [r2, #0]
 8009270:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8009272:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8009276:	3301      	adds	r3, #1
 8009278:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
    {
      cp1->Max_Attribute_Records = htob(Max_Attribute_Records, 1);
 800927c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009280:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8009284:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8009288:	7812      	ldrb	r2, [r2, #0]
 800928a:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800928c:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8009290:	3301      	adds	r3, #1
 8009292:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009296:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800929a:	2218      	movs	r2, #24
 800929c:	2100      	movs	r1, #0
 800929e:	4618      	mov	r0, r3
 80092a0:	f001 f9cc 	bl	800a63c <memset>
  rq.ogf = 0x3f;
 80092a4:	233f      	movs	r3, #63	@ 0x3f
 80092a6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 80092aa:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80092ae:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80092b2:	f107 030c 	add.w	r3, r7, #12
 80092b6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80092ba:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 80092be:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 80092c2:	f107 0308 	add.w	r3, r7, #8
 80092c6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 80092ca:	2303      	movs	r3, #3
 80092cc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 80092d0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80092d4:	2100      	movs	r1, #0
 80092d6:	4618      	mov	r0, r3
 80092d8:	f000 fcb8 	bl	8009c4c <hci_send_req>
 80092dc:	4603      	mov	r3, r0
 80092de:	2b00      	cmp	r3, #0
 80092e0:	da01      	bge.n	80092e6 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 80092e2:	23ff      	movs	r3, #255	@ 0xff
 80092e4:	e017      	b.n	8009316 <aci_gatt_add_service+0x1a2>
  if (resp.Status) {
 80092e6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80092ea:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80092ee:	781b      	ldrb	r3, [r3, #0]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d005      	beq.n	8009300 <aci_gatt_add_service+0x18c>
    return resp.Status;
 80092f4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80092f8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80092fc:	781b      	ldrb	r3, [r3, #0]
 80092fe:	e00a      	b.n	8009316 <aci_gatt_add_service+0x1a2>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 8009300:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009304:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8009308:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800930c:	b29a      	uxth	r2, r3
 800930e:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8009312:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8009314:	2300      	movs	r3, #0
}
 8009316:	4618      	mov	r0, r3
 8009318:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 800931c:	46bd      	mov	sp, r7
 800931e:	bd90      	pop	{r4, r7, pc}

08009320 <aci_gatt_add_char>:
                             uint8_t Security_Permissions,
                             uint8_t GATT_Evt_Mask,
                             uint8_t Enc_Key_Size,
                             uint8_t Is_Variable,
                             uint16_t *Char_Handle)
{
 8009320:	b590      	push	{r4, r7, lr}
 8009322:	b0d1      	sub	sp, #324	@ 0x144
 8009324:	af00      	add	r7, sp, #0
 8009326:	4604      	mov	r4, r0
 8009328:	4608      	mov	r0, r1
 800932a:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 800932e:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8009332:	600a      	str	r2, [r1, #0]
 8009334:	4619      	mov	r1, r3
 8009336:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800933a:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800933e:	4622      	mov	r2, r4
 8009340:	801a      	strh	r2, [r3, #0]
 8009342:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009346:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800934a:	4602      	mov	r2, r0
 800934c:	701a      	strb	r2, [r3, #0]
 800934e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009352:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 8009356:	460a      	mov	r2, r1
 8009358:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800935a:	f107 0314 	add.w	r3, r7, #20
 800935e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8009362:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009366:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800936a:	781b      	ldrb	r3, [r3, #0]
 800936c:	2b01      	cmp	r3, #1
 800936e:	d00a      	beq.n	8009386 <aci_gatt_add_char+0x66>
 8009370:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009374:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8009378:	781b      	ldrb	r3, [r3, #0]
 800937a:	2b02      	cmp	r3, #2
 800937c:	d101      	bne.n	8009382 <aci_gatt_add_char+0x62>
 800937e:	2313      	movs	r3, #19
 8009380:	e002      	b.n	8009388 <aci_gatt_add_char+0x68>
 8009382:	2303      	movs	r3, #3
 8009384:	e000      	b.n	8009388 <aci_gatt_add_char+0x68>
 8009386:	2305      	movs	r3, #5
 8009388:	f107 0214 	add.w	r2, r7, #20
 800938c:	4413      	add	r3, r2
 800938e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8009392:	f107 0310 	add.w	r3, r7, #16
 8009396:	2203      	movs	r2, #3
 8009398:	2100      	movs	r1, #0
 800939a:	4618      	mov	r0, r3
 800939c:	f001 f94e 	bl	800a63c <memset>
  uint8_t index_input = 0;
 80093a0:	2300      	movs	r3, #0
 80093a2:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
  cp0->Service_Handle = htob(Service_Handle, 2);
 80093a6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80093aa:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80093ae:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 80093b2:	8812      	ldrh	r2, [r2, #0]
 80093b4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80093b6:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 80093ba:	3302      	adds	r3, #2
 80093bc:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
 80093c0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80093c4:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80093c8:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 80093cc:	7812      	ldrb	r2, [r2, #0]
 80093ce:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80093d0:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 80093d4:	3301      	adds	r3, #1
 80093d6:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
  /* var_len_data input */
  {
    uint8_t size;
    switch (Char_UUID_Type) {
 80093da:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80093de:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 80093e2:	781b      	ldrb	r3, [r3, #0]
 80093e4:	2b01      	cmp	r3, #1
 80093e6:	d002      	beq.n	80093ee <aci_gatt_add_char+0xce>
 80093e8:	2b02      	cmp	r3, #2
 80093ea:	d004      	beq.n	80093f6 <aci_gatt_add_char+0xd6>
 80093ec:	e007      	b.n	80093fe <aci_gatt_add_char+0xde>
      case 1: size = 2; break;
 80093ee:	2302      	movs	r3, #2
 80093f0:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 80093f4:	e005      	b.n	8009402 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 80093f6:	2310      	movs	r3, #16
 80093f8:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 80093fc:	e001      	b.n	8009402 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 80093fe:	2347      	movs	r3, #71	@ 0x47
 8009400:	e091      	b.n	8009526 <aci_gatt_add_char+0x206>
    }
    BLUENRG_memcpy((void *) &cp0->Char_UUID, (const void *) Char_UUID, size);
 8009402:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8009406:	1cd8      	adds	r0, r3, #3
 8009408:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 800940c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009410:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8009414:	6819      	ldr	r1, [r3, #0]
 8009416:	f001 f98c 	bl	800a732 <memcpy>
    index_input += size;
 800941a:	f897 2133 	ldrb.w	r2, [r7, #307]	@ 0x133
 800941e:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8009422:	4413      	add	r3, r2
 8009424:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
    {
      cp1->Char_Value_Length = htob(Char_Value_Length, 2);
 8009428:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800942c:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8009430:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 8009434:	8812      	ldrh	r2, [r2, #0]
 8009436:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8009438:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 800943c:	3302      	adds	r3, #2
 800943e:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
    {
      cp1->Char_Properties = htob(Char_Properties, 1);
 8009442:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009446:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800944a:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800944c:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8009450:	3301      	adds	r3, #1
 8009452:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
    {
      cp1->Security_Permissions = htob(Security_Permissions, 1);
 8009456:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800945a:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800945e:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8009460:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8009464:	3301      	adds	r3, #1
 8009466:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
    {
      cp1->GATT_Evt_Mask = htob(GATT_Evt_Mask, 1);
 800946a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800946e:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 8009472:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8009474:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8009478:	3301      	adds	r3, #1
 800947a:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
    {
      cp1->Enc_Key_Size = htob(Enc_Key_Size, 1);
 800947e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009482:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 8009486:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8009488:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 800948c:	3301      	adds	r3, #1
 800948e:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
    {
      cp1->Is_Variable = htob(Is_Variable, 1);
 8009492:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009496:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 800949a:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800949c:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 80094a0:	3301      	adds	r3, #1
 80094a2:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80094a6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80094aa:	2218      	movs	r2, #24
 80094ac:	2100      	movs	r1, #0
 80094ae:	4618      	mov	r0, r3
 80094b0:	f001 f8c4 	bl	800a63c <memset>
  rq.ogf = 0x3f;
 80094b4:	233f      	movs	r3, #63	@ 0x3f
 80094b6:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 80094ba:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80094be:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 80094c2:	f107 0314 	add.w	r3, r7, #20
 80094c6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 80094ca:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 80094ce:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 80094d2:	f107 0310 	add.w	r3, r7, #16
 80094d6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 80094da:	2303      	movs	r3, #3
 80094dc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 80094e0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80094e4:	2100      	movs	r1, #0
 80094e6:	4618      	mov	r0, r3
 80094e8:	f000 fbb0 	bl	8009c4c <hci_send_req>
 80094ec:	4603      	mov	r3, r0
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	da01      	bge.n	80094f6 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 80094f2:	23ff      	movs	r3, #255	@ 0xff
 80094f4:	e017      	b.n	8009526 <aci_gatt_add_char+0x206>
  if (resp.Status) {
 80094f6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80094fa:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80094fe:	781b      	ldrb	r3, [r3, #0]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d005      	beq.n	8009510 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8009504:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009508:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800950c:	781b      	ldrb	r3, [r3, #0]
 800950e:	e00a      	b.n	8009526 <aci_gatt_add_char+0x206>
  }
  *Char_Handle = btoh(resp.Char_Handle, 2);
 8009510:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009514:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8009518:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800951c:	b29a      	uxth	r2, r3
 800951e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8009522:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8009524:	2300      	movs	r3, #0
}
 8009526:	4618      	mov	r0, r3
 8009528:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 800952c:	46bd      	mov	sp, r7
 800952e:	bd90      	pop	{r4, r7, pc}

08009530 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t Service_Handle,
                                      uint16_t Char_Handle,
                                      uint8_t Val_Offset,
                                      uint8_t Char_Value_Length,
                                      uint8_t Char_Value[])
{
 8009530:	b5b0      	push	{r4, r5, r7, lr}
 8009532:	b0cc      	sub	sp, #304	@ 0x130
 8009534:	af00      	add	r7, sp, #0
 8009536:	4605      	mov	r5, r0
 8009538:	460c      	mov	r4, r1
 800953a:	4610      	mov	r0, r2
 800953c:	4619      	mov	r1, r3
 800953e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009542:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009546:	462a      	mov	r2, r5
 8009548:	801a      	strh	r2, [r3, #0]
 800954a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800954e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009552:	4622      	mov	r2, r4
 8009554:	801a      	strh	r2, [r3, #0]
 8009556:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800955a:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 800955e:	4602      	mov	r2, r0
 8009560:	701a      	strb	r2, [r3, #0]
 8009562:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009566:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800956a:	460a      	mov	r2, r1
 800956c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800956e:	f107 030c 	add.w	r3, r7, #12
 8009572:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8009576:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800957a:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 800957e:	2200      	movs	r2, #0
 8009580:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8009582:	2300      	movs	r3, #0
 8009584:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Service_Handle = htob(Service_Handle, 2);
 8009588:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800958c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009590:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8009594:	8812      	ldrh	r2, [r2, #0]
 8009596:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009598:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800959c:	3302      	adds	r3, #2
 800959e:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Char_Handle = htob(Char_Handle, 2);
 80095a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80095a6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80095aa:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 80095ae:	8812      	ldrh	r2, [r2, #0]
 80095b0:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80095b2:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 80095b6:	3302      	adds	r3, #2
 80095b8:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Val_Offset = htob(Val_Offset, 1);
 80095bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80095c0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80095c4:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 80095c8:	7812      	ldrb	r2, [r2, #0]
 80095ca:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80095cc:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 80095d0:	3301      	adds	r3, #1
 80095d2:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Char_Value_Length = htob(Char_Value_Length, 1);
 80095d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80095da:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80095de:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 80095e2:	7812      	ldrb	r2, [r2, #0]
 80095e4:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80095e6:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 80095ea:	3301      	adds	r3, #1
 80095ec:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length*sizeof(uint8_t));
 80095f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80095f4:	1d98      	adds	r0, r3, #6
 80095f6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80095fa:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 80095fe:	781b      	ldrb	r3, [r3, #0]
 8009600:	461a      	mov	r2, r3
 8009602:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8009606:	f001 f894 	bl	800a732 <memcpy>
    index_input += Char_Value_Length*sizeof(uint8_t);
 800960a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800960e:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8009612:	f897 212b 	ldrb.w	r2, [r7, #299]	@ 0x12b
 8009616:	781b      	ldrb	r3, [r3, #0]
 8009618:	4413      	add	r3, r2
 800961a:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800961e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009622:	2218      	movs	r2, #24
 8009624:	2100      	movs	r1, #0
 8009626:	4618      	mov	r0, r3
 8009628:	f001 f808 	bl	800a63c <memset>
  rq.ogf = 0x3f;
 800962c:	233f      	movs	r3, #63	@ 0x3f
 800962e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 8009632:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8009636:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800963a:	f107 030c 	add.w	r3, r7, #12
 800963e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009642:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8009646:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800964a:	f107 030b 	add.w	r3, r7, #11
 800964e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009652:	2301      	movs	r3, #1
 8009654:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8009658:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800965c:	2100      	movs	r1, #0
 800965e:	4618      	mov	r0, r3
 8009660:	f000 faf4 	bl	8009c4c <hci_send_req>
 8009664:	4603      	mov	r3, r0
 8009666:	2b00      	cmp	r3, #0
 8009668:	da01      	bge.n	800966e <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800966a:	23ff      	movs	r3, #255	@ 0xff
 800966c:	e00d      	b.n	800968a <aci_gatt_update_char_value+0x15a>
  if (status) {
 800966e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009672:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 8009676:	781b      	ldrb	r3, [r3, #0]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d005      	beq.n	8009688 <aci_gatt_update_char_value+0x158>
    return status;
 800967c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009680:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 8009684:	781b      	ldrb	r3, [r3, #0]
 8009686:	e000      	b.n	800968a <aci_gatt_update_char_value+0x15a>
  }
  return BLE_STATUS_SUCCESS;
 8009688:	2300      	movs	r3, #0
}
 800968a:	4618      	mov	r0, r3
 800968c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009690:	46bd      	mov	sp, r7
 8009692:	bdb0      	pop	{r4, r5, r7, pc}

08009694 <aci_gatt_allow_read>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_gatt_allow_read(uint16_t Connection_Handle)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b0cc      	sub	sp, #304	@ 0x130
 8009698:	af00      	add	r7, sp, #0
 800969a:	4602      	mov	r2, r0
 800969c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80096a0:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80096a4:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_allow_read_cp0 *cp0 = (aci_gatt_allow_read_cp0*)(cmd_buffer);
 80096a6:	f107 030c 	add.w	r3, r7, #12
 80096aa:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80096ae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80096b2:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 80096b6:	2200      	movs	r2, #0
 80096b8:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 80096ba:	2300      	movs	r3, #0
 80096bc:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 80096c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80096c4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80096c8:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80096cc:	8812      	ldrh	r2, [r2, #0]
 80096ce:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80096d0:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 80096d4:	3302      	adds	r3, #2
 80096d6:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80096da:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80096de:	2218      	movs	r2, #24
 80096e0:	2100      	movs	r1, #0
 80096e2:	4618      	mov	r0, r3
 80096e4:	f000 ffaa 	bl	800a63c <memset>
  rq.ogf = 0x3f;
 80096e8:	233f      	movs	r3, #63	@ 0x3f
 80096ea:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x127;
 80096ee:	f240 1327 	movw	r3, #295	@ 0x127
 80096f2:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80096f6:	f107 030c 	add.w	r3, r7, #12
 80096fa:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80096fe:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8009702:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009706:	f107 030b 	add.w	r3, r7, #11
 800970a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800970e:	2301      	movs	r3, #1
 8009710:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8009714:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009718:	2100      	movs	r1, #0
 800971a:	4618      	mov	r0, r3
 800971c:	f000 fa96 	bl	8009c4c <hci_send_req>
 8009720:	4603      	mov	r3, r0
 8009722:	2b00      	cmp	r3, #0
 8009724:	da01      	bge.n	800972a <aci_gatt_allow_read+0x96>
    return BLE_STATUS_TIMEOUT;
 8009726:	23ff      	movs	r3, #255	@ 0xff
 8009728:	e00d      	b.n	8009746 <aci_gatt_allow_read+0xb2>
  if (status) {
 800972a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800972e:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 8009732:	781b      	ldrb	r3, [r3, #0]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d005      	beq.n	8009744 <aci_gatt_allow_read+0xb0>
    return status;
 8009738:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800973c:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 8009740:	781b      	ldrb	r3, [r3, #0]
 8009742:	e000      	b.n	8009746 <aci_gatt_allow_read+0xb2>
  }
  return BLE_STATUS_SUCCESS;
 8009744:	2300      	movs	r3, #0
}
 8009746:	4618      	mov	r0, r3
 8009748:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}

08009750 <aci_hal_write_config_data>:
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_hal_write_config_data(uint8_t Offset,
                                     uint8_t Length,
                                     uint8_t Value[])
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b0cc      	sub	sp, #304	@ 0x130
 8009754:	af00      	add	r7, sp, #0
 8009756:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800975a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800975e:	601a      	str	r2, [r3, #0]
 8009760:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009764:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8009768:	4602      	mov	r2, r0
 800976a:	701a      	strb	r2, [r3, #0]
 800976c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009770:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009774:	460a      	mov	r2, r1
 8009776:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8009778:	f107 030c 	add.w	r3, r7, #12
 800977c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8009780:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009784:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 8009788:	2200      	movs	r2, #0
 800978a:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800978c:	2300      	movs	r3, #0
 800978e:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Offset = htob(Offset, 1);
 8009792:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009796:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800979a:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800979e:	7812      	ldrb	r2, [r2, #0]
 80097a0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80097a2:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 80097a6:	3301      	adds	r3, #1
 80097a8:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->Length = htob(Length, 1);
 80097ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80097b0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80097b4:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80097b8:	7812      	ldrb	r2, [r2, #0]
 80097ba:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80097bc:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 80097c0:	3301      	adds	r3, #1
 80097c2:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Value, (const void *) Value, Length*sizeof(uint8_t));
 80097c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80097ca:	1c98      	adds	r0, r3, #2
 80097cc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80097d0:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80097d4:	781a      	ldrb	r2, [r3, #0]
 80097d6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80097da:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80097de:	6819      	ldr	r1, [r3, #0]
 80097e0:	f000 ffa7 	bl	800a732 <memcpy>
    index_input += Length*sizeof(uint8_t);
 80097e4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80097e8:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80097ec:	f897 212b 	ldrb.w	r2, [r7, #299]	@ 0x12b
 80097f0:	781b      	ldrb	r3, [r3, #0]
 80097f2:	4413      	add	r3, r2
 80097f4:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80097f8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80097fc:	2218      	movs	r2, #24
 80097fe:	2100      	movs	r1, #0
 8009800:	4618      	mov	r0, r3
 8009802:	f000 ff1b 	bl	800a63c <memset>
  rq.ogf = 0x3f;
 8009806:	233f      	movs	r3, #63	@ 0x3f
 8009808:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 800980c:	230c      	movs	r3, #12
 800980e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009812:	f107 030c 	add.w	r3, r7, #12
 8009816:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800981a:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800981e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009822:	f107 030b 	add.w	r3, r7, #11
 8009826:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800982a:	2301      	movs	r3, #1
 800982c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8009830:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009834:	2100      	movs	r1, #0
 8009836:	4618      	mov	r0, r3
 8009838:	f000 fa08 	bl	8009c4c <hci_send_req>
 800983c:	4603      	mov	r3, r0
 800983e:	2b00      	cmp	r3, #0
 8009840:	da01      	bge.n	8009846 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8009842:	23ff      	movs	r3, #255	@ 0xff
 8009844:	e00d      	b.n	8009862 <aci_hal_write_config_data+0x112>
  if (status) {
 8009846:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800984a:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 800984e:	781b      	ldrb	r3, [r3, #0]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d005      	beq.n	8009860 <aci_hal_write_config_data+0x110>
    return status;
 8009854:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009858:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 800985c:	781b      	ldrb	r3, [r3, #0]
 800985e:	e000      	b.n	8009862 <aci_hal_write_config_data+0x112>
  }
  return BLE_STATUS_SUCCESS;
 8009860:	2300      	movs	r3, #0
}
 8009862:	4618      	mov	r0, r3
 8009864:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}

0800986c <aci_hal_read_config_data>:
tBleStatus aci_hal_read_config_data(uint8_t Offset,
                                    uint8_t *Data_Length,
                                    uint8_t Data[])
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b0ee      	sub	sp, #440	@ 0x1b8
 8009870:	af00      	add	r7, sp, #0
 8009872:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8009876:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800987a:	6019      	str	r1, [r3, #0]
 800987c:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8009880:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8009884:	601a      	str	r2, [r3, #0]
 8009886:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 800988a:	f2a3 13a9 	subw	r3, r3, #425	@ 0x1a9
 800988e:	4602      	mov	r2, r0
 8009890:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_read_config_data_cp0 *cp0 = (aci_hal_read_config_data_cp0*)(cmd_buffer);
 8009892:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8009896:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
  aci_hal_read_config_data_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800989a:	f107 0314 	add.w	r3, r7, #20
 800989e:	2280      	movs	r2, #128	@ 0x80
 80098a0:	2100      	movs	r1, #0
 80098a2:	4618      	mov	r0, r3
 80098a4:	f000 feca 	bl	800a63c <memset>
  uint8_t index_input = 0;
 80098a8:	2300      	movs	r3, #0
 80098aa:	f887 31b3 	strb.w	r3, [r7, #435]	@ 0x1b3
  cp0->Offset = htob(Offset, 1);
 80098ae:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80098b2:	f507 72dc 	add.w	r2, r7, #440	@ 0x1b8
 80098b6:	f2a2 12a9 	subw	r2, r2, #425	@ 0x1a9
 80098ba:	7812      	ldrb	r2, [r2, #0]
 80098bc:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80098be:	f897 31b3 	ldrb.w	r3, [r7, #435]	@ 0x1b3
 80098c2:	3301      	adds	r3, #1
 80098c4:	f887 31b3 	strb.w	r3, [r7, #435]	@ 0x1b3
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80098c8:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80098cc:	2218      	movs	r2, #24
 80098ce:	2100      	movs	r1, #0
 80098d0:	4618      	mov	r0, r3
 80098d2:	f000 feb3 	bl	800a63c <memset>
  rq.ogf = 0x3f;
 80098d6:	233f      	movs	r3, #63	@ 0x3f
 80098d8:	f8a7 3198 	strh.w	r3, [r7, #408]	@ 0x198
  rq.ocf = 0x00d;
 80098dc:	230d      	movs	r3, #13
 80098de:	f8a7 319a 	strh.w	r3, [r7, #410]	@ 0x19a
  rq.cparam = cmd_buffer;
 80098e2:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80098e6:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
  rq.clen = index_input;
 80098ea:	f897 31b3 	ldrb.w	r3, [r7, #435]	@ 0x1b3
 80098ee:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
  rq.rparam = &resp;
 80098f2:	f107 0314 	add.w	r3, r7, #20
 80098f6:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
  rq.rlen = sizeof(resp);
 80098fa:	2380      	movs	r3, #128	@ 0x80
 80098fc:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  if (hci_send_req(&rq, FALSE) < 0)
 8009900:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8009904:	2100      	movs	r1, #0
 8009906:	4618      	mov	r0, r3
 8009908:	f000 f9a0 	bl	8009c4c <hci_send_req>
 800990c:	4603      	mov	r3, r0
 800990e:	2b00      	cmp	r3, #0
 8009910:	da01      	bge.n	8009916 <aci_hal_read_config_data+0xaa>
    return BLE_STATUS_TIMEOUT;
 8009912:	23ff      	movs	r3, #255	@ 0xff
 8009914:	e029      	b.n	800996a <aci_hal_read_config_data+0xfe>
  if (resp.Status) {
 8009916:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 800991a:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 800991e:	781b      	ldrb	r3, [r3, #0]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d005      	beq.n	8009930 <aci_hal_read_config_data+0xc4>
    return resp.Status;
 8009924:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8009928:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 800992c:	781b      	ldrb	r3, [r3, #0]
 800992e:	e01c      	b.n	800996a <aci_hal_read_config_data+0xfe>
  }
  *Data_Length = btoh(resp.Data_Length, 1);
 8009930:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8009934:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8009938:	785a      	ldrb	r2, [r3, #1]
 800993a:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 800993e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	701a      	strb	r2, [r3, #0]
  BLUENRG_memcpy((void *) Data, (const void *) resp.Data, *Data_Length*sizeof(uint8_t));
 8009946:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 800994a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	781b      	ldrb	r3, [r3, #0]
 8009952:	461a      	mov	r2, r3
 8009954:	f107 0314 	add.w	r3, r7, #20
 8009958:	1c99      	adds	r1, r3, #2
 800995a:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 800995e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8009962:	6818      	ldr	r0, [r3, #0]
 8009964:	f000 fee5 	bl	800a732 <memcpy>
  return BLE_STATUS_SUCCESS;
 8009968:	2300      	movs	r3, #0
}
 800996a:	4618      	mov	r0, r3
 800996c:	f507 77dc 	add.w	r7, r7, #440	@ 0x1b8
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}

08009974 <aci_hal_set_tx_power_level>:
tBleStatus aci_hal_set_tx_power_level(uint8_t En_High_Power,
                                      uint8_t PA_Level)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b0cc      	sub	sp, #304	@ 0x130
 8009978:	af00      	add	r7, sp, #0
 800997a:	4602      	mov	r2, r0
 800997c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009980:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8009984:	701a      	strb	r2, [r3, #0]
 8009986:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800998a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800998e:	460a      	mov	r2, r1
 8009990:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8009992:	f107 030c 	add.w	r3, r7, #12
 8009996:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800999a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800999e:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 80099a2:	2200      	movs	r2, #0
 80099a4:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 80099a6:	2300      	movs	r3, #0
 80099a8:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->En_High_Power = htob(En_High_Power, 1);
 80099ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80099b0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80099b4:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80099b8:	7812      	ldrb	r2, [r2, #0]
 80099ba:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80099bc:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 80099c0:	3301      	adds	r3, #1
 80099c2:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  cp0->PA_Level = htob(PA_Level, 1);
 80099c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80099ca:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80099ce:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80099d2:	7812      	ldrb	r2, [r2, #0]
 80099d4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80099d6:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 80099da:	3301      	adds	r3, #1
 80099dc:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80099e0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80099e4:	2218      	movs	r2, #24
 80099e6:	2100      	movs	r1, #0
 80099e8:	4618      	mov	r0, r3
 80099ea:	f000 fe27 	bl	800a63c <memset>
  rq.ogf = 0x3f;
 80099ee:	233f      	movs	r3, #63	@ 0x3f
 80099f0:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 80099f4:	230f      	movs	r3, #15
 80099f6:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80099fa:	f107 030c 	add.w	r3, r7, #12
 80099fe:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009a02:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8009a06:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009a0a:	f107 030b 	add.w	r3, r7, #11
 8009a0e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009a12:	2301      	movs	r3, #1
 8009a14:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8009a18:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a1c:	2100      	movs	r1, #0
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f000 f914 	bl	8009c4c <hci_send_req>
 8009a24:	4603      	mov	r3, r0
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	da01      	bge.n	8009a2e <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8009a2a:	23ff      	movs	r3, #255	@ 0xff
 8009a2c:	e00d      	b.n	8009a4a <aci_hal_set_tx_power_level+0xd6>
  if (status) {
 8009a2e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009a32:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 8009a36:	781b      	ldrb	r3, [r3, #0]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d005      	beq.n	8009a48 <aci_hal_set_tx_power_level+0xd4>
    return status;
 8009a3c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009a40:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 8009a44:	781b      	ldrb	r3, [r3, #0]
 8009a46:	e000      	b.n	8009a4a <aci_hal_set_tx_power_level+0xd6>
  }
  return BLE_STATUS_SUCCESS;
 8009a48:	2300      	movs	r3, #0
}
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bd80      	pop	{r7, pc}

08009a54 <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 8009a54:	b480      	push	{r7}
 8009a56:	b085      	sub	sp, #20
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	3308      	adds	r3, #8
 8009a60:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	781b      	ldrb	r3, [r3, #0]
 8009a66:	2b04      	cmp	r3, #4
 8009a68:	d001      	beq.n	8009a6e <verify_packet+0x1a>
    return 1; /* Incorrect type */
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	e00c      	b.n	8009a88 <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	3302      	adds	r3, #2
 8009a72:	781b      	ldrb	r3, [r3, #0]
 8009a74:	461a      	mov	r2, r3
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8009a7c:	3b03      	subs	r3, #3
 8009a7e:	429a      	cmp	r2, r3
 8009a80:	d001      	beq.n	8009a86 <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 8009a82:	2302      	movs	r3, #2
 8009a84:	e000      	b.n	8009a88 <verify_packet+0x34>
  
  return 0;      
 8009a86:	2300      	movs	r3, #0
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	3714      	adds	r7, #20
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a92:	4770      	bx	lr

08009a94 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b0a6      	sub	sp, #152	@ 0x98
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	607b      	str	r3, [r7, #4]
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	81fb      	strh	r3, [r7, #14]
 8009aa0:	460b      	mov	r3, r1
 8009aa2:	81bb      	strh	r3, [r7, #12]
 8009aa4:	4613      	mov	r3, r2
 8009aa6:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8009aa8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009aac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009ab0:	b21a      	sxth	r2, r3
 8009ab2:	89fb      	ldrh	r3, [r7, #14]
 8009ab4:	029b      	lsls	r3, r3, #10
 8009ab6:	b21b      	sxth	r3, r3
 8009ab8:	4313      	orrs	r3, r2
 8009aba:	b21b      	sxth	r3, r3
 8009abc:	b29b      	uxth	r3, r3
 8009abe:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 8009ac0:	7afb      	ldrb	r3, [r7, #11]
 8009ac2:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 8009ac8:	f107 0318 	add.w	r3, r7, #24
 8009acc:	3301      	adds	r3, #1
 8009ace:	461a      	mov	r2, r3
 8009ad0:	f107 0314 	add.w	r3, r7, #20
 8009ad4:	8819      	ldrh	r1, [r3, #0]
 8009ad6:	789b      	ldrb	r3, [r3, #2]
 8009ad8:	8011      	strh	r1, [r2, #0]
 8009ada:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8009adc:	f107 0318 	add.w	r3, r7, #24
 8009ae0:	3304      	adds	r3, #4
 8009ae2:	7afa      	ldrb	r2, [r7, #11]
 8009ae4:	6879      	ldr	r1, [r7, #4]
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f000 fe23 	bl	800a732 <memcpy>
  
  if (hciContext.io.Send)
 8009aec:	4b08      	ldr	r3, [pc, #32]	@ (8009b10 <send_cmd+0x7c>)
 8009aee:	691b      	ldr	r3, [r3, #16]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d009      	beq.n	8009b08 <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 8009af4:	4b06      	ldr	r3, [pc, #24]	@ (8009b10 <send_cmd+0x7c>)
 8009af6:	691b      	ldr	r3, [r3, #16]
 8009af8:	7afa      	ldrb	r2, [r7, #11]
 8009afa:	b292      	uxth	r2, r2
 8009afc:	3204      	adds	r2, #4
 8009afe:	b291      	uxth	r1, r2
 8009b00:	f107 0218 	add.w	r2, r7, #24
 8009b04:	4610      	mov	r0, r2
 8009b06:	4798      	blx	r3
  }
}
 8009b08:	bf00      	nop
 8009b0a:	3798      	adds	r7, #152	@ 0x98
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}
 8009b10:	200009b4 	.word	0x200009b4

08009b14 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b084      	sub	sp, #16
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
 8009b1c:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 8009b1e:	e00a      	b.n	8009b36 <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 8009b20:	f107 030c 	add.w	r3, r7, #12
 8009b24:	4619      	mov	r1, r3
 8009b26:	6838      	ldr	r0, [r7, #0]
 8009b28:	f000 fae8 	bl	800a0fc <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	4619      	mov	r1, r3
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	f000 fa4f 	bl	8009fd4 <list_insert_head>
  while (!list_is_empty(src_list))
 8009b36:	6838      	ldr	r0, [r7, #0]
 8009b38:	f000 fa2a 	bl	8009f90 <list_is_empty>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d0ee      	beq.n	8009b20 <move_list+0xc>
  }
}
 8009b42:	bf00      	nop
 8009b44:	bf00      	nop
 8009b46:	3710      	adds	r7, #16
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}

08009b4c <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b082      	sub	sp, #8
 8009b50:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8009b52:	e009      	b.n	8009b68 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8009b54:	1d3b      	adds	r3, r7, #4
 8009b56:	4619      	mov	r1, r3
 8009b58:	4809      	ldr	r0, [pc, #36]	@ (8009b80 <free_event_list+0x34>)
 8009b5a:	f000 faa8 	bl	800a0ae <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	4619      	mov	r1, r3
 8009b62:	4808      	ldr	r0, [pc, #32]	@ (8009b84 <free_event_list+0x38>)
 8009b64:	f000 fa5c 	bl	800a020 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8009b68:	4806      	ldr	r0, [pc, #24]	@ (8009b84 <free_event_list+0x38>)
 8009b6a:	f000 faee 	bl	800a14a <list_get_size>
 8009b6e:	4603      	mov	r3, r0
 8009b70:	2b04      	cmp	r3, #4
 8009b72:	ddef      	ble.n	8009b54 <free_event_list+0x8>
  }
}
 8009b74:	bf00      	nop
 8009b76:	bf00      	nop
 8009b78:	3708      	adds	r7, #8
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}
 8009b7e:	bf00      	nop
 8009b80:	20000434 	.word	0x20000434
 8009b84:	2000042c 	.word	0x2000042c

08009b88 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b084      	sub	sp, #16
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
 8009b90:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d002      	beq.n	8009b9e <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 8009b98:	4a18      	ldr	r2, [pc, #96]	@ (8009bfc <hci_init+0x74>)
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 8009b9e:	4818      	ldr	r0, [pc, #96]	@ (8009c00 <hci_init+0x78>)
 8009ba0:	f000 f9e6 	bl	8009f70 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 8009ba4:	4817      	ldr	r0, [pc, #92]	@ (8009c04 <hci_init+0x7c>)
 8009ba6:	f000 f9e3 	bl	8009f70 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 8009baa:	f7f7 f897 	bl	8000cdc <hci_tl_lowlevel_init>

  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8009bae:	2300      	movs	r3, #0
 8009bb0:	73fb      	strb	r3, [r7, #15]
 8009bb2:	e00c      	b.n	8009bce <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8009bb4:	7bfb      	ldrb	r3, [r7, #15]
 8009bb6:	228c      	movs	r2, #140	@ 0x8c
 8009bb8:	fb02 f303 	mul.w	r3, r2, r3
 8009bbc:	4a12      	ldr	r2, [pc, #72]	@ (8009c08 <hci_init+0x80>)
 8009bbe:	4413      	add	r3, r2
 8009bc0:	4619      	mov	r1, r3
 8009bc2:	480f      	ldr	r0, [pc, #60]	@ (8009c00 <hci_init+0x78>)
 8009bc4:	f000 fa2c 	bl	800a020 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8009bc8:	7bfb      	ldrb	r3, [r7, #15]
 8009bca:	3301      	adds	r3, #1
 8009bcc:	73fb      	strb	r3, [r7, #15]
 8009bce:	7bfb      	ldrb	r3, [r7, #15]
 8009bd0:	2b09      	cmp	r3, #9
 8009bd2:	d9ef      	bls.n	8009bb4 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 8009bd4:	4b09      	ldr	r3, [pc, #36]	@ (8009bfc <hci_init+0x74>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d003      	beq.n	8009be4 <hci_init+0x5c>
 8009bdc:	4b07      	ldr	r3, [pc, #28]	@ (8009bfc <hci_init+0x74>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	2000      	movs	r0, #0
 8009be2:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 8009be4:	4b05      	ldr	r3, [pc, #20]	@ (8009bfc <hci_init+0x74>)
 8009be6:	689b      	ldr	r3, [r3, #8]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d002      	beq.n	8009bf2 <hci_init+0x6a>
 8009bec:	4b03      	ldr	r3, [pc, #12]	@ (8009bfc <hci_init+0x74>)
 8009bee:	689b      	ldr	r3, [r3, #8]
 8009bf0:	4798      	blx	r3
}
 8009bf2:	bf00      	nop
 8009bf4:	3710      	adds	r7, #16
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}
 8009bfa:	bf00      	nop
 8009bfc:	200009b4 	.word	0x200009b4
 8009c00:	2000042c 	.word	0x2000042c
 8009c04:	20000434 	.word	0x20000434
 8009c08:	2000043c 	.word	0x2000043c

08009c0c <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b083      	sub	sp, #12
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	4a0b      	ldr	r2, [pc, #44]	@ (8009c48 <hci_register_io_bus+0x3c>)
 8009c1a:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	68db      	ldr	r3, [r3, #12]
 8009c20:	4a09      	ldr	r2, [pc, #36]	@ (8009c48 <hci_register_io_bus+0x3c>)
 8009c22:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	691b      	ldr	r3, [r3, #16]
 8009c28:	4a07      	ldr	r2, [pc, #28]	@ (8009c48 <hci_register_io_bus+0x3c>)
 8009c2a:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	699b      	ldr	r3, [r3, #24]
 8009c30:	4a05      	ldr	r2, [pc, #20]	@ (8009c48 <hci_register_io_bus+0x3c>)
 8009c32:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	689b      	ldr	r3, [r3, #8]
 8009c38:	4a03      	ldr	r2, [pc, #12]	@ (8009c48 <hci_register_io_bus+0x3c>)
 8009c3a:	6093      	str	r3, [r2, #8]
}
 8009c3c:	bf00      	nop
 8009c3e:	370c      	adds	r7, #12
 8009c40:	46bd      	mov	sp, r7
 8009c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c46:	4770      	bx	lr
 8009c48:	200009b4 	.word	0x200009b4

08009c4c <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b08e      	sub	sp, #56	@ 0x38
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
 8009c54:	460b      	mov	r3, r1
 8009c56:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	885b      	ldrh	r3, [r3, #2]
 8009c5c:	b21b      	sxth	r3, r3
 8009c5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009c62:	b21a      	sxth	r2, r3
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	881b      	ldrh	r3, [r3, #0]
 8009c68:	029b      	lsls	r3, r3, #10
 8009c6a:	b21b      	sxth	r3, r3
 8009c6c:	4313      	orrs	r3, r2
 8009c6e:	b21b      	sxth	r3, r3
 8009c70:	86fb      	strh	r3, [r7, #54]	@ 0x36
  hci_event_pckt *event_pckt;
  hci_spi_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 8009c72:	2300      	movs	r3, #0
 8009c74:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 8009c76:	f107 0308 	add.w	r3, r7, #8
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	f000 f978 	bl	8009f70 <list_init_head>

  free_event_list();
 8009c80:	f7ff ff64 	bl	8009b4c <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	8818      	ldrh	r0, [r3, #0]
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	8859      	ldrh	r1, [r3, #2]
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	68db      	ldr	r3, [r3, #12]
 8009c90:	b2da      	uxtb	r2, r3
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	689b      	ldr	r3, [r3, #8]
 8009c96:	f7ff fefd 	bl	8009a94 <send_cmd>
  
  if (async)
 8009c9a:	78fb      	ldrb	r3, [r7, #3]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d001      	beq.n	8009ca4 <hci_send_req+0x58>
  {
    return 0;
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	e0e2      	b.n	8009e6a <hci_send_req+0x21e>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 8009ca4:	f7f8 ff58 	bl	8002b58 <HAL_GetTick>
 8009ca8:	6338      	str	r0, [r7, #48]	@ 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8009caa:	f7f8 ff55 	bl	8002b58 <HAL_GetTick>
 8009cae:	4602      	mov	r2, r0
 8009cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cb2:	1ad3      	subs	r3, r2, r3
 8009cb4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009cb8:	f200 80b3 	bhi.w	8009e22 <hci_send_req+0x1d6>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 8009cbc:	486d      	ldr	r0, [pc, #436]	@ (8009e74 <hci_send_req+0x228>)
 8009cbe:	f000 f967 	bl	8009f90 <list_is_empty>
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d000      	beq.n	8009cca <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8009cc8:	e7ef      	b.n	8009caa <hci_send_req+0x5e>
      {
        break;
 8009cca:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 8009ccc:	f107 0310 	add.w	r3, r7, #16
 8009cd0:	4619      	mov	r1, r3
 8009cd2:	4868      	ldr	r0, [pc, #416]	@ (8009e74 <hci_send_req+0x228>)
 8009cd4:	f000 f9eb 	bl	800a0ae <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 8009cd8:	693b      	ldr	r3, [r7, #16]
 8009cda:	3308      	adds	r3, #8
 8009cdc:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 8009cde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ce0:	781b      	ldrb	r3, [r3, #0]
 8009ce2:	2b04      	cmp	r3, #4
 8009ce4:	d17f      	bne.n	8009de6 <hci_send_req+0x19a>
    {
      event_pckt = (void *)(hci_hdr->data);
 8009ce6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ce8:	3301      	adds	r3, #1
 8009cea:	62bb      	str	r3, [r7, #40]	@ 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 8009cec:	693b      	ldr	r3, [r7, #16]
 8009cee:	3308      	adds	r3, #8
 8009cf0:	3303      	adds	r3, #3
 8009cf2:	627b      	str	r3, [r7, #36]	@ 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8009cf4:	693b      	ldr	r3, [r7, #16]
 8009cf6:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8009cfa:	3b03      	subs	r3, #3
 8009cfc:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 8009cfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d00:	781b      	ldrb	r3, [r3, #0]
 8009d02:	2b3e      	cmp	r3, #62	@ 0x3e
 8009d04:	d04c      	beq.n	8009da0 <hci_send_req+0x154>
 8009d06:	2b3e      	cmp	r3, #62	@ 0x3e
 8009d08:	dc68      	bgt.n	8009ddc <hci_send_req+0x190>
 8009d0a:	2b10      	cmp	r3, #16
 8009d0c:	f000 808b 	beq.w	8009e26 <hci_send_req+0x1da>
 8009d10:	2b10      	cmp	r3, #16
 8009d12:	dc63      	bgt.n	8009ddc <hci_send_req+0x190>
 8009d14:	2b0e      	cmp	r3, #14
 8009d16:	d023      	beq.n	8009d60 <hci_send_req+0x114>
 8009d18:	2b0f      	cmp	r3, #15
 8009d1a:	d15f      	bne.n	8009ddc <hci_send_req+0x190>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 8009d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d1e:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 8009d20:	69bb      	ldr	r3, [r7, #24]
 8009d22:	885b      	ldrh	r3, [r3, #2]
 8009d24:	b29b      	uxth	r3, r3
 8009d26:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009d28:	429a      	cmp	r2, r3
 8009d2a:	d17e      	bne.n	8009e2a <hci_send_req+0x1de>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	685b      	ldr	r3, [r3, #4]
 8009d30:	2b0f      	cmp	r3, #15
 8009d32:	d004      	beq.n	8009d3e <hci_send_req+0xf2>
          if (cs->status) {
 8009d34:	69bb      	ldr	r3, [r7, #24]
 8009d36:	781b      	ldrb	r3, [r3, #0]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d051      	beq.n	8009de0 <hci_send_req+0x194>
            goto failed;
 8009d3c:	e078      	b.n	8009e30 <hci_send_req+0x1e4>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	695a      	ldr	r2, [r3, #20]
 8009d42:	6a3b      	ldr	r3, [r7, #32]
 8009d44:	429a      	cmp	r2, r3
 8009d46:	bf28      	it	cs
 8009d48:	461a      	movcs	r2, r3
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6918      	ldr	r0, [r3, #16]
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	695b      	ldr	r3, [r3, #20]
 8009d56:	461a      	mov	r2, r3
 8009d58:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009d5a:	f000 fcea 	bl	800a732 <memcpy>
        goto done;
 8009d5e:	e078      	b.n	8009e52 <hci_send_req+0x206>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 8009d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d62:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 8009d64:	697b      	ldr	r3, [r7, #20]
 8009d66:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009d6a:	b29b      	uxth	r3, r3
 8009d6c:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009d6e:	429a      	cmp	r2, r3
 8009d70:	d15d      	bne.n	8009e2e <hci_send_req+0x1e2>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 8009d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d74:	3303      	adds	r3, #3
 8009d76:	627b      	str	r3, [r7, #36]	@ 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 8009d78:	6a3b      	ldr	r3, [r7, #32]
 8009d7a:	3b03      	subs	r3, #3
 8009d7c:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	695a      	ldr	r2, [r3, #20]
 8009d82:	6a3b      	ldr	r3, [r7, #32]
 8009d84:	429a      	cmp	r2, r3
 8009d86:	bf28      	it	cs
 8009d88:	461a      	movcs	r2, r3
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6918      	ldr	r0, [r3, #16]
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	695b      	ldr	r3, [r3, #20]
 8009d96:	461a      	mov	r2, r3
 8009d98:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009d9a:	f000 fcca 	bl	800a732 <memcpy>
        goto done;
 8009d9e:	e058      	b.n	8009e52 <hci_send_req+0x206>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 8009da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009da2:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 8009da4:	69fb      	ldr	r3, [r7, #28]
 8009da6:	781b      	ldrb	r3, [r3, #0]
 8009da8:	461a      	mov	r2, r3
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	685b      	ldr	r3, [r3, #4]
 8009dae:	429a      	cmp	r2, r3
 8009db0:	d118      	bne.n	8009de4 <hci_send_req+0x198>
          break;
      
        len -= 1;
 8009db2:	6a3b      	ldr	r3, [r7, #32]
 8009db4:	3b01      	subs	r3, #1
 8009db6:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	695a      	ldr	r2, [r3, #20]
 8009dbc:	6a3b      	ldr	r3, [r7, #32]
 8009dbe:	429a      	cmp	r2, r3
 8009dc0:	bf28      	it	cs
 8009dc2:	461a      	movcs	r2, r3
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	6918      	ldr	r0, [r3, #16]
 8009dcc:	69fb      	ldr	r3, [r7, #28]
 8009dce:	1c59      	adds	r1, r3, #1
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	695b      	ldr	r3, [r3, #20]
 8009dd4:	461a      	mov	r2, r3
 8009dd6:	f000 fcac 	bl	800a732 <memcpy>
        goto done;
 8009dda:	e03a      	b.n	8009e52 <hci_send_req+0x206>
      
      case EVT_HARDWARE_ERROR:            
        goto failed;
      
      default:      
        break;
 8009ddc:	bf00      	nop
 8009dde:	e002      	b.n	8009de6 <hci_send_req+0x19a>
          break;
 8009de0:	bf00      	nop
 8009de2:	e000      	b.n	8009de6 <hci_send_req+0x19a>
          break;
 8009de4:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 8009de6:	4824      	ldr	r0, [pc, #144]	@ (8009e78 <hci_send_req+0x22c>)
 8009de8:	f000 f8d2 	bl	8009f90 <list_is_empty>
 8009dec:	4603      	mov	r3, r0
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d00d      	beq.n	8009e0e <hci_send_req+0x1c2>
 8009df2:	4820      	ldr	r0, [pc, #128]	@ (8009e74 <hci_send_req+0x228>)
 8009df4:	f000 f8cc 	bl	8009f90 <list_is_empty>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d007      	beq.n	8009e0e <hci_send_req+0x1c2>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	4619      	mov	r1, r3
 8009e02:	481d      	ldr	r0, [pc, #116]	@ (8009e78 <hci_send_req+0x22c>)
 8009e04:	f000 f90c 	bl	800a020 <list_insert_tail>
      hciReadPacket=NULL;
 8009e08:	2300      	movs	r3, #0
 8009e0a:	613b      	str	r3, [r7, #16]
 8009e0c:	e008      	b.n	8009e20 <hci_send_req+0x1d4>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 8009e0e:	693a      	ldr	r2, [r7, #16]
 8009e10:	f107 0308 	add.w	r3, r7, #8
 8009e14:	4611      	mov	r1, r2
 8009e16:	4618      	mov	r0, r3
 8009e18:	f000 f902 	bl	800a020 <list_insert_tail>
      hciReadPacket=NULL;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	613b      	str	r3, [r7, #16]
  {
 8009e20:	e740      	b.n	8009ca4 <hci_send_req+0x58>
        goto failed;
 8009e22:	bf00      	nop
 8009e24:	e004      	b.n	8009e30 <hci_send_req+0x1e4>
        goto failed;
 8009e26:	bf00      	nop
 8009e28:	e002      	b.n	8009e30 <hci_send_req+0x1e4>
          goto failed;
 8009e2a:	bf00      	nop
 8009e2c:	e000      	b.n	8009e30 <hci_send_req+0x1e4>
          goto failed;
 8009e2e:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 8009e30:	693b      	ldr	r3, [r7, #16]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d004      	beq.n	8009e40 <hci_send_req+0x1f4>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8009e36:	693b      	ldr	r3, [r7, #16]
 8009e38:	4619      	mov	r1, r3
 8009e3a:	480f      	ldr	r0, [pc, #60]	@ (8009e78 <hci_send_req+0x22c>)
 8009e3c:	f000 f8ca 	bl	8009fd4 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8009e40:	f107 0308 	add.w	r3, r7, #8
 8009e44:	4619      	mov	r1, r3
 8009e46:	480b      	ldr	r0, [pc, #44]	@ (8009e74 <hci_send_req+0x228>)
 8009e48:	f7ff fe64 	bl	8009b14 <move_list>

  return -1;
 8009e4c:	f04f 33ff 	mov.w	r3, #4294967295
 8009e50:	e00b      	b.n	8009e6a <hci_send_req+0x21e>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 8009e52:	693b      	ldr	r3, [r7, #16]
 8009e54:	4619      	mov	r1, r3
 8009e56:	4808      	ldr	r0, [pc, #32]	@ (8009e78 <hci_send_req+0x22c>)
 8009e58:	f000 f8bc 	bl	8009fd4 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8009e5c:	f107 0308 	add.w	r3, r7, #8
 8009e60:	4619      	mov	r1, r3
 8009e62:	4804      	ldr	r0, [pc, #16]	@ (8009e74 <hci_send_req+0x228>)
 8009e64:	f7ff fe56 	bl	8009b14 <move_list>

  return 0;
 8009e68:	2300      	movs	r3, #0
}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	3738      	adds	r7, #56	@ 0x38
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}
 8009e72:	bf00      	nop
 8009e74:	20000434 	.word	0x20000434
 8009e78:	2000042c 	.word	0x2000042c

08009e7c <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b082      	sub	sp, #8
 8009e80:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 8009e82:	2300      	movs	r3, #0
 8009e84:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8009e86:	e013      	b.n	8009eb0 <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 8009e88:	1d3b      	adds	r3, r7, #4
 8009e8a:	4619      	mov	r1, r3
 8009e8c:	480e      	ldr	r0, [pc, #56]	@ (8009ec8 <hci_user_evt_proc+0x4c>)
 8009e8e:	f000 f90e 	bl	800a0ae <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8009e92:	4b0e      	ldr	r3, [pc, #56]	@ (8009ecc <hci_user_evt_proc+0x50>)
 8009e94:	69db      	ldr	r3, [r3, #28]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d005      	beq.n	8009ea6 <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 8009e9a:	4b0c      	ldr	r3, [pc, #48]	@ (8009ecc <hci_user_evt_proc+0x50>)
 8009e9c:	69db      	ldr	r3, [r3, #28]
 8009e9e:	687a      	ldr	r2, [r7, #4]
 8009ea0:	3208      	adds	r2, #8
 8009ea2:	4610      	mov	r0, r2
 8009ea4:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	4619      	mov	r1, r3
 8009eaa:	4809      	ldr	r0, [pc, #36]	@ (8009ed0 <hci_user_evt_proc+0x54>)
 8009eac:	f000 f8b8 	bl	800a020 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8009eb0:	4805      	ldr	r0, [pc, #20]	@ (8009ec8 <hci_user_evt_proc+0x4c>)
 8009eb2:	f000 f86d 	bl	8009f90 <list_is_empty>
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d0e5      	beq.n	8009e88 <hci_user_evt_proc+0xc>
  }
}
 8009ebc:	bf00      	nop
 8009ebe:	bf00      	nop
 8009ec0:	3708      	adds	r7, #8
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}
 8009ec6:	bf00      	nop
 8009ec8:	20000434 	.word	0x20000434
 8009ecc:	200009b4 	.word	0x200009b4
 8009ed0:	2000042c 	.word	0x2000042c

08009ed4 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b086      	sub	sp, #24
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 8009edc:	2300      	movs	r3, #0
 8009ede:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 8009ee4:	481f      	ldr	r0, [pc, #124]	@ (8009f64 <hci_notify_asynch_evt+0x90>)
 8009ee6:	f000 f853 	bl	8009f90 <list_is_empty>
 8009eea:	4603      	mov	r3, r0
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d132      	bne.n	8009f56 <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 8009ef0:	f107 030c 	add.w	r3, r7, #12
 8009ef4:	4619      	mov	r1, r3
 8009ef6:	481b      	ldr	r0, [pc, #108]	@ (8009f64 <hci_notify_asynch_evt+0x90>)
 8009ef8:	f000 f8d9 	bl	800a0ae <list_remove_head>
    
    if (hciContext.io.Receive)
 8009efc:	4b1a      	ldr	r3, [pc, #104]	@ (8009f68 <hci_notify_asynch_evt+0x94>)
 8009efe:	68db      	ldr	r3, [r3, #12]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d02a      	beq.n	8009f5a <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 8009f04:	4b18      	ldr	r3, [pc, #96]	@ (8009f68 <hci_notify_asynch_evt+0x94>)
 8009f06:	68db      	ldr	r3, [r3, #12]
 8009f08:	68fa      	ldr	r2, [r7, #12]
 8009f0a:	3208      	adds	r2, #8
 8009f0c:	2180      	movs	r1, #128	@ 0x80
 8009f0e:	4610      	mov	r0, r2
 8009f10:	4798      	blx	r3
 8009f12:	4603      	mov	r3, r0
 8009f14:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 8009f16:	7cfb      	ldrb	r3, [r7, #19]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d016      	beq.n	8009f4a <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	7cfa      	ldrb	r2, [r7, #19]
 8009f20:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
        if (verify_packet(hciReadPacket) == 0)
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	4618      	mov	r0, r3
 8009f28:	f7ff fd94 	bl	8009a54 <verify_packet>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d105      	bne.n	8009f3e <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	4619      	mov	r1, r3
 8009f36:	480d      	ldr	r0, [pc, #52]	@ (8009f6c <hci_notify_asynch_evt+0x98>)
 8009f38:	f000 f872 	bl	800a020 <list_insert_tail>
 8009f3c:	e00d      	b.n	8009f5a <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	4619      	mov	r1, r3
 8009f42:	4808      	ldr	r0, [pc, #32]	@ (8009f64 <hci_notify_asynch_evt+0x90>)
 8009f44:	f000 f846 	bl	8009fd4 <list_insert_head>
 8009f48:	e007      	b.n	8009f5a <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	4619      	mov	r1, r3
 8009f4e:	4805      	ldr	r0, [pc, #20]	@ (8009f64 <hci_notify_asynch_evt+0x90>)
 8009f50:	f000 f840 	bl	8009fd4 <list_insert_head>
 8009f54:	e001      	b.n	8009f5a <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 8009f56:	2301      	movs	r3, #1
 8009f58:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8009f5a:	697b      	ldr	r3, [r7, #20]
  
}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	3718      	adds	r7, #24
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bd80      	pop	{r7, pc}
 8009f64:	2000042c 	.word	0x2000042c
 8009f68:	200009b4 	.word	0x200009b4
 8009f6c:	20000434 	.word	0x20000434

08009f70 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 8009f70:	b480      	push	{r7}
 8009f72:	b083      	sub	sp, #12
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	687a      	ldr	r2, [r7, #4]
 8009f7c:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	687a      	ldr	r2, [r7, #4]
 8009f82:	605a      	str	r2, [r3, #4]
}
 8009f84:	bf00      	nop
 8009f86:	370c      	adds	r7, #12
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8e:	4770      	bx	lr

08009f90 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 8009f90:	b480      	push	{r7}
 8009f92:	b087      	sub	sp, #28
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f98:	f3ef 8310 	mrs	r3, PRIMASK
 8009f9c:	60fb      	str	r3, [r7, #12]
  return(result);
 8009f9e:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009fa0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8009fa2:	b672      	cpsid	i
}
 8009fa4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	687a      	ldr	r2, [r7, #4]
 8009fac:	429a      	cmp	r2, r3
 8009fae:	d102      	bne.n	8009fb6 <list_is_empty+0x26>
  {
    return_value = 1;
 8009fb0:	2301      	movs	r3, #1
 8009fb2:	75fb      	strb	r3, [r7, #23]
 8009fb4:	e001      	b.n	8009fba <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	75fb      	strb	r3, [r7, #23]
 8009fba:	693b      	ldr	r3, [r7, #16]
 8009fbc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	f383 8810 	msr	PRIMASK, r3
}
 8009fc4:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 8009fc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fc8:	4618      	mov	r0, r3
 8009fca:	371c      	adds	r7, #28
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd2:	4770      	bx	lr

08009fd4 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	b087      	sub	sp, #28
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
 8009fdc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009fde:	f3ef 8310 	mrs	r3, PRIMASK
 8009fe2:	60fb      	str	r3, [r7, #12]
  return(result);
 8009fe4:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009fe6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009fe8:	b672      	cpsid	i
}
 8009fea:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681a      	ldr	r2, [r3, #0]
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	687a      	ldr	r2, [r7, #4]
 8009ff8:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	683a      	ldr	r2, [r7, #0]
 8009ffe:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	683a      	ldr	r2, [r7, #0]
 800a006:	605a      	str	r2, [r3, #4]
 800a008:	697b      	ldr	r3, [r7, #20]
 800a00a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a00c:	693b      	ldr	r3, [r7, #16]
 800a00e:	f383 8810 	msr	PRIMASK, r3
}
 800a012:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800a014:	bf00      	nop
 800a016:	371c      	adds	r7, #28
 800a018:	46bd      	mov	sp, r7
 800a01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01e:	4770      	bx	lr

0800a020 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 800a020:	b480      	push	{r7}
 800a022:	b087      	sub	sp, #28
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
 800a028:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a02a:	f3ef 8310 	mrs	r3, PRIMASK
 800a02e:	60fb      	str	r3, [r7, #12]
  return(result);
 800a030:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a032:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a034:	b672      	cpsid	i
}
 800a036:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	687a      	ldr	r2, [r7, #4]
 800a03c:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	685a      	ldr	r2, [r3, #4]
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	683a      	ldr	r2, [r7, #0]
 800a04a:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	685b      	ldr	r3, [r3, #4]
 800a050:	683a      	ldr	r2, [r7, #0]
 800a052:	601a      	str	r2, [r3, #0]
 800a054:	697b      	ldr	r3, [r7, #20]
 800a056:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a058:	693b      	ldr	r3, [r7, #16]
 800a05a:	f383 8810 	msr	PRIMASK, r3
}
 800a05e:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800a060:	bf00      	nop
 800a062:	371c      	adds	r7, #28
 800a064:	46bd      	mov	sp, r7
 800a066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06a:	4770      	bx	lr

0800a06c <list_remove_node>:

void list_remove_node (tListNode * node)
{
 800a06c:	b480      	push	{r7}
 800a06e:	b087      	sub	sp, #28
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a074:	f3ef 8310 	mrs	r3, PRIMASK
 800a078:	60fb      	str	r3, [r7, #12]
  return(result);
 800a07a:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a07c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a07e:	b672      	cpsid	i
}
 800a080:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	685b      	ldr	r3, [r3, #4]
 800a086:	687a      	ldr	r2, [r7, #4]
 800a088:	6812      	ldr	r2, [r2, #0]
 800a08a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	687a      	ldr	r2, [r7, #4]
 800a092:	6852      	ldr	r2, [r2, #4]
 800a094:	605a      	str	r2, [r3, #4]
 800a096:	697b      	ldr	r3, [r7, #20]
 800a098:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a09a:	693b      	ldr	r3, [r7, #16]
 800a09c:	f383 8810 	msr	PRIMASK, r3
}
 800a0a0:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800a0a2:	bf00      	nop
 800a0a4:	371c      	adds	r7, #28
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ac:	4770      	bx	lr

0800a0ae <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 800a0ae:	b580      	push	{r7, lr}
 800a0b0:	b086      	sub	sp, #24
 800a0b2:	af00      	add	r7, sp, #0
 800a0b4:	6078      	str	r0, [r7, #4]
 800a0b6:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a0b8:	f3ef 8310 	mrs	r3, PRIMASK
 800a0bc:	60fb      	str	r3, [r7, #12]
  return(result);
 800a0be:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a0c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a0c2:	b672      	cpsid	i
}
 800a0c4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681a      	ldr	r2, [r3, #0]
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	f7ff ffca 	bl	800a06c <list_remove_node>
  (*node)->next = NULL;
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	605a      	str	r2, [r3, #4]
 800a0e8:	697b      	ldr	r3, [r7, #20]
 800a0ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a0ec:	693b      	ldr	r3, [r7, #16]
 800a0ee:	f383 8810 	msr	PRIMASK, r3
}
 800a0f2:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800a0f4:	bf00      	nop
 800a0f6:	3718      	adds	r7, #24
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	bd80      	pop	{r7, pc}

0800a0fc <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b086      	sub	sp, #24
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
 800a104:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a106:	f3ef 8310 	mrs	r3, PRIMASK
 800a10a:	60fb      	str	r3, [r7, #12]
  return(result);
 800a10c:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a10e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a110:	b672      	cpsid	i
}
 800a112:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	685a      	ldr	r2, [r3, #4]
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	685b      	ldr	r3, [r3, #4]
 800a120:	4618      	mov	r0, r3
 800a122:	f7ff ffa3 	bl	800a06c <list_remove_node>
  (*node)->next = NULL;
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	2200      	movs	r2, #0
 800a12c:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	2200      	movs	r2, #0
 800a134:	605a      	str	r2, [r3, #4]
 800a136:	697b      	ldr	r3, [r7, #20]
 800a138:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a13a:	693b      	ldr	r3, [r7, #16]
 800a13c:	f383 8810 	msr	PRIMASK, r3
}
 800a140:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800a142:	bf00      	nop
 800a144:	3718      	adds	r7, #24
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}

0800a14a <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 800a14a:	b480      	push	{r7}
 800a14c:	b089      	sub	sp, #36	@ 0x24
 800a14e:	af00      	add	r7, sp, #0
 800a150:	6078      	str	r0, [r7, #4]
  int size = 0;
 800a152:	2300      	movs	r3, #0
 800a154:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a156:	f3ef 8310 	mrs	r3, PRIMASK
 800a15a:	613b      	str	r3, [r7, #16]
  return(result);
 800a15c:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a15e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a160:	b672      	cpsid	i
}
 800a162:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800a16a:	e005      	b.n	800a178 <list_get_size+0x2e>
  {
    size++;
 800a16c:	69fb      	ldr	r3, [r7, #28]
 800a16e:	3301      	adds	r3, #1
 800a170:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 800a172:	69bb      	ldr	r3, [r7, #24]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800a178:	69ba      	ldr	r2, [r7, #24]
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	429a      	cmp	r2, r3
 800a17e:	d1f5      	bne.n	800a16c <list_get_size+0x22>
 800a180:	697b      	ldr	r3, [r7, #20]
 800a182:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	f383 8810 	msr	PRIMASK, r3
}
 800a18a:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 800a18c:	69fb      	ldr	r3, [r7, #28]
}
 800a18e:	4618      	mov	r0, r3
 800a190:	3724      	adds	r7, #36	@ 0x24
 800a192:	46bd      	mov	sp, r7
 800a194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a198:	4770      	bx	lr
	...

0800a19c <rand>:
 800a19c:	4b16      	ldr	r3, [pc, #88]	@ (800a1f8 <rand+0x5c>)
 800a19e:	b510      	push	{r4, lr}
 800a1a0:	681c      	ldr	r4, [r3, #0]
 800a1a2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a1a4:	b9b3      	cbnz	r3, 800a1d4 <rand+0x38>
 800a1a6:	2018      	movs	r0, #24
 800a1a8:	f000 fb3a 	bl	800a820 <malloc>
 800a1ac:	4602      	mov	r2, r0
 800a1ae:	6320      	str	r0, [r4, #48]	@ 0x30
 800a1b0:	b920      	cbnz	r0, 800a1bc <rand+0x20>
 800a1b2:	4b12      	ldr	r3, [pc, #72]	@ (800a1fc <rand+0x60>)
 800a1b4:	4812      	ldr	r0, [pc, #72]	@ (800a200 <rand+0x64>)
 800a1b6:	2152      	movs	r1, #82	@ 0x52
 800a1b8:	f000 faca 	bl	800a750 <__assert_func>
 800a1bc:	4911      	ldr	r1, [pc, #68]	@ (800a204 <rand+0x68>)
 800a1be:	4b12      	ldr	r3, [pc, #72]	@ (800a208 <rand+0x6c>)
 800a1c0:	e9c0 1300 	strd	r1, r3, [r0]
 800a1c4:	4b11      	ldr	r3, [pc, #68]	@ (800a20c <rand+0x70>)
 800a1c6:	6083      	str	r3, [r0, #8]
 800a1c8:	230b      	movs	r3, #11
 800a1ca:	8183      	strh	r3, [r0, #12]
 800a1cc:	2100      	movs	r1, #0
 800a1ce:	2001      	movs	r0, #1
 800a1d0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800a1d4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a1d6:	480e      	ldr	r0, [pc, #56]	@ (800a210 <rand+0x74>)
 800a1d8:	690b      	ldr	r3, [r1, #16]
 800a1da:	694c      	ldr	r4, [r1, #20]
 800a1dc:	4a0d      	ldr	r2, [pc, #52]	@ (800a214 <rand+0x78>)
 800a1de:	4358      	muls	r0, r3
 800a1e0:	fb02 0004 	mla	r0, r2, r4, r0
 800a1e4:	fba3 3202 	umull	r3, r2, r3, r2
 800a1e8:	3301      	adds	r3, #1
 800a1ea:	eb40 0002 	adc.w	r0, r0, r2
 800a1ee:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800a1f2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800a1f6:	bd10      	pop	{r4, pc}
 800a1f8:	2000001c 	.word	0x2000001c
 800a1fc:	0800c4dc 	.word	0x0800c4dc
 800a200:	0800c4f3 	.word	0x0800c4f3
 800a204:	abcd330e 	.word	0xabcd330e
 800a208:	e66d1234 	.word	0xe66d1234
 800a20c:	0005deec 	.word	0x0005deec
 800a210:	5851f42d 	.word	0x5851f42d
 800a214:	4c957f2d 	.word	0x4c957f2d

0800a218 <std>:
 800a218:	2300      	movs	r3, #0
 800a21a:	b510      	push	{r4, lr}
 800a21c:	4604      	mov	r4, r0
 800a21e:	e9c0 3300 	strd	r3, r3, [r0]
 800a222:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a226:	6083      	str	r3, [r0, #8]
 800a228:	8181      	strh	r1, [r0, #12]
 800a22a:	6643      	str	r3, [r0, #100]	@ 0x64
 800a22c:	81c2      	strh	r2, [r0, #14]
 800a22e:	6183      	str	r3, [r0, #24]
 800a230:	4619      	mov	r1, r3
 800a232:	2208      	movs	r2, #8
 800a234:	305c      	adds	r0, #92	@ 0x5c
 800a236:	f000 fa01 	bl	800a63c <memset>
 800a23a:	4b0d      	ldr	r3, [pc, #52]	@ (800a270 <std+0x58>)
 800a23c:	6263      	str	r3, [r4, #36]	@ 0x24
 800a23e:	4b0d      	ldr	r3, [pc, #52]	@ (800a274 <std+0x5c>)
 800a240:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a242:	4b0d      	ldr	r3, [pc, #52]	@ (800a278 <std+0x60>)
 800a244:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a246:	4b0d      	ldr	r3, [pc, #52]	@ (800a27c <std+0x64>)
 800a248:	6323      	str	r3, [r4, #48]	@ 0x30
 800a24a:	4b0d      	ldr	r3, [pc, #52]	@ (800a280 <std+0x68>)
 800a24c:	6224      	str	r4, [r4, #32]
 800a24e:	429c      	cmp	r4, r3
 800a250:	d006      	beq.n	800a260 <std+0x48>
 800a252:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a256:	4294      	cmp	r4, r2
 800a258:	d002      	beq.n	800a260 <std+0x48>
 800a25a:	33d0      	adds	r3, #208	@ 0xd0
 800a25c:	429c      	cmp	r4, r3
 800a25e:	d105      	bne.n	800a26c <std+0x54>
 800a260:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a264:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a268:	f000 ba60 	b.w	800a72c <__retarget_lock_init_recursive>
 800a26c:	bd10      	pop	{r4, pc}
 800a26e:	bf00      	nop
 800a270:	0800a48d 	.word	0x0800a48d
 800a274:	0800a4af 	.word	0x0800a4af
 800a278:	0800a4e7 	.word	0x0800a4e7
 800a27c:	0800a50b 	.word	0x0800a50b
 800a280:	200009d4 	.word	0x200009d4

0800a284 <stdio_exit_handler>:
 800a284:	4a02      	ldr	r2, [pc, #8]	@ (800a290 <stdio_exit_handler+0xc>)
 800a286:	4903      	ldr	r1, [pc, #12]	@ (800a294 <stdio_exit_handler+0x10>)
 800a288:	4803      	ldr	r0, [pc, #12]	@ (800a298 <stdio_exit_handler+0x14>)
 800a28a:	f000 b869 	b.w	800a360 <_fwalk_sglue>
 800a28e:	bf00      	nop
 800a290:	20000010 	.word	0x20000010
 800a294:	0800b035 	.word	0x0800b035
 800a298:	20000020 	.word	0x20000020

0800a29c <cleanup_stdio>:
 800a29c:	6841      	ldr	r1, [r0, #4]
 800a29e:	4b0c      	ldr	r3, [pc, #48]	@ (800a2d0 <cleanup_stdio+0x34>)
 800a2a0:	4299      	cmp	r1, r3
 800a2a2:	b510      	push	{r4, lr}
 800a2a4:	4604      	mov	r4, r0
 800a2a6:	d001      	beq.n	800a2ac <cleanup_stdio+0x10>
 800a2a8:	f000 fec4 	bl	800b034 <_fflush_r>
 800a2ac:	68a1      	ldr	r1, [r4, #8]
 800a2ae:	4b09      	ldr	r3, [pc, #36]	@ (800a2d4 <cleanup_stdio+0x38>)
 800a2b0:	4299      	cmp	r1, r3
 800a2b2:	d002      	beq.n	800a2ba <cleanup_stdio+0x1e>
 800a2b4:	4620      	mov	r0, r4
 800a2b6:	f000 febd 	bl	800b034 <_fflush_r>
 800a2ba:	68e1      	ldr	r1, [r4, #12]
 800a2bc:	4b06      	ldr	r3, [pc, #24]	@ (800a2d8 <cleanup_stdio+0x3c>)
 800a2be:	4299      	cmp	r1, r3
 800a2c0:	d004      	beq.n	800a2cc <cleanup_stdio+0x30>
 800a2c2:	4620      	mov	r0, r4
 800a2c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2c8:	f000 beb4 	b.w	800b034 <_fflush_r>
 800a2cc:	bd10      	pop	{r4, pc}
 800a2ce:	bf00      	nop
 800a2d0:	200009d4 	.word	0x200009d4
 800a2d4:	20000a3c 	.word	0x20000a3c
 800a2d8:	20000aa4 	.word	0x20000aa4

0800a2dc <global_stdio_init.part.0>:
 800a2dc:	b510      	push	{r4, lr}
 800a2de:	4b0b      	ldr	r3, [pc, #44]	@ (800a30c <global_stdio_init.part.0+0x30>)
 800a2e0:	4c0b      	ldr	r4, [pc, #44]	@ (800a310 <global_stdio_init.part.0+0x34>)
 800a2e2:	4a0c      	ldr	r2, [pc, #48]	@ (800a314 <global_stdio_init.part.0+0x38>)
 800a2e4:	601a      	str	r2, [r3, #0]
 800a2e6:	4620      	mov	r0, r4
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	2104      	movs	r1, #4
 800a2ec:	f7ff ff94 	bl	800a218 <std>
 800a2f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a2f4:	2201      	movs	r2, #1
 800a2f6:	2109      	movs	r1, #9
 800a2f8:	f7ff ff8e 	bl	800a218 <std>
 800a2fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a300:	2202      	movs	r2, #2
 800a302:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a306:	2112      	movs	r1, #18
 800a308:	f7ff bf86 	b.w	800a218 <std>
 800a30c:	20000b0c 	.word	0x20000b0c
 800a310:	200009d4 	.word	0x200009d4
 800a314:	0800a285 	.word	0x0800a285

0800a318 <__sfp_lock_acquire>:
 800a318:	4801      	ldr	r0, [pc, #4]	@ (800a320 <__sfp_lock_acquire+0x8>)
 800a31a:	f000 ba08 	b.w	800a72e <__retarget_lock_acquire_recursive>
 800a31e:	bf00      	nop
 800a320:	20000b15 	.word	0x20000b15

0800a324 <__sfp_lock_release>:
 800a324:	4801      	ldr	r0, [pc, #4]	@ (800a32c <__sfp_lock_release+0x8>)
 800a326:	f000 ba03 	b.w	800a730 <__retarget_lock_release_recursive>
 800a32a:	bf00      	nop
 800a32c:	20000b15 	.word	0x20000b15

0800a330 <__sinit>:
 800a330:	b510      	push	{r4, lr}
 800a332:	4604      	mov	r4, r0
 800a334:	f7ff fff0 	bl	800a318 <__sfp_lock_acquire>
 800a338:	6a23      	ldr	r3, [r4, #32]
 800a33a:	b11b      	cbz	r3, 800a344 <__sinit+0x14>
 800a33c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a340:	f7ff bff0 	b.w	800a324 <__sfp_lock_release>
 800a344:	4b04      	ldr	r3, [pc, #16]	@ (800a358 <__sinit+0x28>)
 800a346:	6223      	str	r3, [r4, #32]
 800a348:	4b04      	ldr	r3, [pc, #16]	@ (800a35c <__sinit+0x2c>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d1f5      	bne.n	800a33c <__sinit+0xc>
 800a350:	f7ff ffc4 	bl	800a2dc <global_stdio_init.part.0>
 800a354:	e7f2      	b.n	800a33c <__sinit+0xc>
 800a356:	bf00      	nop
 800a358:	0800a29d 	.word	0x0800a29d
 800a35c:	20000b0c 	.word	0x20000b0c

0800a360 <_fwalk_sglue>:
 800a360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a364:	4607      	mov	r7, r0
 800a366:	4688      	mov	r8, r1
 800a368:	4614      	mov	r4, r2
 800a36a:	2600      	movs	r6, #0
 800a36c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a370:	f1b9 0901 	subs.w	r9, r9, #1
 800a374:	d505      	bpl.n	800a382 <_fwalk_sglue+0x22>
 800a376:	6824      	ldr	r4, [r4, #0]
 800a378:	2c00      	cmp	r4, #0
 800a37a:	d1f7      	bne.n	800a36c <_fwalk_sglue+0xc>
 800a37c:	4630      	mov	r0, r6
 800a37e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a382:	89ab      	ldrh	r3, [r5, #12]
 800a384:	2b01      	cmp	r3, #1
 800a386:	d907      	bls.n	800a398 <_fwalk_sglue+0x38>
 800a388:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a38c:	3301      	adds	r3, #1
 800a38e:	d003      	beq.n	800a398 <_fwalk_sglue+0x38>
 800a390:	4629      	mov	r1, r5
 800a392:	4638      	mov	r0, r7
 800a394:	47c0      	blx	r8
 800a396:	4306      	orrs	r6, r0
 800a398:	3568      	adds	r5, #104	@ 0x68
 800a39a:	e7e9      	b.n	800a370 <_fwalk_sglue+0x10>

0800a39c <iprintf>:
 800a39c:	b40f      	push	{r0, r1, r2, r3}
 800a39e:	b507      	push	{r0, r1, r2, lr}
 800a3a0:	4906      	ldr	r1, [pc, #24]	@ (800a3bc <iprintf+0x20>)
 800a3a2:	ab04      	add	r3, sp, #16
 800a3a4:	6808      	ldr	r0, [r1, #0]
 800a3a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3aa:	6881      	ldr	r1, [r0, #8]
 800a3ac:	9301      	str	r3, [sp, #4]
 800a3ae:	f000 fb17 	bl	800a9e0 <_vfiprintf_r>
 800a3b2:	b003      	add	sp, #12
 800a3b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a3b8:	b004      	add	sp, #16
 800a3ba:	4770      	bx	lr
 800a3bc:	2000001c 	.word	0x2000001c

0800a3c0 <putchar>:
 800a3c0:	4b02      	ldr	r3, [pc, #8]	@ (800a3cc <putchar+0xc>)
 800a3c2:	4601      	mov	r1, r0
 800a3c4:	6818      	ldr	r0, [r3, #0]
 800a3c6:	6882      	ldr	r2, [r0, #8]
 800a3c8:	f000 bed0 	b.w	800b16c <_putc_r>
 800a3cc:	2000001c 	.word	0x2000001c

0800a3d0 <_puts_r>:
 800a3d0:	6a03      	ldr	r3, [r0, #32]
 800a3d2:	b570      	push	{r4, r5, r6, lr}
 800a3d4:	6884      	ldr	r4, [r0, #8]
 800a3d6:	4605      	mov	r5, r0
 800a3d8:	460e      	mov	r6, r1
 800a3da:	b90b      	cbnz	r3, 800a3e0 <_puts_r+0x10>
 800a3dc:	f7ff ffa8 	bl	800a330 <__sinit>
 800a3e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a3e2:	07db      	lsls	r3, r3, #31
 800a3e4:	d405      	bmi.n	800a3f2 <_puts_r+0x22>
 800a3e6:	89a3      	ldrh	r3, [r4, #12]
 800a3e8:	0598      	lsls	r0, r3, #22
 800a3ea:	d402      	bmi.n	800a3f2 <_puts_r+0x22>
 800a3ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a3ee:	f000 f99e 	bl	800a72e <__retarget_lock_acquire_recursive>
 800a3f2:	89a3      	ldrh	r3, [r4, #12]
 800a3f4:	0719      	lsls	r1, r3, #28
 800a3f6:	d502      	bpl.n	800a3fe <_puts_r+0x2e>
 800a3f8:	6923      	ldr	r3, [r4, #16]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d135      	bne.n	800a46a <_puts_r+0x9a>
 800a3fe:	4621      	mov	r1, r4
 800a400:	4628      	mov	r0, r5
 800a402:	f000 f8c5 	bl	800a590 <__swsetup_r>
 800a406:	b380      	cbz	r0, 800a46a <_puts_r+0x9a>
 800a408:	f04f 35ff 	mov.w	r5, #4294967295
 800a40c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a40e:	07da      	lsls	r2, r3, #31
 800a410:	d405      	bmi.n	800a41e <_puts_r+0x4e>
 800a412:	89a3      	ldrh	r3, [r4, #12]
 800a414:	059b      	lsls	r3, r3, #22
 800a416:	d402      	bmi.n	800a41e <_puts_r+0x4e>
 800a418:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a41a:	f000 f989 	bl	800a730 <__retarget_lock_release_recursive>
 800a41e:	4628      	mov	r0, r5
 800a420:	bd70      	pop	{r4, r5, r6, pc}
 800a422:	2b00      	cmp	r3, #0
 800a424:	da04      	bge.n	800a430 <_puts_r+0x60>
 800a426:	69a2      	ldr	r2, [r4, #24]
 800a428:	429a      	cmp	r2, r3
 800a42a:	dc17      	bgt.n	800a45c <_puts_r+0x8c>
 800a42c:	290a      	cmp	r1, #10
 800a42e:	d015      	beq.n	800a45c <_puts_r+0x8c>
 800a430:	6823      	ldr	r3, [r4, #0]
 800a432:	1c5a      	adds	r2, r3, #1
 800a434:	6022      	str	r2, [r4, #0]
 800a436:	7019      	strb	r1, [r3, #0]
 800a438:	68a3      	ldr	r3, [r4, #8]
 800a43a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a43e:	3b01      	subs	r3, #1
 800a440:	60a3      	str	r3, [r4, #8]
 800a442:	2900      	cmp	r1, #0
 800a444:	d1ed      	bne.n	800a422 <_puts_r+0x52>
 800a446:	2b00      	cmp	r3, #0
 800a448:	da11      	bge.n	800a46e <_puts_r+0x9e>
 800a44a:	4622      	mov	r2, r4
 800a44c:	210a      	movs	r1, #10
 800a44e:	4628      	mov	r0, r5
 800a450:	f000 f85f 	bl	800a512 <__swbuf_r>
 800a454:	3001      	adds	r0, #1
 800a456:	d0d7      	beq.n	800a408 <_puts_r+0x38>
 800a458:	250a      	movs	r5, #10
 800a45a:	e7d7      	b.n	800a40c <_puts_r+0x3c>
 800a45c:	4622      	mov	r2, r4
 800a45e:	4628      	mov	r0, r5
 800a460:	f000 f857 	bl	800a512 <__swbuf_r>
 800a464:	3001      	adds	r0, #1
 800a466:	d1e7      	bne.n	800a438 <_puts_r+0x68>
 800a468:	e7ce      	b.n	800a408 <_puts_r+0x38>
 800a46a:	3e01      	subs	r6, #1
 800a46c:	e7e4      	b.n	800a438 <_puts_r+0x68>
 800a46e:	6823      	ldr	r3, [r4, #0]
 800a470:	1c5a      	adds	r2, r3, #1
 800a472:	6022      	str	r2, [r4, #0]
 800a474:	220a      	movs	r2, #10
 800a476:	701a      	strb	r2, [r3, #0]
 800a478:	e7ee      	b.n	800a458 <_puts_r+0x88>
	...

0800a47c <puts>:
 800a47c:	4b02      	ldr	r3, [pc, #8]	@ (800a488 <puts+0xc>)
 800a47e:	4601      	mov	r1, r0
 800a480:	6818      	ldr	r0, [r3, #0]
 800a482:	f7ff bfa5 	b.w	800a3d0 <_puts_r>
 800a486:	bf00      	nop
 800a488:	2000001c 	.word	0x2000001c

0800a48c <__sread>:
 800a48c:	b510      	push	{r4, lr}
 800a48e:	460c      	mov	r4, r1
 800a490:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a494:	f000 f8fc 	bl	800a690 <_read_r>
 800a498:	2800      	cmp	r0, #0
 800a49a:	bfab      	itete	ge
 800a49c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a49e:	89a3      	ldrhlt	r3, [r4, #12]
 800a4a0:	181b      	addge	r3, r3, r0
 800a4a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a4a6:	bfac      	ite	ge
 800a4a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a4aa:	81a3      	strhlt	r3, [r4, #12]
 800a4ac:	bd10      	pop	{r4, pc}

0800a4ae <__swrite>:
 800a4ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4b2:	461f      	mov	r7, r3
 800a4b4:	898b      	ldrh	r3, [r1, #12]
 800a4b6:	05db      	lsls	r3, r3, #23
 800a4b8:	4605      	mov	r5, r0
 800a4ba:	460c      	mov	r4, r1
 800a4bc:	4616      	mov	r6, r2
 800a4be:	d505      	bpl.n	800a4cc <__swrite+0x1e>
 800a4c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4c4:	2302      	movs	r3, #2
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	f000 f8d0 	bl	800a66c <_lseek_r>
 800a4cc:	89a3      	ldrh	r3, [r4, #12]
 800a4ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a4d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a4d6:	81a3      	strh	r3, [r4, #12]
 800a4d8:	4632      	mov	r2, r6
 800a4da:	463b      	mov	r3, r7
 800a4dc:	4628      	mov	r0, r5
 800a4de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a4e2:	f000 b8e7 	b.w	800a6b4 <_write_r>

0800a4e6 <__sseek>:
 800a4e6:	b510      	push	{r4, lr}
 800a4e8:	460c      	mov	r4, r1
 800a4ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4ee:	f000 f8bd 	bl	800a66c <_lseek_r>
 800a4f2:	1c43      	adds	r3, r0, #1
 800a4f4:	89a3      	ldrh	r3, [r4, #12]
 800a4f6:	bf15      	itete	ne
 800a4f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a4fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a4fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a502:	81a3      	strheq	r3, [r4, #12]
 800a504:	bf18      	it	ne
 800a506:	81a3      	strhne	r3, [r4, #12]
 800a508:	bd10      	pop	{r4, pc}

0800a50a <__sclose>:
 800a50a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a50e:	f000 b89d 	b.w	800a64c <_close_r>

0800a512 <__swbuf_r>:
 800a512:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a514:	460e      	mov	r6, r1
 800a516:	4614      	mov	r4, r2
 800a518:	4605      	mov	r5, r0
 800a51a:	b118      	cbz	r0, 800a524 <__swbuf_r+0x12>
 800a51c:	6a03      	ldr	r3, [r0, #32]
 800a51e:	b90b      	cbnz	r3, 800a524 <__swbuf_r+0x12>
 800a520:	f7ff ff06 	bl	800a330 <__sinit>
 800a524:	69a3      	ldr	r3, [r4, #24]
 800a526:	60a3      	str	r3, [r4, #8]
 800a528:	89a3      	ldrh	r3, [r4, #12]
 800a52a:	071a      	lsls	r2, r3, #28
 800a52c:	d501      	bpl.n	800a532 <__swbuf_r+0x20>
 800a52e:	6923      	ldr	r3, [r4, #16]
 800a530:	b943      	cbnz	r3, 800a544 <__swbuf_r+0x32>
 800a532:	4621      	mov	r1, r4
 800a534:	4628      	mov	r0, r5
 800a536:	f000 f82b 	bl	800a590 <__swsetup_r>
 800a53a:	b118      	cbz	r0, 800a544 <__swbuf_r+0x32>
 800a53c:	f04f 37ff 	mov.w	r7, #4294967295
 800a540:	4638      	mov	r0, r7
 800a542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a544:	6823      	ldr	r3, [r4, #0]
 800a546:	6922      	ldr	r2, [r4, #16]
 800a548:	1a98      	subs	r0, r3, r2
 800a54a:	6963      	ldr	r3, [r4, #20]
 800a54c:	b2f6      	uxtb	r6, r6
 800a54e:	4283      	cmp	r3, r0
 800a550:	4637      	mov	r7, r6
 800a552:	dc05      	bgt.n	800a560 <__swbuf_r+0x4e>
 800a554:	4621      	mov	r1, r4
 800a556:	4628      	mov	r0, r5
 800a558:	f000 fd6c 	bl	800b034 <_fflush_r>
 800a55c:	2800      	cmp	r0, #0
 800a55e:	d1ed      	bne.n	800a53c <__swbuf_r+0x2a>
 800a560:	68a3      	ldr	r3, [r4, #8]
 800a562:	3b01      	subs	r3, #1
 800a564:	60a3      	str	r3, [r4, #8]
 800a566:	6823      	ldr	r3, [r4, #0]
 800a568:	1c5a      	adds	r2, r3, #1
 800a56a:	6022      	str	r2, [r4, #0]
 800a56c:	701e      	strb	r6, [r3, #0]
 800a56e:	6962      	ldr	r2, [r4, #20]
 800a570:	1c43      	adds	r3, r0, #1
 800a572:	429a      	cmp	r2, r3
 800a574:	d004      	beq.n	800a580 <__swbuf_r+0x6e>
 800a576:	89a3      	ldrh	r3, [r4, #12]
 800a578:	07db      	lsls	r3, r3, #31
 800a57a:	d5e1      	bpl.n	800a540 <__swbuf_r+0x2e>
 800a57c:	2e0a      	cmp	r6, #10
 800a57e:	d1df      	bne.n	800a540 <__swbuf_r+0x2e>
 800a580:	4621      	mov	r1, r4
 800a582:	4628      	mov	r0, r5
 800a584:	f000 fd56 	bl	800b034 <_fflush_r>
 800a588:	2800      	cmp	r0, #0
 800a58a:	d0d9      	beq.n	800a540 <__swbuf_r+0x2e>
 800a58c:	e7d6      	b.n	800a53c <__swbuf_r+0x2a>
	...

0800a590 <__swsetup_r>:
 800a590:	b538      	push	{r3, r4, r5, lr}
 800a592:	4b29      	ldr	r3, [pc, #164]	@ (800a638 <__swsetup_r+0xa8>)
 800a594:	4605      	mov	r5, r0
 800a596:	6818      	ldr	r0, [r3, #0]
 800a598:	460c      	mov	r4, r1
 800a59a:	b118      	cbz	r0, 800a5a4 <__swsetup_r+0x14>
 800a59c:	6a03      	ldr	r3, [r0, #32]
 800a59e:	b90b      	cbnz	r3, 800a5a4 <__swsetup_r+0x14>
 800a5a0:	f7ff fec6 	bl	800a330 <__sinit>
 800a5a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5a8:	0719      	lsls	r1, r3, #28
 800a5aa:	d422      	bmi.n	800a5f2 <__swsetup_r+0x62>
 800a5ac:	06da      	lsls	r2, r3, #27
 800a5ae:	d407      	bmi.n	800a5c0 <__swsetup_r+0x30>
 800a5b0:	2209      	movs	r2, #9
 800a5b2:	602a      	str	r2, [r5, #0]
 800a5b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a5b8:	81a3      	strh	r3, [r4, #12]
 800a5ba:	f04f 30ff 	mov.w	r0, #4294967295
 800a5be:	e033      	b.n	800a628 <__swsetup_r+0x98>
 800a5c0:	0758      	lsls	r0, r3, #29
 800a5c2:	d512      	bpl.n	800a5ea <__swsetup_r+0x5a>
 800a5c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a5c6:	b141      	cbz	r1, 800a5da <__swsetup_r+0x4a>
 800a5c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a5cc:	4299      	cmp	r1, r3
 800a5ce:	d002      	beq.n	800a5d6 <__swsetup_r+0x46>
 800a5d0:	4628      	mov	r0, r5
 800a5d2:	f000 f8db 	bl	800a78c <_free_r>
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	6363      	str	r3, [r4, #52]	@ 0x34
 800a5da:	89a3      	ldrh	r3, [r4, #12]
 800a5dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a5e0:	81a3      	strh	r3, [r4, #12]
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	6063      	str	r3, [r4, #4]
 800a5e6:	6923      	ldr	r3, [r4, #16]
 800a5e8:	6023      	str	r3, [r4, #0]
 800a5ea:	89a3      	ldrh	r3, [r4, #12]
 800a5ec:	f043 0308 	orr.w	r3, r3, #8
 800a5f0:	81a3      	strh	r3, [r4, #12]
 800a5f2:	6923      	ldr	r3, [r4, #16]
 800a5f4:	b94b      	cbnz	r3, 800a60a <__swsetup_r+0x7a>
 800a5f6:	89a3      	ldrh	r3, [r4, #12]
 800a5f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a5fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a600:	d003      	beq.n	800a60a <__swsetup_r+0x7a>
 800a602:	4621      	mov	r1, r4
 800a604:	4628      	mov	r0, r5
 800a606:	f000 fd75 	bl	800b0f4 <__smakebuf_r>
 800a60a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a60e:	f013 0201 	ands.w	r2, r3, #1
 800a612:	d00a      	beq.n	800a62a <__swsetup_r+0x9a>
 800a614:	2200      	movs	r2, #0
 800a616:	60a2      	str	r2, [r4, #8]
 800a618:	6962      	ldr	r2, [r4, #20]
 800a61a:	4252      	negs	r2, r2
 800a61c:	61a2      	str	r2, [r4, #24]
 800a61e:	6922      	ldr	r2, [r4, #16]
 800a620:	b942      	cbnz	r2, 800a634 <__swsetup_r+0xa4>
 800a622:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a626:	d1c5      	bne.n	800a5b4 <__swsetup_r+0x24>
 800a628:	bd38      	pop	{r3, r4, r5, pc}
 800a62a:	0799      	lsls	r1, r3, #30
 800a62c:	bf58      	it	pl
 800a62e:	6962      	ldrpl	r2, [r4, #20]
 800a630:	60a2      	str	r2, [r4, #8]
 800a632:	e7f4      	b.n	800a61e <__swsetup_r+0x8e>
 800a634:	2000      	movs	r0, #0
 800a636:	e7f7      	b.n	800a628 <__swsetup_r+0x98>
 800a638:	2000001c 	.word	0x2000001c

0800a63c <memset>:
 800a63c:	4402      	add	r2, r0
 800a63e:	4603      	mov	r3, r0
 800a640:	4293      	cmp	r3, r2
 800a642:	d100      	bne.n	800a646 <memset+0xa>
 800a644:	4770      	bx	lr
 800a646:	f803 1b01 	strb.w	r1, [r3], #1
 800a64a:	e7f9      	b.n	800a640 <memset+0x4>

0800a64c <_close_r>:
 800a64c:	b538      	push	{r3, r4, r5, lr}
 800a64e:	4d06      	ldr	r5, [pc, #24]	@ (800a668 <_close_r+0x1c>)
 800a650:	2300      	movs	r3, #0
 800a652:	4604      	mov	r4, r0
 800a654:	4608      	mov	r0, r1
 800a656:	602b      	str	r3, [r5, #0]
 800a658:	f7f8 f970 	bl	800293c <_close>
 800a65c:	1c43      	adds	r3, r0, #1
 800a65e:	d102      	bne.n	800a666 <_close_r+0x1a>
 800a660:	682b      	ldr	r3, [r5, #0]
 800a662:	b103      	cbz	r3, 800a666 <_close_r+0x1a>
 800a664:	6023      	str	r3, [r4, #0]
 800a666:	bd38      	pop	{r3, r4, r5, pc}
 800a668:	20000b10 	.word	0x20000b10

0800a66c <_lseek_r>:
 800a66c:	b538      	push	{r3, r4, r5, lr}
 800a66e:	4d07      	ldr	r5, [pc, #28]	@ (800a68c <_lseek_r+0x20>)
 800a670:	4604      	mov	r4, r0
 800a672:	4608      	mov	r0, r1
 800a674:	4611      	mov	r1, r2
 800a676:	2200      	movs	r2, #0
 800a678:	602a      	str	r2, [r5, #0]
 800a67a:	461a      	mov	r2, r3
 800a67c:	f7f8 f985 	bl	800298a <_lseek>
 800a680:	1c43      	adds	r3, r0, #1
 800a682:	d102      	bne.n	800a68a <_lseek_r+0x1e>
 800a684:	682b      	ldr	r3, [r5, #0]
 800a686:	b103      	cbz	r3, 800a68a <_lseek_r+0x1e>
 800a688:	6023      	str	r3, [r4, #0]
 800a68a:	bd38      	pop	{r3, r4, r5, pc}
 800a68c:	20000b10 	.word	0x20000b10

0800a690 <_read_r>:
 800a690:	b538      	push	{r3, r4, r5, lr}
 800a692:	4d07      	ldr	r5, [pc, #28]	@ (800a6b0 <_read_r+0x20>)
 800a694:	4604      	mov	r4, r0
 800a696:	4608      	mov	r0, r1
 800a698:	4611      	mov	r1, r2
 800a69a:	2200      	movs	r2, #0
 800a69c:	602a      	str	r2, [r5, #0]
 800a69e:	461a      	mov	r2, r3
 800a6a0:	f7f8 f92f 	bl	8002902 <_read>
 800a6a4:	1c43      	adds	r3, r0, #1
 800a6a6:	d102      	bne.n	800a6ae <_read_r+0x1e>
 800a6a8:	682b      	ldr	r3, [r5, #0]
 800a6aa:	b103      	cbz	r3, 800a6ae <_read_r+0x1e>
 800a6ac:	6023      	str	r3, [r4, #0]
 800a6ae:	bd38      	pop	{r3, r4, r5, pc}
 800a6b0:	20000b10 	.word	0x20000b10

0800a6b4 <_write_r>:
 800a6b4:	b538      	push	{r3, r4, r5, lr}
 800a6b6:	4d07      	ldr	r5, [pc, #28]	@ (800a6d4 <_write_r+0x20>)
 800a6b8:	4604      	mov	r4, r0
 800a6ba:	4608      	mov	r0, r1
 800a6bc:	4611      	mov	r1, r2
 800a6be:	2200      	movs	r2, #0
 800a6c0:	602a      	str	r2, [r5, #0]
 800a6c2:	461a      	mov	r2, r3
 800a6c4:	f7f7 fef2 	bl	80024ac <_write>
 800a6c8:	1c43      	adds	r3, r0, #1
 800a6ca:	d102      	bne.n	800a6d2 <_write_r+0x1e>
 800a6cc:	682b      	ldr	r3, [r5, #0]
 800a6ce:	b103      	cbz	r3, 800a6d2 <_write_r+0x1e>
 800a6d0:	6023      	str	r3, [r4, #0]
 800a6d2:	bd38      	pop	{r3, r4, r5, pc}
 800a6d4:	20000b10 	.word	0x20000b10

0800a6d8 <__errno>:
 800a6d8:	4b01      	ldr	r3, [pc, #4]	@ (800a6e0 <__errno+0x8>)
 800a6da:	6818      	ldr	r0, [r3, #0]
 800a6dc:	4770      	bx	lr
 800a6de:	bf00      	nop
 800a6e0:	2000001c 	.word	0x2000001c

0800a6e4 <__libc_init_array>:
 800a6e4:	b570      	push	{r4, r5, r6, lr}
 800a6e6:	4d0d      	ldr	r5, [pc, #52]	@ (800a71c <__libc_init_array+0x38>)
 800a6e8:	4c0d      	ldr	r4, [pc, #52]	@ (800a720 <__libc_init_array+0x3c>)
 800a6ea:	1b64      	subs	r4, r4, r5
 800a6ec:	10a4      	asrs	r4, r4, #2
 800a6ee:	2600      	movs	r6, #0
 800a6f0:	42a6      	cmp	r6, r4
 800a6f2:	d109      	bne.n	800a708 <__libc_init_array+0x24>
 800a6f4:	4d0b      	ldr	r5, [pc, #44]	@ (800a724 <__libc_init_array+0x40>)
 800a6f6:	4c0c      	ldr	r4, [pc, #48]	@ (800a728 <__libc_init_array+0x44>)
 800a6f8:	f000 fe0e 	bl	800b318 <_init>
 800a6fc:	1b64      	subs	r4, r4, r5
 800a6fe:	10a4      	asrs	r4, r4, #2
 800a700:	2600      	movs	r6, #0
 800a702:	42a6      	cmp	r6, r4
 800a704:	d105      	bne.n	800a712 <__libc_init_array+0x2e>
 800a706:	bd70      	pop	{r4, r5, r6, pc}
 800a708:	f855 3b04 	ldr.w	r3, [r5], #4
 800a70c:	4798      	blx	r3
 800a70e:	3601      	adds	r6, #1
 800a710:	e7ee      	b.n	800a6f0 <__libc_init_array+0xc>
 800a712:	f855 3b04 	ldr.w	r3, [r5], #4
 800a716:	4798      	blx	r3
 800a718:	3601      	adds	r6, #1
 800a71a:	e7f2      	b.n	800a702 <__libc_init_array+0x1e>
 800a71c:	0800c5c4 	.word	0x0800c5c4
 800a720:	0800c5c4 	.word	0x0800c5c4
 800a724:	0800c5c4 	.word	0x0800c5c4
 800a728:	0800c5c8 	.word	0x0800c5c8

0800a72c <__retarget_lock_init_recursive>:
 800a72c:	4770      	bx	lr

0800a72e <__retarget_lock_acquire_recursive>:
 800a72e:	4770      	bx	lr

0800a730 <__retarget_lock_release_recursive>:
 800a730:	4770      	bx	lr

0800a732 <memcpy>:
 800a732:	440a      	add	r2, r1
 800a734:	4291      	cmp	r1, r2
 800a736:	f100 33ff 	add.w	r3, r0, #4294967295
 800a73a:	d100      	bne.n	800a73e <memcpy+0xc>
 800a73c:	4770      	bx	lr
 800a73e:	b510      	push	{r4, lr}
 800a740:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a744:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a748:	4291      	cmp	r1, r2
 800a74a:	d1f9      	bne.n	800a740 <memcpy+0xe>
 800a74c:	bd10      	pop	{r4, pc}
	...

0800a750 <__assert_func>:
 800a750:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a752:	4614      	mov	r4, r2
 800a754:	461a      	mov	r2, r3
 800a756:	4b09      	ldr	r3, [pc, #36]	@ (800a77c <__assert_func+0x2c>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	4605      	mov	r5, r0
 800a75c:	68d8      	ldr	r0, [r3, #12]
 800a75e:	b954      	cbnz	r4, 800a776 <__assert_func+0x26>
 800a760:	4b07      	ldr	r3, [pc, #28]	@ (800a780 <__assert_func+0x30>)
 800a762:	461c      	mov	r4, r3
 800a764:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a768:	9100      	str	r1, [sp, #0]
 800a76a:	462b      	mov	r3, r5
 800a76c:	4905      	ldr	r1, [pc, #20]	@ (800a784 <__assert_func+0x34>)
 800a76e:	f000 fc89 	bl	800b084 <fiprintf>
 800a772:	f000 fd61 	bl	800b238 <abort>
 800a776:	4b04      	ldr	r3, [pc, #16]	@ (800a788 <__assert_func+0x38>)
 800a778:	e7f4      	b.n	800a764 <__assert_func+0x14>
 800a77a:	bf00      	nop
 800a77c:	2000001c 	.word	0x2000001c
 800a780:	0800c586 	.word	0x0800c586
 800a784:	0800c558 	.word	0x0800c558
 800a788:	0800c54b 	.word	0x0800c54b

0800a78c <_free_r>:
 800a78c:	b538      	push	{r3, r4, r5, lr}
 800a78e:	4605      	mov	r5, r0
 800a790:	2900      	cmp	r1, #0
 800a792:	d041      	beq.n	800a818 <_free_r+0x8c>
 800a794:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a798:	1f0c      	subs	r4, r1, #4
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	bfb8      	it	lt
 800a79e:	18e4      	addlt	r4, r4, r3
 800a7a0:	f000 f8e8 	bl	800a974 <__malloc_lock>
 800a7a4:	4a1d      	ldr	r2, [pc, #116]	@ (800a81c <_free_r+0x90>)
 800a7a6:	6813      	ldr	r3, [r2, #0]
 800a7a8:	b933      	cbnz	r3, 800a7b8 <_free_r+0x2c>
 800a7aa:	6063      	str	r3, [r4, #4]
 800a7ac:	6014      	str	r4, [r2, #0]
 800a7ae:	4628      	mov	r0, r5
 800a7b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a7b4:	f000 b8e4 	b.w	800a980 <__malloc_unlock>
 800a7b8:	42a3      	cmp	r3, r4
 800a7ba:	d908      	bls.n	800a7ce <_free_r+0x42>
 800a7bc:	6820      	ldr	r0, [r4, #0]
 800a7be:	1821      	adds	r1, r4, r0
 800a7c0:	428b      	cmp	r3, r1
 800a7c2:	bf01      	itttt	eq
 800a7c4:	6819      	ldreq	r1, [r3, #0]
 800a7c6:	685b      	ldreq	r3, [r3, #4]
 800a7c8:	1809      	addeq	r1, r1, r0
 800a7ca:	6021      	streq	r1, [r4, #0]
 800a7cc:	e7ed      	b.n	800a7aa <_free_r+0x1e>
 800a7ce:	461a      	mov	r2, r3
 800a7d0:	685b      	ldr	r3, [r3, #4]
 800a7d2:	b10b      	cbz	r3, 800a7d8 <_free_r+0x4c>
 800a7d4:	42a3      	cmp	r3, r4
 800a7d6:	d9fa      	bls.n	800a7ce <_free_r+0x42>
 800a7d8:	6811      	ldr	r1, [r2, #0]
 800a7da:	1850      	adds	r0, r2, r1
 800a7dc:	42a0      	cmp	r0, r4
 800a7de:	d10b      	bne.n	800a7f8 <_free_r+0x6c>
 800a7e0:	6820      	ldr	r0, [r4, #0]
 800a7e2:	4401      	add	r1, r0
 800a7e4:	1850      	adds	r0, r2, r1
 800a7e6:	4283      	cmp	r3, r0
 800a7e8:	6011      	str	r1, [r2, #0]
 800a7ea:	d1e0      	bne.n	800a7ae <_free_r+0x22>
 800a7ec:	6818      	ldr	r0, [r3, #0]
 800a7ee:	685b      	ldr	r3, [r3, #4]
 800a7f0:	6053      	str	r3, [r2, #4]
 800a7f2:	4408      	add	r0, r1
 800a7f4:	6010      	str	r0, [r2, #0]
 800a7f6:	e7da      	b.n	800a7ae <_free_r+0x22>
 800a7f8:	d902      	bls.n	800a800 <_free_r+0x74>
 800a7fa:	230c      	movs	r3, #12
 800a7fc:	602b      	str	r3, [r5, #0]
 800a7fe:	e7d6      	b.n	800a7ae <_free_r+0x22>
 800a800:	6820      	ldr	r0, [r4, #0]
 800a802:	1821      	adds	r1, r4, r0
 800a804:	428b      	cmp	r3, r1
 800a806:	bf04      	itt	eq
 800a808:	6819      	ldreq	r1, [r3, #0]
 800a80a:	685b      	ldreq	r3, [r3, #4]
 800a80c:	6063      	str	r3, [r4, #4]
 800a80e:	bf04      	itt	eq
 800a810:	1809      	addeq	r1, r1, r0
 800a812:	6021      	streq	r1, [r4, #0]
 800a814:	6054      	str	r4, [r2, #4]
 800a816:	e7ca      	b.n	800a7ae <_free_r+0x22>
 800a818:	bd38      	pop	{r3, r4, r5, pc}
 800a81a:	bf00      	nop
 800a81c:	20000b1c 	.word	0x20000b1c

0800a820 <malloc>:
 800a820:	4b02      	ldr	r3, [pc, #8]	@ (800a82c <malloc+0xc>)
 800a822:	4601      	mov	r1, r0
 800a824:	6818      	ldr	r0, [r3, #0]
 800a826:	f000 b825 	b.w	800a874 <_malloc_r>
 800a82a:	bf00      	nop
 800a82c:	2000001c 	.word	0x2000001c

0800a830 <sbrk_aligned>:
 800a830:	b570      	push	{r4, r5, r6, lr}
 800a832:	4e0f      	ldr	r6, [pc, #60]	@ (800a870 <sbrk_aligned+0x40>)
 800a834:	460c      	mov	r4, r1
 800a836:	6831      	ldr	r1, [r6, #0]
 800a838:	4605      	mov	r5, r0
 800a83a:	b911      	cbnz	r1, 800a842 <sbrk_aligned+0x12>
 800a83c:	f000 fcec 	bl	800b218 <_sbrk_r>
 800a840:	6030      	str	r0, [r6, #0]
 800a842:	4621      	mov	r1, r4
 800a844:	4628      	mov	r0, r5
 800a846:	f000 fce7 	bl	800b218 <_sbrk_r>
 800a84a:	1c43      	adds	r3, r0, #1
 800a84c:	d103      	bne.n	800a856 <sbrk_aligned+0x26>
 800a84e:	f04f 34ff 	mov.w	r4, #4294967295
 800a852:	4620      	mov	r0, r4
 800a854:	bd70      	pop	{r4, r5, r6, pc}
 800a856:	1cc4      	adds	r4, r0, #3
 800a858:	f024 0403 	bic.w	r4, r4, #3
 800a85c:	42a0      	cmp	r0, r4
 800a85e:	d0f8      	beq.n	800a852 <sbrk_aligned+0x22>
 800a860:	1a21      	subs	r1, r4, r0
 800a862:	4628      	mov	r0, r5
 800a864:	f000 fcd8 	bl	800b218 <_sbrk_r>
 800a868:	3001      	adds	r0, #1
 800a86a:	d1f2      	bne.n	800a852 <sbrk_aligned+0x22>
 800a86c:	e7ef      	b.n	800a84e <sbrk_aligned+0x1e>
 800a86e:	bf00      	nop
 800a870:	20000b18 	.word	0x20000b18

0800a874 <_malloc_r>:
 800a874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a878:	1ccd      	adds	r5, r1, #3
 800a87a:	f025 0503 	bic.w	r5, r5, #3
 800a87e:	3508      	adds	r5, #8
 800a880:	2d0c      	cmp	r5, #12
 800a882:	bf38      	it	cc
 800a884:	250c      	movcc	r5, #12
 800a886:	2d00      	cmp	r5, #0
 800a888:	4606      	mov	r6, r0
 800a88a:	db01      	blt.n	800a890 <_malloc_r+0x1c>
 800a88c:	42a9      	cmp	r1, r5
 800a88e:	d904      	bls.n	800a89a <_malloc_r+0x26>
 800a890:	230c      	movs	r3, #12
 800a892:	6033      	str	r3, [r6, #0]
 800a894:	2000      	movs	r0, #0
 800a896:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a89a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a970 <_malloc_r+0xfc>
 800a89e:	f000 f869 	bl	800a974 <__malloc_lock>
 800a8a2:	f8d8 3000 	ldr.w	r3, [r8]
 800a8a6:	461c      	mov	r4, r3
 800a8a8:	bb44      	cbnz	r4, 800a8fc <_malloc_r+0x88>
 800a8aa:	4629      	mov	r1, r5
 800a8ac:	4630      	mov	r0, r6
 800a8ae:	f7ff ffbf 	bl	800a830 <sbrk_aligned>
 800a8b2:	1c43      	adds	r3, r0, #1
 800a8b4:	4604      	mov	r4, r0
 800a8b6:	d158      	bne.n	800a96a <_malloc_r+0xf6>
 800a8b8:	f8d8 4000 	ldr.w	r4, [r8]
 800a8bc:	4627      	mov	r7, r4
 800a8be:	2f00      	cmp	r7, #0
 800a8c0:	d143      	bne.n	800a94a <_malloc_r+0xd6>
 800a8c2:	2c00      	cmp	r4, #0
 800a8c4:	d04b      	beq.n	800a95e <_malloc_r+0xea>
 800a8c6:	6823      	ldr	r3, [r4, #0]
 800a8c8:	4639      	mov	r1, r7
 800a8ca:	4630      	mov	r0, r6
 800a8cc:	eb04 0903 	add.w	r9, r4, r3
 800a8d0:	f000 fca2 	bl	800b218 <_sbrk_r>
 800a8d4:	4581      	cmp	r9, r0
 800a8d6:	d142      	bne.n	800a95e <_malloc_r+0xea>
 800a8d8:	6821      	ldr	r1, [r4, #0]
 800a8da:	1a6d      	subs	r5, r5, r1
 800a8dc:	4629      	mov	r1, r5
 800a8de:	4630      	mov	r0, r6
 800a8e0:	f7ff ffa6 	bl	800a830 <sbrk_aligned>
 800a8e4:	3001      	adds	r0, #1
 800a8e6:	d03a      	beq.n	800a95e <_malloc_r+0xea>
 800a8e8:	6823      	ldr	r3, [r4, #0]
 800a8ea:	442b      	add	r3, r5
 800a8ec:	6023      	str	r3, [r4, #0]
 800a8ee:	f8d8 3000 	ldr.w	r3, [r8]
 800a8f2:	685a      	ldr	r2, [r3, #4]
 800a8f4:	bb62      	cbnz	r2, 800a950 <_malloc_r+0xdc>
 800a8f6:	f8c8 7000 	str.w	r7, [r8]
 800a8fa:	e00f      	b.n	800a91c <_malloc_r+0xa8>
 800a8fc:	6822      	ldr	r2, [r4, #0]
 800a8fe:	1b52      	subs	r2, r2, r5
 800a900:	d420      	bmi.n	800a944 <_malloc_r+0xd0>
 800a902:	2a0b      	cmp	r2, #11
 800a904:	d917      	bls.n	800a936 <_malloc_r+0xc2>
 800a906:	1961      	adds	r1, r4, r5
 800a908:	42a3      	cmp	r3, r4
 800a90a:	6025      	str	r5, [r4, #0]
 800a90c:	bf18      	it	ne
 800a90e:	6059      	strne	r1, [r3, #4]
 800a910:	6863      	ldr	r3, [r4, #4]
 800a912:	bf08      	it	eq
 800a914:	f8c8 1000 	streq.w	r1, [r8]
 800a918:	5162      	str	r2, [r4, r5]
 800a91a:	604b      	str	r3, [r1, #4]
 800a91c:	4630      	mov	r0, r6
 800a91e:	f000 f82f 	bl	800a980 <__malloc_unlock>
 800a922:	f104 000b 	add.w	r0, r4, #11
 800a926:	1d23      	adds	r3, r4, #4
 800a928:	f020 0007 	bic.w	r0, r0, #7
 800a92c:	1ac2      	subs	r2, r0, r3
 800a92e:	bf1c      	itt	ne
 800a930:	1a1b      	subne	r3, r3, r0
 800a932:	50a3      	strne	r3, [r4, r2]
 800a934:	e7af      	b.n	800a896 <_malloc_r+0x22>
 800a936:	6862      	ldr	r2, [r4, #4]
 800a938:	42a3      	cmp	r3, r4
 800a93a:	bf0c      	ite	eq
 800a93c:	f8c8 2000 	streq.w	r2, [r8]
 800a940:	605a      	strne	r2, [r3, #4]
 800a942:	e7eb      	b.n	800a91c <_malloc_r+0xa8>
 800a944:	4623      	mov	r3, r4
 800a946:	6864      	ldr	r4, [r4, #4]
 800a948:	e7ae      	b.n	800a8a8 <_malloc_r+0x34>
 800a94a:	463c      	mov	r4, r7
 800a94c:	687f      	ldr	r7, [r7, #4]
 800a94e:	e7b6      	b.n	800a8be <_malloc_r+0x4a>
 800a950:	461a      	mov	r2, r3
 800a952:	685b      	ldr	r3, [r3, #4]
 800a954:	42a3      	cmp	r3, r4
 800a956:	d1fb      	bne.n	800a950 <_malloc_r+0xdc>
 800a958:	2300      	movs	r3, #0
 800a95a:	6053      	str	r3, [r2, #4]
 800a95c:	e7de      	b.n	800a91c <_malloc_r+0xa8>
 800a95e:	230c      	movs	r3, #12
 800a960:	6033      	str	r3, [r6, #0]
 800a962:	4630      	mov	r0, r6
 800a964:	f000 f80c 	bl	800a980 <__malloc_unlock>
 800a968:	e794      	b.n	800a894 <_malloc_r+0x20>
 800a96a:	6005      	str	r5, [r0, #0]
 800a96c:	e7d6      	b.n	800a91c <_malloc_r+0xa8>
 800a96e:	bf00      	nop
 800a970:	20000b1c 	.word	0x20000b1c

0800a974 <__malloc_lock>:
 800a974:	4801      	ldr	r0, [pc, #4]	@ (800a97c <__malloc_lock+0x8>)
 800a976:	f7ff beda 	b.w	800a72e <__retarget_lock_acquire_recursive>
 800a97a:	bf00      	nop
 800a97c:	20000b14 	.word	0x20000b14

0800a980 <__malloc_unlock>:
 800a980:	4801      	ldr	r0, [pc, #4]	@ (800a988 <__malloc_unlock+0x8>)
 800a982:	f7ff bed5 	b.w	800a730 <__retarget_lock_release_recursive>
 800a986:	bf00      	nop
 800a988:	20000b14 	.word	0x20000b14

0800a98c <__sfputc_r>:
 800a98c:	6893      	ldr	r3, [r2, #8]
 800a98e:	3b01      	subs	r3, #1
 800a990:	2b00      	cmp	r3, #0
 800a992:	b410      	push	{r4}
 800a994:	6093      	str	r3, [r2, #8]
 800a996:	da08      	bge.n	800a9aa <__sfputc_r+0x1e>
 800a998:	6994      	ldr	r4, [r2, #24]
 800a99a:	42a3      	cmp	r3, r4
 800a99c:	db01      	blt.n	800a9a2 <__sfputc_r+0x16>
 800a99e:	290a      	cmp	r1, #10
 800a9a0:	d103      	bne.n	800a9aa <__sfputc_r+0x1e>
 800a9a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a9a6:	f7ff bdb4 	b.w	800a512 <__swbuf_r>
 800a9aa:	6813      	ldr	r3, [r2, #0]
 800a9ac:	1c58      	adds	r0, r3, #1
 800a9ae:	6010      	str	r0, [r2, #0]
 800a9b0:	7019      	strb	r1, [r3, #0]
 800a9b2:	4608      	mov	r0, r1
 800a9b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a9b8:	4770      	bx	lr

0800a9ba <__sfputs_r>:
 800a9ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9bc:	4606      	mov	r6, r0
 800a9be:	460f      	mov	r7, r1
 800a9c0:	4614      	mov	r4, r2
 800a9c2:	18d5      	adds	r5, r2, r3
 800a9c4:	42ac      	cmp	r4, r5
 800a9c6:	d101      	bne.n	800a9cc <__sfputs_r+0x12>
 800a9c8:	2000      	movs	r0, #0
 800a9ca:	e007      	b.n	800a9dc <__sfputs_r+0x22>
 800a9cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9d0:	463a      	mov	r2, r7
 800a9d2:	4630      	mov	r0, r6
 800a9d4:	f7ff ffda 	bl	800a98c <__sfputc_r>
 800a9d8:	1c43      	adds	r3, r0, #1
 800a9da:	d1f3      	bne.n	800a9c4 <__sfputs_r+0xa>
 800a9dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a9e0 <_vfiprintf_r>:
 800a9e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9e4:	460d      	mov	r5, r1
 800a9e6:	b09d      	sub	sp, #116	@ 0x74
 800a9e8:	4614      	mov	r4, r2
 800a9ea:	4698      	mov	r8, r3
 800a9ec:	4606      	mov	r6, r0
 800a9ee:	b118      	cbz	r0, 800a9f8 <_vfiprintf_r+0x18>
 800a9f0:	6a03      	ldr	r3, [r0, #32]
 800a9f2:	b90b      	cbnz	r3, 800a9f8 <_vfiprintf_r+0x18>
 800a9f4:	f7ff fc9c 	bl	800a330 <__sinit>
 800a9f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a9fa:	07d9      	lsls	r1, r3, #31
 800a9fc:	d405      	bmi.n	800aa0a <_vfiprintf_r+0x2a>
 800a9fe:	89ab      	ldrh	r3, [r5, #12]
 800aa00:	059a      	lsls	r2, r3, #22
 800aa02:	d402      	bmi.n	800aa0a <_vfiprintf_r+0x2a>
 800aa04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aa06:	f7ff fe92 	bl	800a72e <__retarget_lock_acquire_recursive>
 800aa0a:	89ab      	ldrh	r3, [r5, #12]
 800aa0c:	071b      	lsls	r3, r3, #28
 800aa0e:	d501      	bpl.n	800aa14 <_vfiprintf_r+0x34>
 800aa10:	692b      	ldr	r3, [r5, #16]
 800aa12:	b99b      	cbnz	r3, 800aa3c <_vfiprintf_r+0x5c>
 800aa14:	4629      	mov	r1, r5
 800aa16:	4630      	mov	r0, r6
 800aa18:	f7ff fdba 	bl	800a590 <__swsetup_r>
 800aa1c:	b170      	cbz	r0, 800aa3c <_vfiprintf_r+0x5c>
 800aa1e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aa20:	07dc      	lsls	r4, r3, #31
 800aa22:	d504      	bpl.n	800aa2e <_vfiprintf_r+0x4e>
 800aa24:	f04f 30ff 	mov.w	r0, #4294967295
 800aa28:	b01d      	add	sp, #116	@ 0x74
 800aa2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa2e:	89ab      	ldrh	r3, [r5, #12]
 800aa30:	0598      	lsls	r0, r3, #22
 800aa32:	d4f7      	bmi.n	800aa24 <_vfiprintf_r+0x44>
 800aa34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aa36:	f7ff fe7b 	bl	800a730 <__retarget_lock_release_recursive>
 800aa3a:	e7f3      	b.n	800aa24 <_vfiprintf_r+0x44>
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa40:	2320      	movs	r3, #32
 800aa42:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aa46:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa4a:	2330      	movs	r3, #48	@ 0x30
 800aa4c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800abfc <_vfiprintf_r+0x21c>
 800aa50:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aa54:	f04f 0901 	mov.w	r9, #1
 800aa58:	4623      	mov	r3, r4
 800aa5a:	469a      	mov	sl, r3
 800aa5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa60:	b10a      	cbz	r2, 800aa66 <_vfiprintf_r+0x86>
 800aa62:	2a25      	cmp	r2, #37	@ 0x25
 800aa64:	d1f9      	bne.n	800aa5a <_vfiprintf_r+0x7a>
 800aa66:	ebba 0b04 	subs.w	fp, sl, r4
 800aa6a:	d00b      	beq.n	800aa84 <_vfiprintf_r+0xa4>
 800aa6c:	465b      	mov	r3, fp
 800aa6e:	4622      	mov	r2, r4
 800aa70:	4629      	mov	r1, r5
 800aa72:	4630      	mov	r0, r6
 800aa74:	f7ff ffa1 	bl	800a9ba <__sfputs_r>
 800aa78:	3001      	adds	r0, #1
 800aa7a:	f000 80a7 	beq.w	800abcc <_vfiprintf_r+0x1ec>
 800aa7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aa80:	445a      	add	r2, fp
 800aa82:	9209      	str	r2, [sp, #36]	@ 0x24
 800aa84:	f89a 3000 	ldrb.w	r3, [sl]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	f000 809f 	beq.w	800abcc <_vfiprintf_r+0x1ec>
 800aa8e:	2300      	movs	r3, #0
 800aa90:	f04f 32ff 	mov.w	r2, #4294967295
 800aa94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa98:	f10a 0a01 	add.w	sl, sl, #1
 800aa9c:	9304      	str	r3, [sp, #16]
 800aa9e:	9307      	str	r3, [sp, #28]
 800aaa0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aaa4:	931a      	str	r3, [sp, #104]	@ 0x68
 800aaa6:	4654      	mov	r4, sl
 800aaa8:	2205      	movs	r2, #5
 800aaaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aaae:	4853      	ldr	r0, [pc, #332]	@ (800abfc <_vfiprintf_r+0x21c>)
 800aab0:	f7f5 fb9e 	bl	80001f0 <memchr>
 800aab4:	9a04      	ldr	r2, [sp, #16]
 800aab6:	b9d8      	cbnz	r0, 800aaf0 <_vfiprintf_r+0x110>
 800aab8:	06d1      	lsls	r1, r2, #27
 800aaba:	bf44      	itt	mi
 800aabc:	2320      	movmi	r3, #32
 800aabe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aac2:	0713      	lsls	r3, r2, #28
 800aac4:	bf44      	itt	mi
 800aac6:	232b      	movmi	r3, #43	@ 0x2b
 800aac8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aacc:	f89a 3000 	ldrb.w	r3, [sl]
 800aad0:	2b2a      	cmp	r3, #42	@ 0x2a
 800aad2:	d015      	beq.n	800ab00 <_vfiprintf_r+0x120>
 800aad4:	9a07      	ldr	r2, [sp, #28]
 800aad6:	4654      	mov	r4, sl
 800aad8:	2000      	movs	r0, #0
 800aada:	f04f 0c0a 	mov.w	ip, #10
 800aade:	4621      	mov	r1, r4
 800aae0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aae4:	3b30      	subs	r3, #48	@ 0x30
 800aae6:	2b09      	cmp	r3, #9
 800aae8:	d94b      	bls.n	800ab82 <_vfiprintf_r+0x1a2>
 800aaea:	b1b0      	cbz	r0, 800ab1a <_vfiprintf_r+0x13a>
 800aaec:	9207      	str	r2, [sp, #28]
 800aaee:	e014      	b.n	800ab1a <_vfiprintf_r+0x13a>
 800aaf0:	eba0 0308 	sub.w	r3, r0, r8
 800aaf4:	fa09 f303 	lsl.w	r3, r9, r3
 800aaf8:	4313      	orrs	r3, r2
 800aafa:	9304      	str	r3, [sp, #16]
 800aafc:	46a2      	mov	sl, r4
 800aafe:	e7d2      	b.n	800aaa6 <_vfiprintf_r+0xc6>
 800ab00:	9b03      	ldr	r3, [sp, #12]
 800ab02:	1d19      	adds	r1, r3, #4
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	9103      	str	r1, [sp, #12]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	bfbb      	ittet	lt
 800ab0c:	425b      	neglt	r3, r3
 800ab0e:	f042 0202 	orrlt.w	r2, r2, #2
 800ab12:	9307      	strge	r3, [sp, #28]
 800ab14:	9307      	strlt	r3, [sp, #28]
 800ab16:	bfb8      	it	lt
 800ab18:	9204      	strlt	r2, [sp, #16]
 800ab1a:	7823      	ldrb	r3, [r4, #0]
 800ab1c:	2b2e      	cmp	r3, #46	@ 0x2e
 800ab1e:	d10a      	bne.n	800ab36 <_vfiprintf_r+0x156>
 800ab20:	7863      	ldrb	r3, [r4, #1]
 800ab22:	2b2a      	cmp	r3, #42	@ 0x2a
 800ab24:	d132      	bne.n	800ab8c <_vfiprintf_r+0x1ac>
 800ab26:	9b03      	ldr	r3, [sp, #12]
 800ab28:	1d1a      	adds	r2, r3, #4
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	9203      	str	r2, [sp, #12]
 800ab2e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ab32:	3402      	adds	r4, #2
 800ab34:	9305      	str	r3, [sp, #20]
 800ab36:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ac0c <_vfiprintf_r+0x22c>
 800ab3a:	7821      	ldrb	r1, [r4, #0]
 800ab3c:	2203      	movs	r2, #3
 800ab3e:	4650      	mov	r0, sl
 800ab40:	f7f5 fb56 	bl	80001f0 <memchr>
 800ab44:	b138      	cbz	r0, 800ab56 <_vfiprintf_r+0x176>
 800ab46:	9b04      	ldr	r3, [sp, #16]
 800ab48:	eba0 000a 	sub.w	r0, r0, sl
 800ab4c:	2240      	movs	r2, #64	@ 0x40
 800ab4e:	4082      	lsls	r2, r0
 800ab50:	4313      	orrs	r3, r2
 800ab52:	3401      	adds	r4, #1
 800ab54:	9304      	str	r3, [sp, #16]
 800ab56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab5a:	4829      	ldr	r0, [pc, #164]	@ (800ac00 <_vfiprintf_r+0x220>)
 800ab5c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ab60:	2206      	movs	r2, #6
 800ab62:	f7f5 fb45 	bl	80001f0 <memchr>
 800ab66:	2800      	cmp	r0, #0
 800ab68:	d03f      	beq.n	800abea <_vfiprintf_r+0x20a>
 800ab6a:	4b26      	ldr	r3, [pc, #152]	@ (800ac04 <_vfiprintf_r+0x224>)
 800ab6c:	bb1b      	cbnz	r3, 800abb6 <_vfiprintf_r+0x1d6>
 800ab6e:	9b03      	ldr	r3, [sp, #12]
 800ab70:	3307      	adds	r3, #7
 800ab72:	f023 0307 	bic.w	r3, r3, #7
 800ab76:	3308      	adds	r3, #8
 800ab78:	9303      	str	r3, [sp, #12]
 800ab7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab7c:	443b      	add	r3, r7
 800ab7e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab80:	e76a      	b.n	800aa58 <_vfiprintf_r+0x78>
 800ab82:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab86:	460c      	mov	r4, r1
 800ab88:	2001      	movs	r0, #1
 800ab8a:	e7a8      	b.n	800aade <_vfiprintf_r+0xfe>
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	3401      	adds	r4, #1
 800ab90:	9305      	str	r3, [sp, #20]
 800ab92:	4619      	mov	r1, r3
 800ab94:	f04f 0c0a 	mov.w	ip, #10
 800ab98:	4620      	mov	r0, r4
 800ab9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab9e:	3a30      	subs	r2, #48	@ 0x30
 800aba0:	2a09      	cmp	r2, #9
 800aba2:	d903      	bls.n	800abac <_vfiprintf_r+0x1cc>
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d0c6      	beq.n	800ab36 <_vfiprintf_r+0x156>
 800aba8:	9105      	str	r1, [sp, #20]
 800abaa:	e7c4      	b.n	800ab36 <_vfiprintf_r+0x156>
 800abac:	fb0c 2101 	mla	r1, ip, r1, r2
 800abb0:	4604      	mov	r4, r0
 800abb2:	2301      	movs	r3, #1
 800abb4:	e7f0      	b.n	800ab98 <_vfiprintf_r+0x1b8>
 800abb6:	ab03      	add	r3, sp, #12
 800abb8:	9300      	str	r3, [sp, #0]
 800abba:	462a      	mov	r2, r5
 800abbc:	4b12      	ldr	r3, [pc, #72]	@ (800ac08 <_vfiprintf_r+0x228>)
 800abbe:	a904      	add	r1, sp, #16
 800abc0:	4630      	mov	r0, r6
 800abc2:	f3af 8000 	nop.w
 800abc6:	4607      	mov	r7, r0
 800abc8:	1c78      	adds	r0, r7, #1
 800abca:	d1d6      	bne.n	800ab7a <_vfiprintf_r+0x19a>
 800abcc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800abce:	07d9      	lsls	r1, r3, #31
 800abd0:	d405      	bmi.n	800abde <_vfiprintf_r+0x1fe>
 800abd2:	89ab      	ldrh	r3, [r5, #12]
 800abd4:	059a      	lsls	r2, r3, #22
 800abd6:	d402      	bmi.n	800abde <_vfiprintf_r+0x1fe>
 800abd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800abda:	f7ff fda9 	bl	800a730 <__retarget_lock_release_recursive>
 800abde:	89ab      	ldrh	r3, [r5, #12]
 800abe0:	065b      	lsls	r3, r3, #25
 800abe2:	f53f af1f 	bmi.w	800aa24 <_vfiprintf_r+0x44>
 800abe6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800abe8:	e71e      	b.n	800aa28 <_vfiprintf_r+0x48>
 800abea:	ab03      	add	r3, sp, #12
 800abec:	9300      	str	r3, [sp, #0]
 800abee:	462a      	mov	r2, r5
 800abf0:	4b05      	ldr	r3, [pc, #20]	@ (800ac08 <_vfiprintf_r+0x228>)
 800abf2:	a904      	add	r1, sp, #16
 800abf4:	4630      	mov	r0, r6
 800abf6:	f000 f879 	bl	800acec <_printf_i>
 800abfa:	e7e4      	b.n	800abc6 <_vfiprintf_r+0x1e6>
 800abfc:	0800c587 	.word	0x0800c587
 800ac00:	0800c591 	.word	0x0800c591
 800ac04:	00000000 	.word	0x00000000
 800ac08:	0800a9bb 	.word	0x0800a9bb
 800ac0c:	0800c58d 	.word	0x0800c58d

0800ac10 <_printf_common>:
 800ac10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac14:	4616      	mov	r6, r2
 800ac16:	4698      	mov	r8, r3
 800ac18:	688a      	ldr	r2, [r1, #8]
 800ac1a:	690b      	ldr	r3, [r1, #16]
 800ac1c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ac20:	4293      	cmp	r3, r2
 800ac22:	bfb8      	it	lt
 800ac24:	4613      	movlt	r3, r2
 800ac26:	6033      	str	r3, [r6, #0]
 800ac28:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ac2c:	4607      	mov	r7, r0
 800ac2e:	460c      	mov	r4, r1
 800ac30:	b10a      	cbz	r2, 800ac36 <_printf_common+0x26>
 800ac32:	3301      	adds	r3, #1
 800ac34:	6033      	str	r3, [r6, #0]
 800ac36:	6823      	ldr	r3, [r4, #0]
 800ac38:	0699      	lsls	r1, r3, #26
 800ac3a:	bf42      	ittt	mi
 800ac3c:	6833      	ldrmi	r3, [r6, #0]
 800ac3e:	3302      	addmi	r3, #2
 800ac40:	6033      	strmi	r3, [r6, #0]
 800ac42:	6825      	ldr	r5, [r4, #0]
 800ac44:	f015 0506 	ands.w	r5, r5, #6
 800ac48:	d106      	bne.n	800ac58 <_printf_common+0x48>
 800ac4a:	f104 0a19 	add.w	sl, r4, #25
 800ac4e:	68e3      	ldr	r3, [r4, #12]
 800ac50:	6832      	ldr	r2, [r6, #0]
 800ac52:	1a9b      	subs	r3, r3, r2
 800ac54:	42ab      	cmp	r3, r5
 800ac56:	dc26      	bgt.n	800aca6 <_printf_common+0x96>
 800ac58:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ac5c:	6822      	ldr	r2, [r4, #0]
 800ac5e:	3b00      	subs	r3, #0
 800ac60:	bf18      	it	ne
 800ac62:	2301      	movne	r3, #1
 800ac64:	0692      	lsls	r2, r2, #26
 800ac66:	d42b      	bmi.n	800acc0 <_printf_common+0xb0>
 800ac68:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ac6c:	4641      	mov	r1, r8
 800ac6e:	4638      	mov	r0, r7
 800ac70:	47c8      	blx	r9
 800ac72:	3001      	adds	r0, #1
 800ac74:	d01e      	beq.n	800acb4 <_printf_common+0xa4>
 800ac76:	6823      	ldr	r3, [r4, #0]
 800ac78:	6922      	ldr	r2, [r4, #16]
 800ac7a:	f003 0306 	and.w	r3, r3, #6
 800ac7e:	2b04      	cmp	r3, #4
 800ac80:	bf02      	ittt	eq
 800ac82:	68e5      	ldreq	r5, [r4, #12]
 800ac84:	6833      	ldreq	r3, [r6, #0]
 800ac86:	1aed      	subeq	r5, r5, r3
 800ac88:	68a3      	ldr	r3, [r4, #8]
 800ac8a:	bf0c      	ite	eq
 800ac8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ac90:	2500      	movne	r5, #0
 800ac92:	4293      	cmp	r3, r2
 800ac94:	bfc4      	itt	gt
 800ac96:	1a9b      	subgt	r3, r3, r2
 800ac98:	18ed      	addgt	r5, r5, r3
 800ac9a:	2600      	movs	r6, #0
 800ac9c:	341a      	adds	r4, #26
 800ac9e:	42b5      	cmp	r5, r6
 800aca0:	d11a      	bne.n	800acd8 <_printf_common+0xc8>
 800aca2:	2000      	movs	r0, #0
 800aca4:	e008      	b.n	800acb8 <_printf_common+0xa8>
 800aca6:	2301      	movs	r3, #1
 800aca8:	4652      	mov	r2, sl
 800acaa:	4641      	mov	r1, r8
 800acac:	4638      	mov	r0, r7
 800acae:	47c8      	blx	r9
 800acb0:	3001      	adds	r0, #1
 800acb2:	d103      	bne.n	800acbc <_printf_common+0xac>
 800acb4:	f04f 30ff 	mov.w	r0, #4294967295
 800acb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acbc:	3501      	adds	r5, #1
 800acbe:	e7c6      	b.n	800ac4e <_printf_common+0x3e>
 800acc0:	18e1      	adds	r1, r4, r3
 800acc2:	1c5a      	adds	r2, r3, #1
 800acc4:	2030      	movs	r0, #48	@ 0x30
 800acc6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800acca:	4422      	add	r2, r4
 800accc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800acd0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800acd4:	3302      	adds	r3, #2
 800acd6:	e7c7      	b.n	800ac68 <_printf_common+0x58>
 800acd8:	2301      	movs	r3, #1
 800acda:	4622      	mov	r2, r4
 800acdc:	4641      	mov	r1, r8
 800acde:	4638      	mov	r0, r7
 800ace0:	47c8      	blx	r9
 800ace2:	3001      	adds	r0, #1
 800ace4:	d0e6      	beq.n	800acb4 <_printf_common+0xa4>
 800ace6:	3601      	adds	r6, #1
 800ace8:	e7d9      	b.n	800ac9e <_printf_common+0x8e>
	...

0800acec <_printf_i>:
 800acec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800acf0:	7e0f      	ldrb	r7, [r1, #24]
 800acf2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800acf4:	2f78      	cmp	r7, #120	@ 0x78
 800acf6:	4691      	mov	r9, r2
 800acf8:	4680      	mov	r8, r0
 800acfa:	460c      	mov	r4, r1
 800acfc:	469a      	mov	sl, r3
 800acfe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ad02:	d807      	bhi.n	800ad14 <_printf_i+0x28>
 800ad04:	2f62      	cmp	r7, #98	@ 0x62
 800ad06:	d80a      	bhi.n	800ad1e <_printf_i+0x32>
 800ad08:	2f00      	cmp	r7, #0
 800ad0a:	f000 80d2 	beq.w	800aeb2 <_printf_i+0x1c6>
 800ad0e:	2f58      	cmp	r7, #88	@ 0x58
 800ad10:	f000 80b9 	beq.w	800ae86 <_printf_i+0x19a>
 800ad14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ad18:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ad1c:	e03a      	b.n	800ad94 <_printf_i+0xa8>
 800ad1e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ad22:	2b15      	cmp	r3, #21
 800ad24:	d8f6      	bhi.n	800ad14 <_printf_i+0x28>
 800ad26:	a101      	add	r1, pc, #4	@ (adr r1, 800ad2c <_printf_i+0x40>)
 800ad28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ad2c:	0800ad85 	.word	0x0800ad85
 800ad30:	0800ad99 	.word	0x0800ad99
 800ad34:	0800ad15 	.word	0x0800ad15
 800ad38:	0800ad15 	.word	0x0800ad15
 800ad3c:	0800ad15 	.word	0x0800ad15
 800ad40:	0800ad15 	.word	0x0800ad15
 800ad44:	0800ad99 	.word	0x0800ad99
 800ad48:	0800ad15 	.word	0x0800ad15
 800ad4c:	0800ad15 	.word	0x0800ad15
 800ad50:	0800ad15 	.word	0x0800ad15
 800ad54:	0800ad15 	.word	0x0800ad15
 800ad58:	0800ae99 	.word	0x0800ae99
 800ad5c:	0800adc3 	.word	0x0800adc3
 800ad60:	0800ae53 	.word	0x0800ae53
 800ad64:	0800ad15 	.word	0x0800ad15
 800ad68:	0800ad15 	.word	0x0800ad15
 800ad6c:	0800aebb 	.word	0x0800aebb
 800ad70:	0800ad15 	.word	0x0800ad15
 800ad74:	0800adc3 	.word	0x0800adc3
 800ad78:	0800ad15 	.word	0x0800ad15
 800ad7c:	0800ad15 	.word	0x0800ad15
 800ad80:	0800ae5b 	.word	0x0800ae5b
 800ad84:	6833      	ldr	r3, [r6, #0]
 800ad86:	1d1a      	adds	r2, r3, #4
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	6032      	str	r2, [r6, #0]
 800ad8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ad90:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ad94:	2301      	movs	r3, #1
 800ad96:	e09d      	b.n	800aed4 <_printf_i+0x1e8>
 800ad98:	6833      	ldr	r3, [r6, #0]
 800ad9a:	6820      	ldr	r0, [r4, #0]
 800ad9c:	1d19      	adds	r1, r3, #4
 800ad9e:	6031      	str	r1, [r6, #0]
 800ada0:	0606      	lsls	r6, r0, #24
 800ada2:	d501      	bpl.n	800ada8 <_printf_i+0xbc>
 800ada4:	681d      	ldr	r5, [r3, #0]
 800ada6:	e003      	b.n	800adb0 <_printf_i+0xc4>
 800ada8:	0645      	lsls	r5, r0, #25
 800adaa:	d5fb      	bpl.n	800ada4 <_printf_i+0xb8>
 800adac:	f9b3 5000 	ldrsh.w	r5, [r3]
 800adb0:	2d00      	cmp	r5, #0
 800adb2:	da03      	bge.n	800adbc <_printf_i+0xd0>
 800adb4:	232d      	movs	r3, #45	@ 0x2d
 800adb6:	426d      	negs	r5, r5
 800adb8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800adbc:	4859      	ldr	r0, [pc, #356]	@ (800af24 <_printf_i+0x238>)
 800adbe:	230a      	movs	r3, #10
 800adc0:	e011      	b.n	800ade6 <_printf_i+0xfa>
 800adc2:	6821      	ldr	r1, [r4, #0]
 800adc4:	6833      	ldr	r3, [r6, #0]
 800adc6:	0608      	lsls	r0, r1, #24
 800adc8:	f853 5b04 	ldr.w	r5, [r3], #4
 800adcc:	d402      	bmi.n	800add4 <_printf_i+0xe8>
 800adce:	0649      	lsls	r1, r1, #25
 800add0:	bf48      	it	mi
 800add2:	b2ad      	uxthmi	r5, r5
 800add4:	2f6f      	cmp	r7, #111	@ 0x6f
 800add6:	4853      	ldr	r0, [pc, #332]	@ (800af24 <_printf_i+0x238>)
 800add8:	6033      	str	r3, [r6, #0]
 800adda:	bf14      	ite	ne
 800addc:	230a      	movne	r3, #10
 800adde:	2308      	moveq	r3, #8
 800ade0:	2100      	movs	r1, #0
 800ade2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ade6:	6866      	ldr	r6, [r4, #4]
 800ade8:	60a6      	str	r6, [r4, #8]
 800adea:	2e00      	cmp	r6, #0
 800adec:	bfa2      	ittt	ge
 800adee:	6821      	ldrge	r1, [r4, #0]
 800adf0:	f021 0104 	bicge.w	r1, r1, #4
 800adf4:	6021      	strge	r1, [r4, #0]
 800adf6:	b90d      	cbnz	r5, 800adfc <_printf_i+0x110>
 800adf8:	2e00      	cmp	r6, #0
 800adfa:	d04b      	beq.n	800ae94 <_printf_i+0x1a8>
 800adfc:	4616      	mov	r6, r2
 800adfe:	fbb5 f1f3 	udiv	r1, r5, r3
 800ae02:	fb03 5711 	mls	r7, r3, r1, r5
 800ae06:	5dc7      	ldrb	r7, [r0, r7]
 800ae08:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ae0c:	462f      	mov	r7, r5
 800ae0e:	42bb      	cmp	r3, r7
 800ae10:	460d      	mov	r5, r1
 800ae12:	d9f4      	bls.n	800adfe <_printf_i+0x112>
 800ae14:	2b08      	cmp	r3, #8
 800ae16:	d10b      	bne.n	800ae30 <_printf_i+0x144>
 800ae18:	6823      	ldr	r3, [r4, #0]
 800ae1a:	07df      	lsls	r7, r3, #31
 800ae1c:	d508      	bpl.n	800ae30 <_printf_i+0x144>
 800ae1e:	6923      	ldr	r3, [r4, #16]
 800ae20:	6861      	ldr	r1, [r4, #4]
 800ae22:	4299      	cmp	r1, r3
 800ae24:	bfde      	ittt	le
 800ae26:	2330      	movle	r3, #48	@ 0x30
 800ae28:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ae2c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ae30:	1b92      	subs	r2, r2, r6
 800ae32:	6122      	str	r2, [r4, #16]
 800ae34:	f8cd a000 	str.w	sl, [sp]
 800ae38:	464b      	mov	r3, r9
 800ae3a:	aa03      	add	r2, sp, #12
 800ae3c:	4621      	mov	r1, r4
 800ae3e:	4640      	mov	r0, r8
 800ae40:	f7ff fee6 	bl	800ac10 <_printf_common>
 800ae44:	3001      	adds	r0, #1
 800ae46:	d14a      	bne.n	800aede <_printf_i+0x1f2>
 800ae48:	f04f 30ff 	mov.w	r0, #4294967295
 800ae4c:	b004      	add	sp, #16
 800ae4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae52:	6823      	ldr	r3, [r4, #0]
 800ae54:	f043 0320 	orr.w	r3, r3, #32
 800ae58:	6023      	str	r3, [r4, #0]
 800ae5a:	4833      	ldr	r0, [pc, #204]	@ (800af28 <_printf_i+0x23c>)
 800ae5c:	2778      	movs	r7, #120	@ 0x78
 800ae5e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ae62:	6823      	ldr	r3, [r4, #0]
 800ae64:	6831      	ldr	r1, [r6, #0]
 800ae66:	061f      	lsls	r7, r3, #24
 800ae68:	f851 5b04 	ldr.w	r5, [r1], #4
 800ae6c:	d402      	bmi.n	800ae74 <_printf_i+0x188>
 800ae6e:	065f      	lsls	r7, r3, #25
 800ae70:	bf48      	it	mi
 800ae72:	b2ad      	uxthmi	r5, r5
 800ae74:	6031      	str	r1, [r6, #0]
 800ae76:	07d9      	lsls	r1, r3, #31
 800ae78:	bf44      	itt	mi
 800ae7a:	f043 0320 	orrmi.w	r3, r3, #32
 800ae7e:	6023      	strmi	r3, [r4, #0]
 800ae80:	b11d      	cbz	r5, 800ae8a <_printf_i+0x19e>
 800ae82:	2310      	movs	r3, #16
 800ae84:	e7ac      	b.n	800ade0 <_printf_i+0xf4>
 800ae86:	4827      	ldr	r0, [pc, #156]	@ (800af24 <_printf_i+0x238>)
 800ae88:	e7e9      	b.n	800ae5e <_printf_i+0x172>
 800ae8a:	6823      	ldr	r3, [r4, #0]
 800ae8c:	f023 0320 	bic.w	r3, r3, #32
 800ae90:	6023      	str	r3, [r4, #0]
 800ae92:	e7f6      	b.n	800ae82 <_printf_i+0x196>
 800ae94:	4616      	mov	r6, r2
 800ae96:	e7bd      	b.n	800ae14 <_printf_i+0x128>
 800ae98:	6833      	ldr	r3, [r6, #0]
 800ae9a:	6825      	ldr	r5, [r4, #0]
 800ae9c:	6961      	ldr	r1, [r4, #20]
 800ae9e:	1d18      	adds	r0, r3, #4
 800aea0:	6030      	str	r0, [r6, #0]
 800aea2:	062e      	lsls	r6, r5, #24
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	d501      	bpl.n	800aeac <_printf_i+0x1c0>
 800aea8:	6019      	str	r1, [r3, #0]
 800aeaa:	e002      	b.n	800aeb2 <_printf_i+0x1c6>
 800aeac:	0668      	lsls	r0, r5, #25
 800aeae:	d5fb      	bpl.n	800aea8 <_printf_i+0x1bc>
 800aeb0:	8019      	strh	r1, [r3, #0]
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	6123      	str	r3, [r4, #16]
 800aeb6:	4616      	mov	r6, r2
 800aeb8:	e7bc      	b.n	800ae34 <_printf_i+0x148>
 800aeba:	6833      	ldr	r3, [r6, #0]
 800aebc:	1d1a      	adds	r2, r3, #4
 800aebe:	6032      	str	r2, [r6, #0]
 800aec0:	681e      	ldr	r6, [r3, #0]
 800aec2:	6862      	ldr	r2, [r4, #4]
 800aec4:	2100      	movs	r1, #0
 800aec6:	4630      	mov	r0, r6
 800aec8:	f7f5 f992 	bl	80001f0 <memchr>
 800aecc:	b108      	cbz	r0, 800aed2 <_printf_i+0x1e6>
 800aece:	1b80      	subs	r0, r0, r6
 800aed0:	6060      	str	r0, [r4, #4]
 800aed2:	6863      	ldr	r3, [r4, #4]
 800aed4:	6123      	str	r3, [r4, #16]
 800aed6:	2300      	movs	r3, #0
 800aed8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aedc:	e7aa      	b.n	800ae34 <_printf_i+0x148>
 800aede:	6923      	ldr	r3, [r4, #16]
 800aee0:	4632      	mov	r2, r6
 800aee2:	4649      	mov	r1, r9
 800aee4:	4640      	mov	r0, r8
 800aee6:	47d0      	blx	sl
 800aee8:	3001      	adds	r0, #1
 800aeea:	d0ad      	beq.n	800ae48 <_printf_i+0x15c>
 800aeec:	6823      	ldr	r3, [r4, #0]
 800aeee:	079b      	lsls	r3, r3, #30
 800aef0:	d413      	bmi.n	800af1a <_printf_i+0x22e>
 800aef2:	68e0      	ldr	r0, [r4, #12]
 800aef4:	9b03      	ldr	r3, [sp, #12]
 800aef6:	4298      	cmp	r0, r3
 800aef8:	bfb8      	it	lt
 800aefa:	4618      	movlt	r0, r3
 800aefc:	e7a6      	b.n	800ae4c <_printf_i+0x160>
 800aefe:	2301      	movs	r3, #1
 800af00:	4632      	mov	r2, r6
 800af02:	4649      	mov	r1, r9
 800af04:	4640      	mov	r0, r8
 800af06:	47d0      	blx	sl
 800af08:	3001      	adds	r0, #1
 800af0a:	d09d      	beq.n	800ae48 <_printf_i+0x15c>
 800af0c:	3501      	adds	r5, #1
 800af0e:	68e3      	ldr	r3, [r4, #12]
 800af10:	9903      	ldr	r1, [sp, #12]
 800af12:	1a5b      	subs	r3, r3, r1
 800af14:	42ab      	cmp	r3, r5
 800af16:	dcf2      	bgt.n	800aefe <_printf_i+0x212>
 800af18:	e7eb      	b.n	800aef2 <_printf_i+0x206>
 800af1a:	2500      	movs	r5, #0
 800af1c:	f104 0619 	add.w	r6, r4, #25
 800af20:	e7f5      	b.n	800af0e <_printf_i+0x222>
 800af22:	bf00      	nop
 800af24:	0800c598 	.word	0x0800c598
 800af28:	0800c5a9 	.word	0x0800c5a9

0800af2c <__sflush_r>:
 800af2c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800af30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af34:	0716      	lsls	r6, r2, #28
 800af36:	4605      	mov	r5, r0
 800af38:	460c      	mov	r4, r1
 800af3a:	d454      	bmi.n	800afe6 <__sflush_r+0xba>
 800af3c:	684b      	ldr	r3, [r1, #4]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	dc02      	bgt.n	800af48 <__sflush_r+0x1c>
 800af42:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800af44:	2b00      	cmp	r3, #0
 800af46:	dd48      	ble.n	800afda <__sflush_r+0xae>
 800af48:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800af4a:	2e00      	cmp	r6, #0
 800af4c:	d045      	beq.n	800afda <__sflush_r+0xae>
 800af4e:	2300      	movs	r3, #0
 800af50:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800af54:	682f      	ldr	r7, [r5, #0]
 800af56:	6a21      	ldr	r1, [r4, #32]
 800af58:	602b      	str	r3, [r5, #0]
 800af5a:	d030      	beq.n	800afbe <__sflush_r+0x92>
 800af5c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800af5e:	89a3      	ldrh	r3, [r4, #12]
 800af60:	0759      	lsls	r1, r3, #29
 800af62:	d505      	bpl.n	800af70 <__sflush_r+0x44>
 800af64:	6863      	ldr	r3, [r4, #4]
 800af66:	1ad2      	subs	r2, r2, r3
 800af68:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800af6a:	b10b      	cbz	r3, 800af70 <__sflush_r+0x44>
 800af6c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800af6e:	1ad2      	subs	r2, r2, r3
 800af70:	2300      	movs	r3, #0
 800af72:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800af74:	6a21      	ldr	r1, [r4, #32]
 800af76:	4628      	mov	r0, r5
 800af78:	47b0      	blx	r6
 800af7a:	1c43      	adds	r3, r0, #1
 800af7c:	89a3      	ldrh	r3, [r4, #12]
 800af7e:	d106      	bne.n	800af8e <__sflush_r+0x62>
 800af80:	6829      	ldr	r1, [r5, #0]
 800af82:	291d      	cmp	r1, #29
 800af84:	d82b      	bhi.n	800afde <__sflush_r+0xb2>
 800af86:	4a2a      	ldr	r2, [pc, #168]	@ (800b030 <__sflush_r+0x104>)
 800af88:	410a      	asrs	r2, r1
 800af8a:	07d6      	lsls	r6, r2, #31
 800af8c:	d427      	bmi.n	800afde <__sflush_r+0xb2>
 800af8e:	2200      	movs	r2, #0
 800af90:	6062      	str	r2, [r4, #4]
 800af92:	04d9      	lsls	r1, r3, #19
 800af94:	6922      	ldr	r2, [r4, #16]
 800af96:	6022      	str	r2, [r4, #0]
 800af98:	d504      	bpl.n	800afa4 <__sflush_r+0x78>
 800af9a:	1c42      	adds	r2, r0, #1
 800af9c:	d101      	bne.n	800afa2 <__sflush_r+0x76>
 800af9e:	682b      	ldr	r3, [r5, #0]
 800afa0:	b903      	cbnz	r3, 800afa4 <__sflush_r+0x78>
 800afa2:	6560      	str	r0, [r4, #84]	@ 0x54
 800afa4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800afa6:	602f      	str	r7, [r5, #0]
 800afa8:	b1b9      	cbz	r1, 800afda <__sflush_r+0xae>
 800afaa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800afae:	4299      	cmp	r1, r3
 800afb0:	d002      	beq.n	800afb8 <__sflush_r+0x8c>
 800afb2:	4628      	mov	r0, r5
 800afb4:	f7ff fbea 	bl	800a78c <_free_r>
 800afb8:	2300      	movs	r3, #0
 800afba:	6363      	str	r3, [r4, #52]	@ 0x34
 800afbc:	e00d      	b.n	800afda <__sflush_r+0xae>
 800afbe:	2301      	movs	r3, #1
 800afc0:	4628      	mov	r0, r5
 800afc2:	47b0      	blx	r6
 800afc4:	4602      	mov	r2, r0
 800afc6:	1c50      	adds	r0, r2, #1
 800afc8:	d1c9      	bne.n	800af5e <__sflush_r+0x32>
 800afca:	682b      	ldr	r3, [r5, #0]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d0c6      	beq.n	800af5e <__sflush_r+0x32>
 800afd0:	2b1d      	cmp	r3, #29
 800afd2:	d001      	beq.n	800afd8 <__sflush_r+0xac>
 800afd4:	2b16      	cmp	r3, #22
 800afd6:	d11e      	bne.n	800b016 <__sflush_r+0xea>
 800afd8:	602f      	str	r7, [r5, #0]
 800afda:	2000      	movs	r0, #0
 800afdc:	e022      	b.n	800b024 <__sflush_r+0xf8>
 800afde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800afe2:	b21b      	sxth	r3, r3
 800afe4:	e01b      	b.n	800b01e <__sflush_r+0xf2>
 800afe6:	690f      	ldr	r7, [r1, #16]
 800afe8:	2f00      	cmp	r7, #0
 800afea:	d0f6      	beq.n	800afda <__sflush_r+0xae>
 800afec:	0793      	lsls	r3, r2, #30
 800afee:	680e      	ldr	r6, [r1, #0]
 800aff0:	bf08      	it	eq
 800aff2:	694b      	ldreq	r3, [r1, #20]
 800aff4:	600f      	str	r7, [r1, #0]
 800aff6:	bf18      	it	ne
 800aff8:	2300      	movne	r3, #0
 800affa:	eba6 0807 	sub.w	r8, r6, r7
 800affe:	608b      	str	r3, [r1, #8]
 800b000:	f1b8 0f00 	cmp.w	r8, #0
 800b004:	dde9      	ble.n	800afda <__sflush_r+0xae>
 800b006:	6a21      	ldr	r1, [r4, #32]
 800b008:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b00a:	4643      	mov	r3, r8
 800b00c:	463a      	mov	r2, r7
 800b00e:	4628      	mov	r0, r5
 800b010:	47b0      	blx	r6
 800b012:	2800      	cmp	r0, #0
 800b014:	dc08      	bgt.n	800b028 <__sflush_r+0xfc>
 800b016:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b01a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b01e:	81a3      	strh	r3, [r4, #12]
 800b020:	f04f 30ff 	mov.w	r0, #4294967295
 800b024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b028:	4407      	add	r7, r0
 800b02a:	eba8 0800 	sub.w	r8, r8, r0
 800b02e:	e7e7      	b.n	800b000 <__sflush_r+0xd4>
 800b030:	dfbffffe 	.word	0xdfbffffe

0800b034 <_fflush_r>:
 800b034:	b538      	push	{r3, r4, r5, lr}
 800b036:	690b      	ldr	r3, [r1, #16]
 800b038:	4605      	mov	r5, r0
 800b03a:	460c      	mov	r4, r1
 800b03c:	b913      	cbnz	r3, 800b044 <_fflush_r+0x10>
 800b03e:	2500      	movs	r5, #0
 800b040:	4628      	mov	r0, r5
 800b042:	bd38      	pop	{r3, r4, r5, pc}
 800b044:	b118      	cbz	r0, 800b04e <_fflush_r+0x1a>
 800b046:	6a03      	ldr	r3, [r0, #32]
 800b048:	b90b      	cbnz	r3, 800b04e <_fflush_r+0x1a>
 800b04a:	f7ff f971 	bl	800a330 <__sinit>
 800b04e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d0f3      	beq.n	800b03e <_fflush_r+0xa>
 800b056:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b058:	07d0      	lsls	r0, r2, #31
 800b05a:	d404      	bmi.n	800b066 <_fflush_r+0x32>
 800b05c:	0599      	lsls	r1, r3, #22
 800b05e:	d402      	bmi.n	800b066 <_fflush_r+0x32>
 800b060:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b062:	f7ff fb64 	bl	800a72e <__retarget_lock_acquire_recursive>
 800b066:	4628      	mov	r0, r5
 800b068:	4621      	mov	r1, r4
 800b06a:	f7ff ff5f 	bl	800af2c <__sflush_r>
 800b06e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b070:	07da      	lsls	r2, r3, #31
 800b072:	4605      	mov	r5, r0
 800b074:	d4e4      	bmi.n	800b040 <_fflush_r+0xc>
 800b076:	89a3      	ldrh	r3, [r4, #12]
 800b078:	059b      	lsls	r3, r3, #22
 800b07a:	d4e1      	bmi.n	800b040 <_fflush_r+0xc>
 800b07c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b07e:	f7ff fb57 	bl	800a730 <__retarget_lock_release_recursive>
 800b082:	e7dd      	b.n	800b040 <_fflush_r+0xc>

0800b084 <fiprintf>:
 800b084:	b40e      	push	{r1, r2, r3}
 800b086:	b503      	push	{r0, r1, lr}
 800b088:	4601      	mov	r1, r0
 800b08a:	ab03      	add	r3, sp, #12
 800b08c:	4805      	ldr	r0, [pc, #20]	@ (800b0a4 <fiprintf+0x20>)
 800b08e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b092:	6800      	ldr	r0, [r0, #0]
 800b094:	9301      	str	r3, [sp, #4]
 800b096:	f7ff fca3 	bl	800a9e0 <_vfiprintf_r>
 800b09a:	b002      	add	sp, #8
 800b09c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b0a0:	b003      	add	sp, #12
 800b0a2:	4770      	bx	lr
 800b0a4:	2000001c 	.word	0x2000001c

0800b0a8 <__swhatbuf_r>:
 800b0a8:	b570      	push	{r4, r5, r6, lr}
 800b0aa:	460c      	mov	r4, r1
 800b0ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0b0:	2900      	cmp	r1, #0
 800b0b2:	b096      	sub	sp, #88	@ 0x58
 800b0b4:	4615      	mov	r5, r2
 800b0b6:	461e      	mov	r6, r3
 800b0b8:	da0d      	bge.n	800b0d6 <__swhatbuf_r+0x2e>
 800b0ba:	89a3      	ldrh	r3, [r4, #12]
 800b0bc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b0c0:	f04f 0100 	mov.w	r1, #0
 800b0c4:	bf14      	ite	ne
 800b0c6:	2340      	movne	r3, #64	@ 0x40
 800b0c8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b0cc:	2000      	movs	r0, #0
 800b0ce:	6031      	str	r1, [r6, #0]
 800b0d0:	602b      	str	r3, [r5, #0]
 800b0d2:	b016      	add	sp, #88	@ 0x58
 800b0d4:	bd70      	pop	{r4, r5, r6, pc}
 800b0d6:	466a      	mov	r2, sp
 800b0d8:	f000 f87c 	bl	800b1d4 <_fstat_r>
 800b0dc:	2800      	cmp	r0, #0
 800b0de:	dbec      	blt.n	800b0ba <__swhatbuf_r+0x12>
 800b0e0:	9901      	ldr	r1, [sp, #4]
 800b0e2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b0e6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b0ea:	4259      	negs	r1, r3
 800b0ec:	4159      	adcs	r1, r3
 800b0ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b0f2:	e7eb      	b.n	800b0cc <__swhatbuf_r+0x24>

0800b0f4 <__smakebuf_r>:
 800b0f4:	898b      	ldrh	r3, [r1, #12]
 800b0f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b0f8:	079d      	lsls	r5, r3, #30
 800b0fa:	4606      	mov	r6, r0
 800b0fc:	460c      	mov	r4, r1
 800b0fe:	d507      	bpl.n	800b110 <__smakebuf_r+0x1c>
 800b100:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b104:	6023      	str	r3, [r4, #0]
 800b106:	6123      	str	r3, [r4, #16]
 800b108:	2301      	movs	r3, #1
 800b10a:	6163      	str	r3, [r4, #20]
 800b10c:	b003      	add	sp, #12
 800b10e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b110:	ab01      	add	r3, sp, #4
 800b112:	466a      	mov	r2, sp
 800b114:	f7ff ffc8 	bl	800b0a8 <__swhatbuf_r>
 800b118:	9f00      	ldr	r7, [sp, #0]
 800b11a:	4605      	mov	r5, r0
 800b11c:	4639      	mov	r1, r7
 800b11e:	4630      	mov	r0, r6
 800b120:	f7ff fba8 	bl	800a874 <_malloc_r>
 800b124:	b948      	cbnz	r0, 800b13a <__smakebuf_r+0x46>
 800b126:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b12a:	059a      	lsls	r2, r3, #22
 800b12c:	d4ee      	bmi.n	800b10c <__smakebuf_r+0x18>
 800b12e:	f023 0303 	bic.w	r3, r3, #3
 800b132:	f043 0302 	orr.w	r3, r3, #2
 800b136:	81a3      	strh	r3, [r4, #12]
 800b138:	e7e2      	b.n	800b100 <__smakebuf_r+0xc>
 800b13a:	89a3      	ldrh	r3, [r4, #12]
 800b13c:	6020      	str	r0, [r4, #0]
 800b13e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b142:	81a3      	strh	r3, [r4, #12]
 800b144:	9b01      	ldr	r3, [sp, #4]
 800b146:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b14a:	b15b      	cbz	r3, 800b164 <__smakebuf_r+0x70>
 800b14c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b150:	4630      	mov	r0, r6
 800b152:	f000 f851 	bl	800b1f8 <_isatty_r>
 800b156:	b128      	cbz	r0, 800b164 <__smakebuf_r+0x70>
 800b158:	89a3      	ldrh	r3, [r4, #12]
 800b15a:	f023 0303 	bic.w	r3, r3, #3
 800b15e:	f043 0301 	orr.w	r3, r3, #1
 800b162:	81a3      	strh	r3, [r4, #12]
 800b164:	89a3      	ldrh	r3, [r4, #12]
 800b166:	431d      	orrs	r5, r3
 800b168:	81a5      	strh	r5, [r4, #12]
 800b16a:	e7cf      	b.n	800b10c <__smakebuf_r+0x18>

0800b16c <_putc_r>:
 800b16c:	b570      	push	{r4, r5, r6, lr}
 800b16e:	460d      	mov	r5, r1
 800b170:	4614      	mov	r4, r2
 800b172:	4606      	mov	r6, r0
 800b174:	b118      	cbz	r0, 800b17e <_putc_r+0x12>
 800b176:	6a03      	ldr	r3, [r0, #32]
 800b178:	b90b      	cbnz	r3, 800b17e <_putc_r+0x12>
 800b17a:	f7ff f8d9 	bl	800a330 <__sinit>
 800b17e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b180:	07d8      	lsls	r0, r3, #31
 800b182:	d405      	bmi.n	800b190 <_putc_r+0x24>
 800b184:	89a3      	ldrh	r3, [r4, #12]
 800b186:	0599      	lsls	r1, r3, #22
 800b188:	d402      	bmi.n	800b190 <_putc_r+0x24>
 800b18a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b18c:	f7ff facf 	bl	800a72e <__retarget_lock_acquire_recursive>
 800b190:	68a3      	ldr	r3, [r4, #8]
 800b192:	3b01      	subs	r3, #1
 800b194:	2b00      	cmp	r3, #0
 800b196:	60a3      	str	r3, [r4, #8]
 800b198:	da05      	bge.n	800b1a6 <_putc_r+0x3a>
 800b19a:	69a2      	ldr	r2, [r4, #24]
 800b19c:	4293      	cmp	r3, r2
 800b19e:	db12      	blt.n	800b1c6 <_putc_r+0x5a>
 800b1a0:	b2eb      	uxtb	r3, r5
 800b1a2:	2b0a      	cmp	r3, #10
 800b1a4:	d00f      	beq.n	800b1c6 <_putc_r+0x5a>
 800b1a6:	6823      	ldr	r3, [r4, #0]
 800b1a8:	1c5a      	adds	r2, r3, #1
 800b1aa:	6022      	str	r2, [r4, #0]
 800b1ac:	701d      	strb	r5, [r3, #0]
 800b1ae:	b2ed      	uxtb	r5, r5
 800b1b0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b1b2:	07da      	lsls	r2, r3, #31
 800b1b4:	d405      	bmi.n	800b1c2 <_putc_r+0x56>
 800b1b6:	89a3      	ldrh	r3, [r4, #12]
 800b1b8:	059b      	lsls	r3, r3, #22
 800b1ba:	d402      	bmi.n	800b1c2 <_putc_r+0x56>
 800b1bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b1be:	f7ff fab7 	bl	800a730 <__retarget_lock_release_recursive>
 800b1c2:	4628      	mov	r0, r5
 800b1c4:	bd70      	pop	{r4, r5, r6, pc}
 800b1c6:	4629      	mov	r1, r5
 800b1c8:	4622      	mov	r2, r4
 800b1ca:	4630      	mov	r0, r6
 800b1cc:	f7ff f9a1 	bl	800a512 <__swbuf_r>
 800b1d0:	4605      	mov	r5, r0
 800b1d2:	e7ed      	b.n	800b1b0 <_putc_r+0x44>

0800b1d4 <_fstat_r>:
 800b1d4:	b538      	push	{r3, r4, r5, lr}
 800b1d6:	4d07      	ldr	r5, [pc, #28]	@ (800b1f4 <_fstat_r+0x20>)
 800b1d8:	2300      	movs	r3, #0
 800b1da:	4604      	mov	r4, r0
 800b1dc:	4608      	mov	r0, r1
 800b1de:	4611      	mov	r1, r2
 800b1e0:	602b      	str	r3, [r5, #0]
 800b1e2:	f7f7 fbb7 	bl	8002954 <_fstat>
 800b1e6:	1c43      	adds	r3, r0, #1
 800b1e8:	d102      	bne.n	800b1f0 <_fstat_r+0x1c>
 800b1ea:	682b      	ldr	r3, [r5, #0]
 800b1ec:	b103      	cbz	r3, 800b1f0 <_fstat_r+0x1c>
 800b1ee:	6023      	str	r3, [r4, #0]
 800b1f0:	bd38      	pop	{r3, r4, r5, pc}
 800b1f2:	bf00      	nop
 800b1f4:	20000b10 	.word	0x20000b10

0800b1f8 <_isatty_r>:
 800b1f8:	b538      	push	{r3, r4, r5, lr}
 800b1fa:	4d06      	ldr	r5, [pc, #24]	@ (800b214 <_isatty_r+0x1c>)
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	4604      	mov	r4, r0
 800b200:	4608      	mov	r0, r1
 800b202:	602b      	str	r3, [r5, #0]
 800b204:	f7f7 fbb6 	bl	8002974 <_isatty>
 800b208:	1c43      	adds	r3, r0, #1
 800b20a:	d102      	bne.n	800b212 <_isatty_r+0x1a>
 800b20c:	682b      	ldr	r3, [r5, #0]
 800b20e:	b103      	cbz	r3, 800b212 <_isatty_r+0x1a>
 800b210:	6023      	str	r3, [r4, #0]
 800b212:	bd38      	pop	{r3, r4, r5, pc}
 800b214:	20000b10 	.word	0x20000b10

0800b218 <_sbrk_r>:
 800b218:	b538      	push	{r3, r4, r5, lr}
 800b21a:	4d06      	ldr	r5, [pc, #24]	@ (800b234 <_sbrk_r+0x1c>)
 800b21c:	2300      	movs	r3, #0
 800b21e:	4604      	mov	r4, r0
 800b220:	4608      	mov	r0, r1
 800b222:	602b      	str	r3, [r5, #0]
 800b224:	f7f7 fbbe 	bl	80029a4 <_sbrk>
 800b228:	1c43      	adds	r3, r0, #1
 800b22a:	d102      	bne.n	800b232 <_sbrk_r+0x1a>
 800b22c:	682b      	ldr	r3, [r5, #0]
 800b22e:	b103      	cbz	r3, 800b232 <_sbrk_r+0x1a>
 800b230:	6023      	str	r3, [r4, #0]
 800b232:	bd38      	pop	{r3, r4, r5, pc}
 800b234:	20000b10 	.word	0x20000b10

0800b238 <abort>:
 800b238:	b508      	push	{r3, lr}
 800b23a:	2006      	movs	r0, #6
 800b23c:	f000 f82c 	bl	800b298 <raise>
 800b240:	2001      	movs	r0, #1
 800b242:	f7f7 fb53 	bl	80028ec <_exit>

0800b246 <_raise_r>:
 800b246:	291f      	cmp	r1, #31
 800b248:	b538      	push	{r3, r4, r5, lr}
 800b24a:	4605      	mov	r5, r0
 800b24c:	460c      	mov	r4, r1
 800b24e:	d904      	bls.n	800b25a <_raise_r+0x14>
 800b250:	2316      	movs	r3, #22
 800b252:	6003      	str	r3, [r0, #0]
 800b254:	f04f 30ff 	mov.w	r0, #4294967295
 800b258:	bd38      	pop	{r3, r4, r5, pc}
 800b25a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b25c:	b112      	cbz	r2, 800b264 <_raise_r+0x1e>
 800b25e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b262:	b94b      	cbnz	r3, 800b278 <_raise_r+0x32>
 800b264:	4628      	mov	r0, r5
 800b266:	f000 f831 	bl	800b2cc <_getpid_r>
 800b26a:	4622      	mov	r2, r4
 800b26c:	4601      	mov	r1, r0
 800b26e:	4628      	mov	r0, r5
 800b270:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b274:	f000 b818 	b.w	800b2a8 <_kill_r>
 800b278:	2b01      	cmp	r3, #1
 800b27a:	d00a      	beq.n	800b292 <_raise_r+0x4c>
 800b27c:	1c59      	adds	r1, r3, #1
 800b27e:	d103      	bne.n	800b288 <_raise_r+0x42>
 800b280:	2316      	movs	r3, #22
 800b282:	6003      	str	r3, [r0, #0]
 800b284:	2001      	movs	r0, #1
 800b286:	e7e7      	b.n	800b258 <_raise_r+0x12>
 800b288:	2100      	movs	r1, #0
 800b28a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b28e:	4620      	mov	r0, r4
 800b290:	4798      	blx	r3
 800b292:	2000      	movs	r0, #0
 800b294:	e7e0      	b.n	800b258 <_raise_r+0x12>
	...

0800b298 <raise>:
 800b298:	4b02      	ldr	r3, [pc, #8]	@ (800b2a4 <raise+0xc>)
 800b29a:	4601      	mov	r1, r0
 800b29c:	6818      	ldr	r0, [r3, #0]
 800b29e:	f7ff bfd2 	b.w	800b246 <_raise_r>
 800b2a2:	bf00      	nop
 800b2a4:	2000001c 	.word	0x2000001c

0800b2a8 <_kill_r>:
 800b2a8:	b538      	push	{r3, r4, r5, lr}
 800b2aa:	4d07      	ldr	r5, [pc, #28]	@ (800b2c8 <_kill_r+0x20>)
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	4604      	mov	r4, r0
 800b2b0:	4608      	mov	r0, r1
 800b2b2:	4611      	mov	r1, r2
 800b2b4:	602b      	str	r3, [r5, #0]
 800b2b6:	f7f7 fb09 	bl	80028cc <_kill>
 800b2ba:	1c43      	adds	r3, r0, #1
 800b2bc:	d102      	bne.n	800b2c4 <_kill_r+0x1c>
 800b2be:	682b      	ldr	r3, [r5, #0]
 800b2c0:	b103      	cbz	r3, 800b2c4 <_kill_r+0x1c>
 800b2c2:	6023      	str	r3, [r4, #0]
 800b2c4:	bd38      	pop	{r3, r4, r5, pc}
 800b2c6:	bf00      	nop
 800b2c8:	20000b10 	.word	0x20000b10

0800b2cc <_getpid_r>:
 800b2cc:	f7f7 baf6 	b.w	80028bc <_getpid>

0800b2d0 <roundf>:
 800b2d0:	ee10 0a10 	vmov	r0, s0
 800b2d4:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800b2d8:	3a7f      	subs	r2, #127	@ 0x7f
 800b2da:	2a16      	cmp	r2, #22
 800b2dc:	dc15      	bgt.n	800b30a <roundf+0x3a>
 800b2de:	2a00      	cmp	r2, #0
 800b2e0:	da08      	bge.n	800b2f4 <roundf+0x24>
 800b2e2:	3201      	adds	r2, #1
 800b2e4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800b2e8:	d101      	bne.n	800b2ee <roundf+0x1e>
 800b2ea:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 800b2ee:	ee00 3a10 	vmov	s0, r3
 800b2f2:	4770      	bx	lr
 800b2f4:	4907      	ldr	r1, [pc, #28]	@ (800b314 <roundf+0x44>)
 800b2f6:	4111      	asrs	r1, r2
 800b2f8:	4201      	tst	r1, r0
 800b2fa:	d0fa      	beq.n	800b2f2 <roundf+0x22>
 800b2fc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800b300:	4113      	asrs	r3, r2
 800b302:	4403      	add	r3, r0
 800b304:	ea23 0301 	bic.w	r3, r3, r1
 800b308:	e7f1      	b.n	800b2ee <roundf+0x1e>
 800b30a:	2a80      	cmp	r2, #128	@ 0x80
 800b30c:	d1f1      	bne.n	800b2f2 <roundf+0x22>
 800b30e:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b312:	4770      	bx	lr
 800b314:	007fffff 	.word	0x007fffff

0800b318 <_init>:
 800b318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b31a:	bf00      	nop
 800b31c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b31e:	bc08      	pop	{r3}
 800b320:	469e      	mov	lr, r3
 800b322:	4770      	bx	lr

0800b324 <_fini>:
 800b324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b326:	bf00      	nop
 800b328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b32a:	bc08      	pop	{r3}
 800b32c:	469e      	mov	lr, r3
 800b32e:	4770      	bx	lr
